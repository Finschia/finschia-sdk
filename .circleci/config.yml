version: 2.1

executors:
  golang:
    docker:
      - image: circleci/golang:1.14.6

commands:
  make:
    parameters:
      description:
        type: string
      target:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - restore_cache:
          name: "Restore source code cache"
          keys:
            - go-src-v1-{{ .Revision }}
      - checkout
      - restore_cache:
          name: "Restore go modules cache"
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: << parameters.description >>
          command: |
            make << parameters.target >>

jobs:
  setup-dependencies:
    executor: golang
    steps:
      - checkout
      - restore_cache:
          name: "Restore go modules cache"
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Cache go modules
          command: |
            go env -w GOPRIVATE=github.com/line/*
            git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            make go-mod-cache
      - run:
          name: Build
          command: |
            go env -w GOPRIVATE=github.com/line/*
            git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            make build
      - run:
          name: Git garbage collection
          command: git gc
      - save_cache:
          name: "Save go modules cache"
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - save_cache:
          name: "Save source code cache"
          key: go-src-v1-{{ .Revision }}
          paths:
            - ".git"

  test-sim-nondeterminism:
    executor: golang
    steps:
      - make:
          target: test-sim-nondeterminism
          description: "Test individual module simulations"

  test-sim-import-export:
    executor: golang
    steps:
      - make:
          target: test-sim-import-export
          description: "Test application import/export simulation"

  test-sim-after-import:
    executor: golang
    steps:
      - make:
          target: test-sim-after-import
          description: "Test simulation after import"

  test-sim-multi-seed-long:
    executor: golang
    steps:
      - make:
          target: test-sim-multi-seed-long
          description: "Test multi-seed simulation (long)"

  test-sim-multi-seed-short:
    executor: golang
    steps:
      - make:
          target: test-sim-multi-seed-short
          description: "Test multi-seed simulation (short)"

  test-cover:
    executor: golang
    parallelism: 4
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Run tests
          command: |
            export VERSION="$(git describe --tags --long | sed 's/v\(.*\)/\1/')"
            export GO111MODULE=on
            go env -w GOPRIVATE=github.com/line/*
            git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            mkdir -p /tmp/logs /tmp/workspace/profiles
            for pkg in $(go list ./... | grep -v '/simulation' | circleci tests split); do
              id=$(echo "$pkg" | sed 's|[/.]|_|g')
              go test -mod=readonly -timeout 8m -race -coverprofile=/tmp/workspace/profiles/$id.out -covermode=atomic -tags='ledger test_ledger_mock' "$pkg" | tee "/tmp/logs/$id-$RANDOM.log"
            done
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - "profiles/*"
      - store_artifacts:
          path: /tmp/logs

  update-swagger-docs:
    executor: golang
    steps:
      - make:
          target: update-swagger-docs
          description: "Check if statik.go is up-to-date"
  fmt:
    executor: golang
    resource_class: small
    steps:
      - checkout
      - run:
          name: check formatting
          command: if [[ -n "$(gofmt -l .)" ]]; then gofmt -l .; exit 1; fi          
  lint:
    executor: golang
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: lint
          command: |
            export GO111MODULE=on
            go env -w GOPRIVATE=github.com/line/*
            git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.27
            make lint
  unit_test:
    executor: golang    
    resource_class: medium
    parallelism: 1
    environment:
      GOFLAGS: -p=8
    steps:
      - checkout
      - run:
          name: unit-test
          command: |
            export GO111MODULE=on
            go env -w GOPRIVATE=github.com/line/*
            git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            make test-unit
  integration_test:
    executor: golang    
    resource_class: xlarge
    parallelism: 1
    steps:
      - checkout
      - restore_cache:
          keys:
            - linkwasmd-mod-deps-{{ checksum "x/wasm/linkwasmd/go.sum" }}
      - run:
          name: download dependencies
          working_directory: x/wasm/linkwasmd
          command: |
            export GO111MODULE=on
            go env -w GOPRIVATE=github.com/line/*
            git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            go mod download
      - save_cache:
          key: linkwasmd-mod-deps-{{ checksum "x/wasm/linkwasmd/go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: wasm-integration-test
          working_directory: x/wasm/linkwasmd
          command: make test-integration
  perf_check:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      GO111MODULE: 'on'
    resource_class: medium
    parallelism: 1
    steps:
      - checkout
      - run:
          name: setup tools
          working_directory: x/wasm/linkwasmd/perf/tools
          command: |
            sudo apt update
            sudo apt install linux-tools-$(uname -r)
            tar -zxvf FlameGraph.tar.gz
      - restore_cache:
          keys:
            - go_workspace-pkg-mod-deps-{{ checksum "x/wasm/linkwasmd/go.sum" }}
      - run:
          name: build binaries
          working_directory: x/wasm/linkwasmd
          command: |
            export GO111MODULE=on
            go env GOMODCACHE
            go env -w GOPRIVATE=github.com/line/*
            git config --global url."https://${GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            make install
      - save_cache:
          key: go_workspace-pkg-mod-deps-{{ checksum "x/wasm/linkwasmd/go.sum" }}
          paths:
            - "/home/circleci/.go_workspace/pkg/mod"
      - run:
          name: init chain
          working_directory: x/wasm/linkwasmd
          command: perf/scripts/init-chain.sh
      - run:
          name: prepare
          working_directory: x/wasm/linkwasmd
          command: perf/scripts/prepare.sh perf/contract/cw_erc20_v4.wasm 150
      - run:
          name: capture cpu profile
          working_directory: x/wasm/linkwasmd
          command: perf/scripts/capture.sh 150
      - store_artifacts:
          path: x/wasm/linkwasmd/reports
      - run:
          name: Post TPS to GitHub PR
          working_directory: x/wasm/linkwasmd
          command: |
            if [[ $(echo "$CIRCLE_BRANCH" | grep -c "pull") -eq 0 ]]; then
              # skip on non PR branch
              exit 0
            fi

            tps=$(tail -1 reports/report.txt)

            pr_response=$(curl -H "Authorization: token $GITHUB_TOKEN" --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls/$CIRCLE_PR_NUMBER")

            if [ $(echo $pr_response | jq length) -eq 0 ]; then
              echo "No PR found to update"
            else
              pr_comment_url=$(echo $pr_response | jq -r "._links.comments.href")
            fi

            curl -H "Authorization: token $GITHUB_TOKEN" --location --request POST "$pr_comment_url" \
            -u $GH_USER:$GH_API \
            --header 'Content-Type: application/json' \
            --data-raw "{\"body\":\"$tps\"}"
  semantic_release:
    executor: golang    
    docker:
      - image: circleci/node:10
    resource_class: medium
    steps:
      - checkout
      - run: yarn global add --no-progress --non-interactive "semantic-release" "@semantic-release/exec"
      - run: $(yarn global bin)/semantic-release

workflows:
  version: 2
  test-suite:
    jobs:
      - setup-dependencies
      - fmt:
          requires:
            - setup-dependencies    
      - lint:
          requires:
            - setup-dependencies
      - update-swagger-docs:
          requires:
            - setup-dependencies
      - test-cover:
          requires:
            - setup-dependencies
      - test-sim-nondeterminism:
          requires:
            - setup-dependencies
          filters:
            branches:
              only:
                - v1/develop
                - /release.*/
      - test-sim-import-export:
          requires:
            - setup-dependencies
          filters:
            branches:
              only:
                - v1/develop
                - /release.*/
      - test-sim-after-import:
          requires:
            - setup-dependencies
          filters:
            branches:
              only:
                - v1/develop
                - /release.*/
      - test-sim-multi-seed-short:
          requires:
            - setup-dependencies
          filters:
            branches:
              only:
                - v1/develop
                - /release.*/
      - unit_test:
          requires:
            - setup-dependencies
      - integration_test:
          requires:
            - setup-dependencies
      - perf_check:
          requires:
            - setup-dependencies
      - semantic_release:
          requires:
            - fmt
            - lint
            - unit_test
            - integration_test
            - test-cover
            - test-sim-nondeterminism
            - test-sim-import-export
            - test-sim-after-import
            - test-sim-multi-seed-short
          filters:
            branches:
              only: v1/main
# disable long. because it is toooooooo long
#      - test-sim-multi-seed-long:
#          requires:
#            - setup-dependencies
#          # These filters ensure that the long sim only runs during release
#          filters:
#            branches:
#              only:
#                - v1/develop
#                - /release.*/
