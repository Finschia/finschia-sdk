syntax = "proto3";
package lbm.token.v1;

option go_package                      = "github.com/line/lbm-sdk/x/token";
option (gogoproto.equal_all)           = false;
option (gogoproto.goproto_getters_all) = false;

import "gogoproto/gogo.proto";

// Params defines the parameters for the token module.
message Params {}

// TokenClass defines token information.
message TokenClass {
  // contract_id defines the unique identifier of the token class.
  string contract_id = 1;
  // name defines the human-readable name of the token class. mandatory (not ERC20 compliant).
  string name = 2;
  // symbol is an abbreviated name for token class. mandatory (not ERC20 compliant).
  string symbol = 3;
  // image_uri is an uri for the image of the token class stored off chain.
  string image_uri = 4;
  // meta is a brief description of token class.
  string meta = 5;
  // decimals is the number of decimals which one must divide the amount by to get its user representation.
  int32 decimals = 6;
  // mintable represents whether the token is allowed to mint or burn.
  bool mintable = 7;
}

// Pair defines a key-value pair.
message Pair {
  string field = 1;
  string value = 2;
}

// Permission enumerates the valid permissions on a token class.
enum Permission {
  unspecified = 0 [(gogoproto.enumvalue_customname) = "Unspecified"];
  modify      = 1 [(gogoproto.enumvalue_customname) = "Modify"];
  mint        = 2 [(gogoproto.enumvalue_customname) = "Mint"];
  burn        = 3 [(gogoproto.enumvalue_customname) = "Burn"];
}

// Authorization defines an authorization given to the operator on tokens of the holder.
message Authorization {
  // address of the token holder which approves the authorization.
  string holder = 1;
  // address of the operator which the authorization is granted to.
  string operator = 2;
}

// Grant defines permission given to a grantee.
message Grant {
  // address of the grantee.
  string grantee = 1;
  // permission on the token class.
  string permission = 2;
}
