syntax = "proto3";
package lbm.token.v1;

import "gogoproto/gogo.proto";
import "lbm/token/v1/token.proto";

option go_package = "github.com/line/lbm-sdk/x/token";

option (gogoproto.equal_all)           = false;
option (gogoproto.goproto_getters_all) = false;

// Msg defines the token Msg service.
service Msg {
  // Send defines a method to send tokens from one account to another account.
  rpc Send(MsgSend) returns (MsgSendResponse);

  // OperatorSend defines a method to send tokens from one account to another account by the proxy.
  rpc OperatorSend(MsgOperatorSend) returns (MsgOperatorSendResponse);

  // AuthorizeOperator allows one to send tokens on behalf of the approver.
  rpc AuthorizeOperator(MsgAuthorizeOperator) returns (MsgAuthorizeOperatorResponse);

  // RevokeOperator revoke the authorization of the proxy to send the approver's tokens.
  // Since: finschia
  rpc RevokeOperator(MsgRevokeOperator) returns (MsgRevokeOperatorResponse);

  // Issue defines a method to create a class of token.
  rpc Issue(MsgIssue) returns (MsgIssueResponse);

  // Grant allows one to mint or burn tokens or modify a token metadata.
  rpc Grant(MsgGrant) returns (MsgGrantResponse);

  // Abandon abandons a permission.
  rpc Abandon(MsgAbandon) returns (MsgAbandonResponse);

  // Mint defines a method to mint tokens.
  rpc Mint(MsgMint) returns (MsgMintResponse);

  // Burn defines a method to burn tokens.
  rpc Burn(MsgBurn) returns (MsgBurnResponse);

  // OperatorBurn defines a method to burn tokens.
  rpc OperatorBurn(MsgOperatorBurn) returns (MsgOperatorBurnResponse);

  // Modify defines a method to modify a token class.
  rpc Modify(MsgModify) returns (MsgModifyResponse);
}

// MsgSend defines the Msg/Send request type.
message MsgSend {
  string contract_id = 1;
  string from        = 2;
  string to          = 3;
  string amount      = 4 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgSendResponse defines the Msg/Send response type.
message MsgSendResponse {}

// MsgOperatorSend defines the Msg/OperatorSend request type.
message MsgOperatorSend {
  string contract_id = 1;
  string proxy       = 2;
  string from        = 3;
  string to          = 4;
  string amount      = 5 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgOperatorSendResponse defines the Msg/OperatorSend response type.
message MsgOperatorSendResponse {}

// MsgAuthorizeOperator defines the Msg/AuthorizeOperator request type.
message MsgAuthorizeOperator {
  // contract id associated with the token class.
  string contract_id = 1;
  // approver is the address of the approver of the authorization.
  string approver = 2;
  // proxy is the address of the operator which the authorization is granted to.
  string proxy = 3;
}

// MsgAuthorizeOperatorResponse defines the Msg/AuthorizeOperator response type.
message MsgAuthorizeOperatorResponse {}

// MsgRevokeOperator defines the Msg/RevokeOperator request type.
message MsgRevokeOperator {
  string contract_id = 1;
  string approver    = 2;
  string proxy       = 3;
}

// MsgRevokeOperatorResponse defines the Msg/RevokeOperator response type.
message MsgRevokeOperatorResponse {}

// MsgIssue defines the Msg/Issue request type.
message MsgIssue {
  // name defines the human-readable name of the token class. mandatory (not compatible with ERC20).
  string name = 1;
  // symbol is an abbreviated name for token class. mandatory (not compatible with ERC20).
  string symbol = 2;
  // image_uri is an uri for the image of the token class stored off chain.
  string image_uri = 3;
  // meta is a brief description of token class.
  string meta = 4;
  // decimals is the number of decimals which one must divide the amount by to get its user representation.
  int32 decimals = 5;
  // mintable represents whether the token is allowed to mint.
  bool mintable = 6;

  // the address which all permissions on the token class will be granted to (not a permanent property).
  string owner = 7;

  // the address to send the minted token to. mandatory.
  string to = 8;
  // amount of tokens to mint on issuance. mandatory.
  string amount = 9 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgIssueResponse defines the Msg/Issue response type.
message MsgIssueResponse {}

// MsgGrant defines the Msg/Grant request type.
message MsgGrant {
  string contract_id = 1;
  string from        = 2;
  string to          = 3;
  string permission  = 4;
}

// MsgGrantResponse defines the Msg/Grant response type.
message MsgGrantResponse {}

// MsgAbandon defines the Msg/Abandon request type.
message MsgAbandon {
  string contract_id = 1;
  string grantee     = 2;
  string permission  = 3;
}

// MsgAbandonResponse defines the Msg/Abandon response type.
message MsgAbandonResponse {}

// MsgMint defines the Msg/Mint request type.
message MsgMint {
  string contract_id = 1;
  string from        = 2;
  string to          = 3;
  string amount      = 4 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgMintResponse defines the Msg/Mint response type.
message MsgMintResponse {}

// MsgBurn defines the Msg/Burn request type.
message MsgBurn {
  string contract_id = 1;
  string from        = 2;
  string amount      = 3 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgBurnResponse defines the Msg/Burn response type.
message MsgBurnResponse {}

// MsgOperatorBurn defines the Msg/OperatorBurn request type.
message MsgOperatorBurn {
  string contract_id = 1;
  string proxy       = 2;
  string from        = 3;
  string amount      = 4 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgOperatorBurnResponse defines the Msg/OperatorBurn response type.
message MsgOperatorBurnResponse {}

// MsgModify defines the Msg/Modify request type.
message MsgModify {
  string        contract_id = 1;
  string        owner       = 2;
  repeated Pair changes     = 3 [(gogoproto.nullable) = false];
}

// MsgModifyResponse defines the Msg/Modify response type.
message MsgModifyResponse {}
