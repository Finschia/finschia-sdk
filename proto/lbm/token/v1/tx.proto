syntax = "proto3";
package lbm.token.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "lbm/token/v1/token.proto";

option go_package = "github.com/Finschia/finschia-sdk/x/token";

option (gogoproto.equal_all)           = false;
option (gogoproto.goproto_getters_all) = false;

// Msg defines the token Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
}

// MsgSend defines the Msg/Send request type.
message MsgSend {
  option deprecated = true;

  option (cosmos.msg.v1.signer) = "from";
  option (amino.name) = "lbm-sdk/MsgSend";

  // contract id associated with the token class.
  string contract_id = 1;
  // holder whose tokens are being sent.
  string from = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // recipient of the tokens.
  string to = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // number of tokens to send.
  string amount = 4 [(gogoproto.customtype) = "github.com/Finschia/finschia-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgSendResponse defines the Msg/Send response type.
message MsgSendResponse {
  option deprecated = true;
}

// MsgOperatorSend defines the Msg/OperatorSend request type.
message MsgOperatorSend {
  option deprecated = true;

  option (cosmos.msg.v1.signer) = "operator";
  option (amino.name) = "lbm-sdk/MsgOperatorSend";

  // contract id associated with the token class.
  string contract_id = 1;
  // the address of the operator.
  string operator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // the address which the transfer is from.
  string from = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // the address which the transfer is to.
  string to = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // the amount of the transfer.
  string amount = 5 [(gogoproto.customtype) = "github.com/Finschia/finschia-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgOperatorSendResponse defines the Msg/OperatorSend response type.
message MsgOperatorSendResponse {
  option deprecated = true;
}

// MsgRevokeOperator defines the Msg/RevokeOperator request type.
//
// Since: 0.46.0 (finschia)
message MsgRevokeOperator {
  option deprecated = true;

  option (cosmos.msg.v1.signer) = "holder";
  option (amino.name) = "lbm-sdk/token/MsgRevokeOperator";

  // contract id associated with the token class.
  string contract_id = 1;
  // address of a holder which revokes the `operator` address as an operator.
  string holder = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // address to rescind as an operator for `holder`.
  string operator = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgRevokeOperatorResponse defines the Msg/RevokeOperator response type.
//
// Since: 0.46.0 (finschia)
message MsgRevokeOperatorResponse {
  option deprecated = true;
}

// MsgAuthorizeOperator defines the Msg/AuthorizeOperator request type.
message MsgAuthorizeOperator {
  option deprecated = true;

  option (cosmos.msg.v1.signer) = "holder";
  option (amino.name) = "lbm-sdk/token/MsgAuthorizeOperator";

  // contract id associated with the token class.
  string contract_id = 1;
  // address of the token holder which approves the authorization.
  string holder = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // address of the operator which the authorization is granted to.
  string operator = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgAuthorizeOperatorResponse defines the Msg/AuthorizeOperator response type.
message MsgAuthorizeOperatorResponse {
  option deprecated = true;
}

// MsgIssue defines the Msg/Issue request type.
message MsgIssue {
  option deprecated = true;

  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "lbm-sdk/MsgIssue";

  // name defines the human-readable name of the token class. mandatory (not ERC20 compliant).
  string name = 1;
  // symbol is an abbreviated name for token class. mandatory (not ERC20 compliant).
  string symbol = 2;
  // uri for the image of the token class stored off chain.
  string uri = 3;
  // meta is a brief description of token class.
  string meta = 4;
  // decimals is the number of decimals which one must divide the amount by to get its user representation.
  int32 decimals = 5;
  // mintable represents whether the token is allowed to mint.
  bool mintable = 6;

  // the address which all permissions on the token class will be granted to (not a permanent property).
  string owner = 7 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // the address to send the minted token to. mandatory.
  string to = 8 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // amount of tokens to mint on issuance. mandatory.
  string amount = 9 [(gogoproto.customtype) = "github.com/Finschia/finschia-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgIssueResponse defines the Msg/Issue response type.
message MsgIssueResponse {
  option deprecated = true;

  // id of the new contract.
  string contract_id = 1;
}

// MsgGrantPermission defines the Msg/GrantPermission request type.
message MsgGrantPermission {
  option deprecated = true;

  option (cosmos.msg.v1.signer) = "from";
  option (amino.name) = "lbm-sdk/token/MsgGrantPermission";

  // contract id associated with the token class.
  string contract_id = 1;
  // address of the granter which must have the permission to give.
  string from = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // address of the grantee.
  string to = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // permission on the token class.
  string permission = 4;
}

// MsgGrantPermissionResponse defines the Msg/GrantPermission response type.
message MsgGrantPermissionResponse {
  option deprecated = true;
}

// MsgRevokePermission defines the Msg/RevokePermission request type.
message MsgRevokePermission {
  option deprecated = true;

  option (cosmos.msg.v1.signer) = "from";
  option (amino.name) = "lbm-sdk/token/MsgRevokePermission";

  // contract id associated with the token class.
  string contract_id = 1;
  // address of the grantee which abandons the permission.
  string from = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // permission on the token class.
  string permission = 3;
}

// MsgRevokePermissionResponse defines the Msg/RevokePermission response type.
message MsgRevokePermissionResponse {
  option deprecated = true;
}

// MsgMint defines the Msg/Mint request type.
message MsgMint {
  option deprecated = true;

  option (cosmos.msg.v1.signer) = "from";
  option (amino.name) = "lbm-sdk/MsgMint";

  // contract id associated with the token class.
  string contract_id = 1;
  // address which triggers the mint.
  string from = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // recipient of the tokens.
  string to = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // number of tokens to mint.
  string amount = 4 [(gogoproto.customtype) = "github.com/Finschia/finschia-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgMintResponse defines the Msg/Mint response type.
message MsgMintResponse {
  option deprecated = true;
}

// MsgBurn defines the Msg/Burn request type.
message MsgBurn {
  option deprecated = true;

  option (cosmos.msg.v1.signer) = "from";
  option (amino.name) = "lbm-sdk/MsgBurn";

  // contract id associated with the token class.
  string contract_id = 1;
  // address whose tokens are being burned.
  string from = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // number of tokens to burn.
  string amount = 3 [(gogoproto.customtype) = "github.com/Finschia/finschia-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgBurnResponse defines the Msg/Burn response type.
message MsgBurnResponse {
  option deprecated = true;
}

// MsgOperatorBurn defines the Msg/OperatorBurn request type.
message MsgOperatorBurn {
  option deprecated = true;

  option (cosmos.msg.v1.signer) = "operator";
  option (amino.name) = "lbm-sdk/MsgOperatorBurn";

  // contract id associated with the token class.
  string contract_id = 1;
  // address which triggers the burn.
  string operator = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // address which the tokens will be burnt from.
  string from = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // the amount of the burn.
  string amount = 4 [(gogoproto.customtype) = "github.com/Finschia/finschia-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgOperatorBurnResponse defines the Msg/OperatorBurn response type.
message MsgOperatorBurnResponse {
  option deprecated = true;
}

// MsgModify defines the Msg/Modify request type.
message MsgModify {
  option deprecated = true;

  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name) = "lbm-sdk/token/MsgModify";

  // contract id associated with the contract.
  string contract_id = 1;
  // the address of the grantee which must have modify permission.
  string owner = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // changes to apply.
  // possible attribute keys are: name, uri, img_uri (deprecated), meta
  repeated Attribute changes = 3 [(gogoproto.nullable) = false];
}

// MsgModifyResponse defines the Msg/Modify response type.
message MsgModifyResponse {
  option deprecated = true;
}
