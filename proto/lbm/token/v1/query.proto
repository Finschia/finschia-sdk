syntax = "proto3";
package lbm.token.v1;

import "lbm/base/query/v1/pagination.proto";
import "google/api/annotations.proto";
import "lbm/token/v1/token.proto";

import "gogoproto/gogo.proto";

option go_package = "github.com/line/lbm-sdk/x/token";

// Query defines the gRPC querier service.
service Query {
  // Balance queries the number of tokens of a given contract owned by the address.
  rpc Balance(QueryBalanceRequest) returns (QueryBalanceResponse) {
    option (google.api.http).get = "/lbm/token/v1/token_classes/{contract_id}/balances/{address}";
  }

  // Supply queries the number of tokens from the given contract id.
  rpc Supply(QuerySupplyRequest) returns (QuerySupplyResponse) {
    option (google.api.http).get = "/lbm/token/v1/token_classes/{contract_id}/supply";
  }

  // Minted queries the number of minted tokens from the given contract id.
  rpc Minted(QueryMintedRequest) returns (QueryMintedResponse) {
    option (google.api.http).get = "/lbm/token/v1/token_classes/{contract_id}/minted";
  }

  // Burned queries the number of burned tokens from the given contract id.
  rpc Burned(QueryBurnedRequest) returns (QueryBurnedResponse) {
    option (google.api.http).get = "/lbm/token/v1/token_classes/{contract_id}/burned";
  }

  // TokenClass queries an token metadata based on its contract id.
  rpc TokenClass(QueryTokenClassRequest) returns (QueryTokenClassResponse) {
    option (google.api.http).get = "/lbm/token/v1/token_classes/{contract_id}";
  }

  // TokenClasses queries all token metadata.
  rpc TokenClasses(QueryTokenClassesRequest) returns (QueryTokenClassesResponse) {
    option (google.api.http).get = "/lbm/token/v1/token_classes";
  }

  // Grant queries a permission on a given grantee.
  rpc Grant(QueryGrantRequest) returns (QueryGrantResponse) {
    option (google.api.http).get = "/lbm/token/v1/token_classes/{contract_id}/grants/{grantee}/{permission}";
  }

  // GranteeGrants queries permissions on a given grantee.
  rpc GranteeGrants(QueryGrantRequest) returns (QueryGrantResponse) {
    option (google.api.http).get = "/lbm/token/v1/token_classes/{contract_id}/grants/{grantee}";
  }

  // Authorization queries authorization on a given proxy approver pair.
  rpc Authorization(QueryAuthorizationRequest) returns (QueryAuthorizationResponse) {
    option (google.api.http).get = "/lbm/token/v1/token_classes/{contract_id}/authorizations/{proxy}/{approver}";
  }

  // ProxyAuthorizations queries authorization on a given proxy approver pair.
  rpc ProxyAuthorizations(QueryProxyAuthorizationsRequest) returns (QueryProxyAuthorizationsResponse) {
    option (google.api.http).get = "/lbm/token/v1/token_classes/{contract_id}/authorizations/{proxy}";
  }
}

// QueryBalanceRequest is the request type for the Query/Balance RPC method
message QueryBalanceRequest {
  // contract id associated with the token class.
  string contract_id = 1;
  // address is the address to query balance for.
  string address = 2;
}

// QueryBalanceResponse is the response type for the Query/Balance RPC method
message QueryBalanceResponse {
  string amount = 1 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// QuerySupplyRequest is the request type for the Query/Supply RPC method
message QuerySupplyRequest {
  // contract id associated with the token class.
  string contract_id = 1;
}

// QuerySupplyResponse is the response type for the Query/Supply RPC method
message QuerySupplyResponse {
  string amount = 1 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// QueryMintedRequest is the request type for the Query/Minted RPC method
message QueryMintedRequest {
  // contract id associated with the token class.
  string contract_id = 1;
}

// QueryMintedResponse is the response type for the Query/Minted RPC method
message QueryMintedResponse {
  string amount = 1 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// QueryBurnedRequest is the request type for the Query/Burned RPC method
message QueryBurnedRequest {
  // contract id associated with the token class.
  string contract_id = 1;
}

// QueryBurnedResponse is the response type for the Query/Burned RPC method
message QueryBurnedResponse {
  string amount = 1 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// QueryTokenClassRequest is the request type for the Query/TokenClass RPC method
message QueryTokenClassRequest {
  string contract_id = 1;
}

// QueryTokenClassResponse is the response type for the Query/TokenClass RPC method
message QueryTokenClassResponse {
  TokenClass class = 1;
}

// QueryTokenClassesRequest is the request type for the Query/TokenClasses RPC method
message QueryTokenClassesRequest {
  // pagination defines an optional pagination for the request.
  lbm.base.query.v1.PageRequest pagination = 1;
}

// QueryTokenClassesResponse is the response type for the Query/TokenClasses RPC method
message QueryTokenClassesResponse {
  repeated TokenClass classes    = 1 [(gogoproto.nullable) = false];
  lbm.base.query.v1.PageResponse     pagination = 2;
}

// QueryGrantRequest is the request type for the Query/Grant RPC method
message QueryGrantRequest {
  // contract id associated with the token class.
  string contract_id = 1;
  // grantee which has permissions on the token class.
  string grantee = 2;
  // a permission given to the grantee.
  string permission = 3;
}

// QueryGrantResponse is the response type for the Query/Grant RPC method
message QueryGrantResponse {
  Grant grant = 1;
}

// QueryGrantsRequest is the request type for the Query/Grants RPC method
message QueryGrantsRequest {
  // contract id associated with the token class.
  string contract_id = 1;
  // grantee which has permissions on the token class.
  string grantee = 2;

  // pagination defines an optional pagination for the request.
  lbm.base.query.v1.PageRequest pagination = 3;
}

// QueryGrantsResponse is the response type for the Query/Grants RPC method
message QueryGrantsResponse {
  repeated Grant grants = 1 [(gogoproto.nullable) = false];
  lbm.base.query.v1.PageResponse pagination     = 2;
}

// QueryAuthorizationRequest is the request type for the Query/Authorization RPC method
message QueryAuthorizationRequest {
  // contract id associated with the token class.
  string contract_id = 1;
  // proxy is the address of the operator which the authorization is granted to.
  string proxy = 2;
  // approver is the address of the approver of the authorization.
  string approver = 3;
}

// QueryAuthorizationResponse is the response type for the Query/Authorization RPC method
message QueryAuthorizationResponse {
  Authorization         authorization = 1;
}

// QueryProxyAuthorizationsRequest is the request type for the Query/ProxyAuthorizations RPC method
message QueryProxyAuthorizationsRequest {
  // contract id associated with the token class.
  string contract_id = 1;
  // proxy is the address of the operator which the authorization is granted to.
  string proxy = 2;

  // pagination defines an optional pagination for the request.
  lbm.base.query.v1.PageRequest pagination = 3;
}

// QueryProxyAuthorizationsResponse is the response type for the Query/ProxyAuthorizations RPC method
message QueryProxyAuthorizationsResponse {
  repeated Authorization         authorizations = 1 [(gogoproto.nullable) = false];
  lbm.base.query.v1.PageResponse pagination     = 2;
}
