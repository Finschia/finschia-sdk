syntax = "proto3";
package lbm.fbridge.v1;

option go_package = "github.com/Finschia/finschia-sdk/x/fbridge/types";

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "lbm/fbridge/v1/fbridge.proto";

service Query {
  // Params queries the parameters of x/fbridge module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/lbm/fbridge/v1/params";
  }

  // NextSeqSend to be used when the next bridge request is made
  rpc NextSeqSend(NextSeqSendRequest) returns (NextSeqSendResponse) {
    option (google.api.http).get = "/lbm/fbridge/v1/nextseq_send";
  }

  // Get a greatest sequence number confirmed by a particular operator
  rpc GreatestSeqByOperator(GreatestSeqByOperatorRequest) returns (GreatestSeqByOperatorResponse) {
    option (google.api.http).get = "/lbm/fbridge/v1/operators/{operator}/seq";
  }

  // Get a greatest consecutive sequence number confirmed by n-of-m operators
  rpc GreatestConsecutiveConfirmedSeq(GreatestConsecutiveConfirmedSeqRequest)
      returns (GreatestConsecutiveConfirmedSeqResponse) {
    option (google.api.http).get = "/lbm/fbridge/v1/greatest_confirmed_seq";
  }

  // Get a provision submitted by a particular operator
  rpc SubmittedProvision(SubmittedProvisionRequest) returns (SubmittedProvisionResponse) {
    option (google.api.http).get = "/lbm/fbridge/v1/operators/{operator}/provision/{seq}";
  }

  // Get a particular sequence of confirmed provisions
  rpc ConfirmedProvision(ConfirmedProvisionRequest) returns (ConfirmedProvisionResponse) {
    option (google.api.http).get = "/lbm/fbridge/v1/provision/{seq}";
  }

  // Get a list of sequence numbers that need to be submitted by a particular operator
  // The search scope is [greatest_consecutive_seq_by_operator, min(greatest_consecutive_seq_by_operator + range,
  // greatest_seq_by_operator)] greatest_consecutive_seq_by_operator can be replaced with greatest_consecutive_seq if
  // the operator is newly added
  rpc NeededSubmissionSeqs(NeededSubmissionSeqsRequest) returns (NeededSubmissionSeqsResponse) {
    option (google.api.http).get = "/lbm/fbridge/v1/operators/{operator}/needed_submission_seqs";
  }

  // Get commitments of a specific sequence number
  rpc Commitments(CommitmentsRequest) returns (CommitmentsResponse) {
    option (google.api.http).get = "/lbm/fbridge/v1/commitments/{seq}";
  }

  // Get a list of Guardians registered on the bridge
  rpc Guardians(GuardiansRequest) returns (GuardiansResponse) {
    option (google.api.http).get = "/lbm/fbridge/v1/guardians";
  }

  // Get a list of Operators registered on the bridge
  rpc Operators(OperatorsRequest) returns (OperatorsResponse) {
    option (google.api.http).get = "/lbm/fbridge/v1/operators";
  }

  // Get a list of Judges registered on the bridge
  rpc Judges(JudgesRequest) returns (JudgesResponse) {
    option (google.api.http).get = "/lbm/fbridge/v1/judges";
  }
}

message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message NextSeqSendRequest {}

message NextSeqSendResponse {
  uint64 seq = 1;
}

message GreatestSeqByOperatorRequest {
  // the address of the operator
  string operator = 1;
}

message GreatestSeqByOperatorResponse {
  uint64 seq = 1;
}

message GreatestConsecutiveConfirmedSeqRequest {}

message GreatestConsecutiveConfirmedSeqResponse {
  uint64 seq = 1;
}

message SubmittedProvisionRequest {
  // the address of the operator
  string operator = 1;
  // the sequence number of the bridge request
  uint64 seq = 2;
}

message SubmittedProvisionResponse {
  ProvisionData   data   = 1 [(gogoproto.nullable) = false];
  ProvisionStatus status = 2 [(gogoproto.nullable) = false];
}

message NeededSubmissionSeqsRequest {
  // the address of the operator
  string operator = 1;
  // range specifies the size of the range to search
  uint64 range = 2;
}

message NeededSubmissionSeqsResponse {
  repeated uint64 seqs = 1;
}

message ConfirmedProvisionRequest {
  // the sequence number of the bridge request
  uint64 seq = 1;
}

message ConfirmedProvisionResponse {
  ProvisionData   data   = 1 [(gogoproto.nullable) = false];
  ProvisionStatus status = 2 [(gogoproto.nullable) = false];
}

message CommitmentsRequest {
  // the sequence number of the bridge request
  uint64 seq = 1;
}

message CommitmentsResponse {
  repeated string commitments = 1;
}

message GuardiansRequest {}

message GuardiansResponse {
  repeated string guardians = 1;
}

message OperatorsRequest {}

message OperatorsResponse {
  repeated string operators = 1;
}

message JudgesRequest {}

message JudgesResponse {
  repeated string judges = 1;
}
