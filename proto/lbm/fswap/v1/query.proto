syntax = "proto3";
package lbm.fswap.v1;

option go_package = "github.com/Finschia/finschia-sdk/x/fswap/types";

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "lbm/fswap/v1/fswap.proto";

service Query {
  // Swapped queries the current swapped status that includes a burnt amount of from-coin and a minted amount of
  // to-coin.
  rpc Swapped(QuerySwappedRequest) returns (QuerySwappedResponse) {
    option (google.api.http).get = "/lbm/fswap/v1/swapped";
  }
  // TotalSwappableToCoinAmount queries the current swappable amount for to-coin.
  rpc TotalSwappableToCoinAmount(QueryTotalSwappableToCoinAmountRequest)
      returns (QueryTotalSwappableToCoinAmountResponse) {
    option (google.api.http).get = "/lbm/fswap/v1/total_swappable_to_coin_amount";
  }
}

message QuerySwappedRequest {}
message QuerySwappedResponse {
  cosmos.base.v1beta1.Coin from_coin_amount = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/Finschia/finschia-sdk/types.Coin"];
  cosmos.base.v1beta1.Coin to_coin_amount = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/Finschia/finschia-sdk/types.Coin"];
}

message QueryTotalSwappableToCoinAmountRequest {}
message QueryTotalSwappableToCoinAmountResponse {
  cosmos.base.v1beta1.Coin swappable_amount = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/Finschia/finschia-sdk/types.Coin"];
}
