syntax = "proto3";
package lbm.foundation.v1;

option go_package = "github.com/line/lbm-sdk/x/foundation";

import "gogoproto/gogo.proto";

import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";

import "lbm/base/v1/coin.proto";
import "lbm/foundation/v1/foundation.proto";

// EventUpdateFoundationParams is emitted after updating foundation parameters.
message EventUpdateFoundationParams {
  Params params = 1;
}

// EventUpdateValidatorAuths is emitted after updating validator auth info.
message EventUpdateValidatorAuths {
  repeated ValidatorAuth auths = 1 [(gogoproto.nullable) = false];
}

// EventFundTreasury is an event emitted when one funds the treasury.
message EventFundTreasury {
  string   from                    = 1;
  repeated lbm.base.v1.Coin amount = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/line/lbm-sdk/types.Coins"];
}

// EventWithdrawFromTreasury is an event emitted when the operator withdraws coins from the treasury.
message EventWithdrawFromTreasury {
  string   to                      = 1;
  repeated lbm.base.v1.Coin amount = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/line/lbm-sdk/types.Coins"];
}

// EventUpdateMembers is an event emitted when the members have been updated.
message EventUpdateMembers {
  repeated Member member_updates = 1 [(gogoproto.nullable) = false];
}

// EventUpdateDecisionPolicy is an event emitted when the decision policy have been updated.
message EventUpdateDecisionPolicy {
  option (gogoproto.goproto_getters)  = false;
  google.protobuf.Any decision_policy = 1 [(cosmos_proto.accepts_interface) = "DecisionPolicy"];
}

// EventSubmitProposal is an event emitted when a proposal is created.
message EventSubmitProposal {
  // proposal is the unique ID of the proposal.
  Proposal proposal = 1 [(gogoproto.nullable) = false];
}

// EventWithdrawProposal is an event emitted when a proposal is withdrawn.
message EventWithdrawProposal {
  // proposal_id is the unique ID of the proposal.
  uint64 proposal_id = 1;
}

// EventVote is an event emitted when a voter votes on a proposal.
message EventVote {
  Vote vote = 1 [(gogoproto.nullable) = false];
}

// EventExec is an event emitted when a proposal is executed.
message EventExec {
  // proposal_id is the unique ID of the proposal.
  uint64 proposal_id = 1;

  // result is the proposal execution result.
  ProposalExecutorResult result = 2;
}

// EventLeaveFoundation is an event emitted when a foundation member leaves the foundation.
message EventLeaveFoundation {
  // address is the account address of the foundation member.
  string address = 1;
}
