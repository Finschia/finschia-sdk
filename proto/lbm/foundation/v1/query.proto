syntax = "proto3";
package lbm.foundation.v1;

option go_package = "github.com/Finschia/finschia-sdk/x/foundation";

import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "lbm/foundation/v1/foundation.proto";
import "cosmos/base/v1beta1/coin.proto";

import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";

import "gogoproto/gogo.proto";

// Query defines the gRPC querier service for foundation module.
service Query {
  // Params queries the module params.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/params";
  }

  // Treasury queries the foundation treasury.
  rpc Treasury(QueryTreasuryRequest) returns (QueryTreasuryResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/treasury";
  }

  // FoundationInfo queries foundation info.
  rpc FoundationInfo(QueryFoundationInfoRequest) returns (QueryFoundationInfoResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/foundation_info";
  };

  // Member queries a member of the foundation
  rpc Member(QueryMemberRequest) returns (QueryMemberResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/foundation_members/{address}";
  };

  // Members queries members of the foundation
  rpc Members(QueryMembersRequest) returns (QueryMembersResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/foundation_members";
  };

  // Proposal queries a proposal based on proposal id.
  rpc Proposal(QueryProposalRequest) returns (QueryProposalResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/proposals/{proposal_id}";
  };

  // Proposals queries all proposals.
  rpc Proposals(QueryProposalsRequest) returns (QueryProposalsResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/proposals";
  };

  // Vote queries a vote by proposal id and voter.
  rpc Vote(QueryVoteRequest) returns (QueryVoteResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/proposals/{proposal_id}/votes/{voter}";
  };

  // Votes queries a vote by proposal.
  rpc Votes(QueryVotesRequest) returns (QueryVotesResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/proposals/{proposal_id}/votes";
  };

  // TallyResult queries the tally of a proposal votes.
  rpc TallyResult(QueryTallyResultRequest) returns (QueryTallyResultResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/proposals/{proposal_id}/tally";
  };

  // Censorships queries the censorship informations.
  rpc Censorships(QueryCensorshipsRequest) returns (QueryCensorshipsResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/censorships";
  }

  // Returns list of authorizations, granted to the grantee.
  rpc Grants(QueryGrantsRequest) returns (QueryGrantsResponse) {
    option (google.api.http).get = "/lbm/foundation/v1/grants/{grantee}/{msg_type_url}";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryTreasuryRequest is the request type for the
// Query/Treasury RPC method.
message QueryTreasuryRequest {}

// QueryTreasuryResponse is the response type for the
// Query/Treasury RPC method.
message QueryTreasuryResponse {
  repeated cosmos.base.v1beta1.DecCoin amount = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/Finschia/finschia-sdk/types.DecCoins"];
}

// QueryFoundationInfoRequest is the Query/FoundationInfo request type.
message QueryFoundationInfoRequest {}

// QueryFoundationInfoResponse is the Query/FoundationInfo response type.
message QueryFoundationInfoResponse {
  // info is the FoundationInfo for the foundation.
  FoundationInfo info = 1 [(gogoproto.nullable) = false];
}

// QueryMemberRequest is the Query/Member request type.
message QueryMemberRequest {
  string address = 1;
}

// QueryMemberResponse is the Query/MemberResponse response type.
message QueryMemberResponse {
  // member is the members of the foundation.
  Member member = 1;
}

// QueryMembersRequest is the Query/Members request type.
message QueryMembersRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryMembersResponse is the Query/MembersResponse response type.
message QueryMembersResponse {
  // members are the members of the foundation.
  repeated Member members = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryProposalRequest is the Query/Proposal request type.
message QueryProposalRequest {
  // proposal_id is the unique ID of a proposal.
  uint64 proposal_id = 1;
}

// QueryProposalResponse is the Query/Proposal response type.
message QueryProposalResponse {
  // proposal is the proposal info.
  Proposal proposal = 1;
}

// QueryProposals is the Query/Proposals request type.
message QueryProposalsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryProposalsResponse is the Query/Proposals response type.
message QueryProposalsResponse {
  // proposals are the proposals of the foundation.
  repeated Proposal proposals = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryVote is the Query/Vote request type.
message QueryVoteRequest {
  // proposal_id is the unique ID of a proposal.
  uint64 proposal_id = 1;

  // voter is a proposal voter account address.
  string voter = 2;
}

// QueryVoteResponse is the Query/Vote response type.
message QueryVoteResponse {
  // vote is the vote with given proposal_id and voter.
  Vote vote = 1;
}

// QueryVotes is the Query/Votes request type.
message QueryVotesRequest {
  // proposal_id is the unique ID of a proposal.
  uint64 proposal_id = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryVotesResponse is the Query/Votes response type.
message QueryVotesResponse {
  // votes are the list of votes for given proposal_id.
  repeated Vote votes = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryTallyResultRequest is the Query/TallyResult request type.
message QueryTallyResultRequest {
  // proposal_id is the unique id of a proposal.
  uint64 proposal_id = 1;
}

// QueryTallyResultResponse is the Query/TallyResult response type.
message QueryTallyResultResponse {
  // tally defines the requested tally.
  TallyResult tally = 1 [(gogoproto.nullable) = false];
}

// QueryCensorshipsRequest is the request type for the Query/Censorships RPC method.
message QueryCensorshipsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryCensorshipsResponse is the response type for the Query/Censorships RPC method.
message QueryCensorshipsResponse {
  // authorizations is a list of grants granted for grantee.
  repeated Censorship censorships = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryGrantsRequest is the request type for the Query/Grants RPC method.
message QueryGrantsRequest {
  string grantee = 1;
  // Optional, msg_type_url, when set, will query only grants matching given msg type.
  string msg_type_url = 2;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryGrantsResponse is the response type for the Query/Grants RPC method.
message QueryGrantsResponse {
  // authorizations is a list of grants granted for grantee.
  repeated google.protobuf.Any authorizations = 1
      [(cosmos_proto.accepts_interface) = "github.com/Finschia/finschia-sdk/x/foundation.Authorization"];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
