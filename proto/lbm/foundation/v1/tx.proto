syntax = "proto3";
package lbm.foundation.v1;

import "gogoproto/gogo.proto";
import "lbm/foundation/v1/foundation.proto";
import "cosmos/base/v1beta1/coin.proto";

import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/Finschia/finschia-sdk/x/foundation";

option (gogoproto.equal_all)           = false;
option (gogoproto.goproto_getters_all) = false;

// Msg defines the foundation Msg service.
service Msg {
  // FundTreasury defines a method to fund the treasury.
  rpc FundTreasury(MsgFundTreasury) returns (MsgFundTreasuryResponse);

  // WithdrawFromTreasury defines a method to withdraw coins from the treasury.
  rpc WithdrawFromTreasury(MsgWithdrawFromTreasury) returns (MsgWithdrawFromTreasuryResponse);

  // UpdateMembers updates the foundation members.
  rpc UpdateMembers(MsgUpdateMembers) returns (MsgUpdateMembersResponse);

  // UpdateDecisionPolicy allows a group policy's decision policy to be updated.
  rpc UpdateDecisionPolicy(MsgUpdateDecisionPolicy) returns (MsgUpdateDecisionPolicyResponse);

  // SubmitProposal submits a new proposal.
  rpc SubmitProposal(MsgSubmitProposal) returns (MsgSubmitProposalResponse);

  // WithdrawProposal aborts a proposal.
  rpc WithdrawProposal(MsgWithdrawProposal) returns (MsgWithdrawProposalResponse);

  // Vote allows a voter to vote on a proposal.
  rpc Vote(MsgVote) returns (MsgVoteResponse);

  // Exec executes a proposal.
  rpc Exec(MsgExec) returns (MsgExecResponse);

  // LeaveFoundation allows a member to leave the foundation.
  rpc LeaveFoundation(MsgLeaveFoundation) returns (MsgLeaveFoundationResponse);

  // UpdateCensorship updates censorship information.
  rpc UpdateCensorship(MsgUpdateCensorship) returns (MsgUpdateCensorshipResponse);

  // Grant grants the provided authorization to the grantee with authority of
  // the foundation. If there is already a grant for the given
  // (grantee, Authorization) tuple, then the grant will be overwritten.
  rpc Grant(MsgGrant) returns (MsgGrantResponse);

  // Revoke revokes any authorization corresponding to the provided method name
  // that has been granted to the grantee.
  rpc Revoke(MsgRevoke) returns (MsgRevokeResponse);
}

// MsgFundTreasury is the Msg/FundTreasury request type.
message MsgFundTreasury {
  string   from                            = 1;
  repeated cosmos.base.v1beta1.Coin amount = 2
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/Finschia/finschia-sdk/types.Coins"];
}

// MsgFundTreasuryResponse is the Msg/FundTreasury response type.
message MsgFundTreasuryResponse {}

// MsgWithdrawFromTreasury is the Msg/WithdrawFromTreasury request type.
message MsgWithdrawFromTreasury {
  // authority is the address of the privileged account.
  string   authority                       = 1;
  string   to                              = 2;
  repeated cosmos.base.v1beta1.Coin amount = 3
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/Finschia/finschia-sdk/types.Coins"];
}

// MsgWithdrawFromTreasuryResponse is the Msg/WithdrawFromTreasury response type.
message MsgWithdrawFromTreasuryResponse {}

// MsgUpdateMembers is the Msg/UpdateMembers request type.
message MsgUpdateMembers {
  // authority is the address of the privileged account.
  string authority = 1;

  // member_updates is the list of members to update,
  // set remove to true to remove a member.
  repeated MemberRequest member_updates = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateMembersResponse is the Msg/UpdateMembers response type.
message MsgUpdateMembersResponse {}

// MsgUpdateDecisionPolicy is the Msg/UpdateDecisionPolicy request type.
message MsgUpdateDecisionPolicy {
  // authority is the address of the privileged account.
  string authority = 1;

  // decision_policy is the updated decision policy.
  google.protobuf.Any decision_policy = 2 [(cosmos_proto.accepts_interface) = "DecisionPolicy"];
}

// MsgUpdateDecisionPolicyResponse is the Msg/UpdateDecisionPolicy response type.
message MsgUpdateDecisionPolicyResponse {}

// Exec defines modes of execution of a proposal on creation or on new vote.
enum Exec {
  // An empty value means that there should be a separate
  // MsgExec request for the proposal to execute.
  EXEC_UNSPECIFIED = 0;

  // Try to execute the proposal immediately.
  // If the proposal is not allowed per the DecisionPolicy,
  // the proposal will still be open and could
  // be executed at a later point.
  EXEC_TRY = 1;
}

// MsgSubmitProposal is the Msg/SubmitProposal request type.
message MsgSubmitProposal {
  // proposers are the account addresses of the proposers.
  // Proposers signatures will be counted as yes votes.
  repeated string proposers = 1;

  // metadata is any arbitrary metadata to attached to the proposal.
  string metadata = 2;

  // messages is a list of `sdk.Msg`s that will be executed if the proposal passes.
  repeated google.protobuf.Any messages = 3;

  // exec defines the mode of execution of the proposal,
  // whether it should be executed immediately on creation or not.
  // If so, proposers signatures are considered as Yes votes.
  Exec exec = 4;
}

// MsgSubmitProposalResponse is the Msg/SubmitProposal response type.
message MsgSubmitProposalResponse {
  // proposal is the unique ID of the proposal.
  uint64 proposal_id = 1;
}

// MsgWithdrawProposal is the Msg/WithdrawProposal request type.
message MsgWithdrawProposal {
  // proposal is the unique ID of the proposal.
  uint64 proposal_id = 1;

  // address of one of the proposer of the proposal.
  string address = 2;
}

// MsgWithdrawProposalResponse is the Msg/WithdrawProposal response type.
message MsgWithdrawProposalResponse {}

// MsgVote is the Msg/Vote request type.
message MsgVote {
  // proposal is the unique ID of the proposal.
  uint64 proposal_id = 1;

  // voter is the voter account address.
  string voter = 2;

  // option is the voter's choice on the proposal.
  VoteOption option = 3;

  // metadata is any arbitrary metadata to attached to the vote.
  string metadata = 4;

  // exec defines whether the proposal should be executed
  // immediately after voting or not.
  Exec exec = 5;
}

// MsgVoteResponse is the Msg/Vote response type.
message MsgVoteResponse {}

// MsgExec is the Msg/Exec request type.
message MsgExec {
  // proposal is the unique ID of the proposal.
  uint64 proposal_id = 1;

  // signer is the account address used to execute the proposal.
  string signer = 2;
}

// MsgExecResponse is the Msg/Exec request type.
message MsgExecResponse {}

// MsgLeaveFoundation is the Msg/LeaveFoundation request type.
message MsgLeaveFoundation {
  // address is the account address of the foundation member.
  string address = 1;
}

// MsgLeaveFoundationResponse is the Msg/LeaveFoundation response type.
message MsgLeaveFoundationResponse {}

// MsgUpdateCensorship is the Msg/UpdateCensorship request type.
message MsgUpdateCensorship {
  // authority over the target censorship.
  string authority = 1;

  // new censorship information
  Censorship censorship = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateCensorshipResponse is the Msg/UpdateCensorship response type.
message MsgUpdateCensorshipResponse {}

// MsgGrant is the Msg/Grant request type.
// on behalf of the foundation.
message MsgGrant {
  // authority is the address of the privileged account.
  string authority = 1;
  string grantee   = 2;

  google.protobuf.Any authorization = 3
      [(cosmos_proto.accepts_interface) = "github.com/Finschia/finschia-sdk/x/foundation.Authorization"];
}

// MsgGrantResponse is the Msg/MsgGrant response type.
message MsgGrantResponse {}

// MsgRevoke is the Msg/Revoke request type.
message MsgRevoke {
  // authority is the address of the privileged account.
  string authority    = 1;
  string grantee      = 2;
  string msg_type_url = 3;
}

// MsgRevokeResponse is the Msg/MsgRevokeResponse response type.
message MsgRevokeResponse {}
