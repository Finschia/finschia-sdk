syntax = "proto3";
package lbm.collection.v1;

import "gogoproto/gogo.proto";

import "lbm/collection/v1/collection.proto";

option go_package = "github.com/line/lbm-sdk/x/collection";

option (gogoproto.equal_all) = false;

// Msg defines the collection Msg service.
service Msg {
  // Send defines a method to send tokens from one account to another account.
  // Fires:
  // - EventSent
  // - transfer_ft (deprecated, not typed)
  // - transfer_nft (deprecated, not typed)
  // - operation_transfer_nft (deprecated, not typed)
  // Throws:
  // - ErrInsufficientFunds:
  //   - the balance of `from` does not have enough tokens to spend.
  // Info: one can send both fungible tokens and non-fungible tokens.
  // Since: 0.46.0 (finschia)
  rpc Send(MsgSend) returns (MsgSendResponse);

  // OperatorSend defines a method to send tokens from one account to another account by the operator.
  // Fires:
  // - EventSent
  // - transfer_ft_from (deprecated, not typed)
  // - transfer_nft_from (deprecated, not typed)
  // - operation_transfer_nft (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized:
  //   - the holder has not authorized the operator.
  // - ErrInsufficientFunds:
  //   - the balance of `from` does not have enough tokens to spend.
  // Info: one can send both fungible tokens and non-fungible tokens.
  // Since: 0.46.0 (finschia)
  rpc OperatorSend(MsgOperatorSend) returns (MsgOperatorSendResponse);

  // Deprecated: use Send
  // TransferFT defines a method to send fungible tokens from one account to another account.
  rpc TransferFT(MsgTransferFT) returns (MsgTransferFTResponse);

  // Deprecated: use OperatorSend
  // TransferFTFrom defines a method to send fungible tokens from one account to another account by the operator.
  rpc TransferFTFrom(MsgTransferFTFrom) returns (MsgTransferFTFromResponse);

  // Deprecated: use Send
  // TransferNFT defines a method to send non-fungible tokens from one account to another account.
  rpc TransferNFT(MsgTransferNFT) returns (MsgTransferNFTResponse);

  // Deprecated: use OperatorSend
  // TransferNFTFrom defines a method to send non-fungible tokens from one account to another account by the operator.
  rpc TransferNFTFrom(MsgTransferNFTFrom) returns (MsgTransferNFTFromResponse);

  // AuthorizeOperator allows one to send tokens on behalf of the approver.
  // Fires:
  // - EventAuthorizedOperator
  // - approve_collection (deprecated, not typed)
  // Throws:
  // - ErrNotFound:
  //   - there is no contract of `contract_id`.
  // - ErrInvalidRequest:
  //   - `holder` has already authorized `operator`.
  // Since: 0.46.0 (finschia)
  rpc AuthorizeOperator(MsgAuthorizeOperator) returns (MsgAuthorizeOperatorResponse);

  // RevokeOperator revokes the authorization of the operator to send the approver's token.
  // Fires:
  // - EventRevokedOperator
  // - disapprove_collection (deprecated, not typed)
  // Throws:
  // - ErrNotFound:
  //   - there is no contract of `contract_id`.
  //   - there is no authorization by `holder` to `operator`.
  // Since: 0.46.0 (finschia)
  rpc RevokeOperator(MsgRevokeOperator) returns (MsgRevokeOperatorResponse);

  // Deprecated: use AuthorizeOperator
  // Approve allows one to send tokens on behalf of the approver.
  rpc Approve(MsgApprove) returns (MsgApproveResponse);

  // Deprecated: use RevokeOperator
  // Disapprove revokes the authorization of the operator to send the approver's token.
  rpc Disapprove(MsgDisapprove) returns (MsgDisapproveResponse);

  // CreateContract defines a method to create a contract for collection.
  // it grants `mint`, `burn`, `modify` and `issue` permissions on the contract to its creator.
  // Fires:
  // - EventCreatedContract
  // - create_collection (deprecated, not typed)
  rpc CreateContract(MsgCreateContract) returns (MsgCreateContractResponse);

  // CreateFTClass defines a method to create a class of fungible token.
  // one may set the supply on the creation, then no one can change the supply, which means no more mints and burns.
  // Fires:
  // - EventCreatedFTClass
  // - EventMintedFT
  // - issue_ft (deprecated, not typed)
  // Since: 0.46.0 (finschia)
  rpc CreateFTClass(MsgCreateFTClass) returns (MsgCreateFTClassResponse);

  // CreateNFTClass defines a method to create a class of non-fungible token.
  // Fires:
  // - EventCreatedNFTClass
  // - issue_nft (deprecated, not typed)
  // Since: 0.46.0 (finschia)
  rpc CreateNFTClass(MsgCreateNFTClass) returns (MsgCreateNFTClassResponse);

  // Deprecated: use CreateFTClass
  // IssueFT defines a method to create a class of fungible token.
  // Fires:
  // - EventIssueFT
  // - EventMintedFT
  // - issue_ft (deprecated, not typed)
  // Note: it does not grant any permissions to its issuer.
  rpc IssueFT(MsgIssueFT) returns (MsgIssueFTResponse);

  // Deprecated: use CreateNFTClass
  // IssueNFT defines a method to create a class of non-fungible token.
  // Fires:
  // - EventIssueNFT
  // - issue_nft (deprecated, not typed)
  // Note: it DOES grant `mint` and `burn` permissions to its issuer.
  rpc IssueNFT(MsgIssueNFT) returns (MsgIssueNFTResponse);

  // MintFT defines a method to mint fungible tokens.
  // Fires:
  // - EventMintedFT
  // - mint_ft (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized
  //   - `from` does not have `mint` permission.
  rpc MintFT(MsgMintFT) returns (MsgMintFTResponse);

  // MintNFT defines a method to mint non-fungible tokens.
  // Fires:
  // - EventMintedNFT
  // - mint_nft (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized
  //   - `from` does not have `mint` permission.
  rpc MintNFT(MsgMintNFT) returns (MsgMintNFTResponse);

  // Burn defines a method to burn tokens.
  // Fires:
  // - EventBurned
  // - burn_ft (deprecated, not typed)
  // - burn_nft (deprecated, not typed)
  // - operation_burn_nft (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized
  //   - `from` does not have `burn` permission.
  // - ErrInsufficientFunds:
  //   - the balance of `from` does not have enough tokens to burn.
  // Info: one can burn both fungible tokens and non-fungible tokens.
  // Since: 0.46.0 (finschia)
  rpc Burn(MsgBurn) returns (MsgBurnResponse);

  // OperatorBurn defines a method to burn tokens of the holder by the operator.
  // Fires:
  // - EventBurned
  // - burn_ft_from (deprecated, not typed)
  // - burn_nft_from (deprecated, not typed)
  // - operation_burn_nft (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized
  //   - `operator` does not have `burn` permission.
  //   - the holder has not authorized `operator`.
  // - ErrInsufficientFunds:
  //   - the balance of `from` does not have enough tokens to burn.
  // Info: one can burn both fungible tokens and non-fungible tokens.
  // Since: 0.46.0 (finschia)
  rpc OperatorBurn(MsgOperatorBurn) returns (MsgOperatorBurnResponse);

  // Deprecated: use Burn
  // BurnFT defines a method to burn fungible tokens.
  rpc BurnFT(MsgBurnFT) returns (MsgBurnFTResponse);

  // Deprecated: use OperatorBurn
  // BurnFTFrom defines a method to burn fungible tokens of the holder by the proxy.
  rpc BurnFTFrom(MsgBurnFTFrom) returns (MsgBurnFTFromResponse);

  // Deprecated: use Burn
  // BurnNFT defines a method to burn non-fungible tokens.
  rpc BurnNFT(MsgBurnNFT) returns (MsgBurnNFTResponse);

  // Deprecated: use OperatorBurn
  // BurnNFTFrom defines a method to burn non-fungible tokens of the holder by the proxy.
  rpc BurnNFTFrom(MsgBurnNFTFrom) returns (MsgBurnNFTFromResponse);

  // ModifyContract defines a method to modify the attributes of a contract.
  // Fires:
  // - EventModifiedContract
  // - modify_collection (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized
  //   - the operator does not have `modify` permission.
  // - ErrNotFound
  //   - there is no token class of `contract_id`.
  // Since: 0.46.0 (finschia)
  rpc ModifyContract(MsgModifyContract) returns (MsgModifyContractResponse);

  // ModifyTokenClass defines a method to modify the attributes of a token class.
  // Fires:
  // - EventModifiedTokenClass
  // - modify_token_type (deprecated, not typed)
  // - modify_token (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized
  //   - the operator does not have `modify` permission.
  // - ErrNotFound
  //   - there is no token class of `contract_id`.
  // Since: 0.46.0 (finschia)
  rpc ModifyTokenClass(MsgModifyTokenClass) returns (MsgModifyTokenClassResponse);

  // ModifyNFT defines a method to modify the attributes of a non-fungible token.
  // Fires:
  // - EventModifiedNFT
  // - modify_token (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized
  //   - the operator does not have `modify` permission.
  // - ErrNotFound
  //   - there is no token class of `contract_id`.
  // Since: 0.46.0 (finschia)
  rpc ModifyNFT(MsgModifyNFT) returns (MsgModifyNFTResponse);

  // Deprecated: use ModifyContract, ModifyTokenClass or ModifyNFT
  // Modify defines a method to modify metadata.
  rpc Modify(MsgModify) returns (MsgModifyResponse);

  // Grant allows one to mint or burn tokens or modify metadata.
  // Fires:
  // - EventGrant
  // - grant_perm (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized
  //   - `granter` does not have `permission`.
  // - ErrInvalidRequest
  //   - `grantee` already has `permission`.
  // Since: 0.46.0 (finschia)
  rpc Grant(MsgGrant) returns (MsgGrantResponse);

  // Abandon abandons a permission.
  // Fires:
  // - EventAbandon
  // - revoke_perm (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized
  //   - `grantee` does not have `permission`.
  // Since: 0.46.0 (finschia)
  rpc Abandon(MsgAbandon) returns (MsgAbandonResponse);

  // Deprecated: use Grant
  // GrantPermission allows one to mint or burn tokens or modify metadata.
  rpc GrantPermission(MsgGrantPermission) returns (MsgGrantPermissionResponse);

  // Deprecated: use Abandon
  // RevokePermission abandons a permission.
  rpc RevokePermission(MsgRevokePermission) returns (MsgRevokePermissionResponse);

  // Attach defines a method to attach a token to another token.
  // Fires:
  // - EventAttach
  // - attach (deprecated, not typed)
  // - operation_root_changed (deprecated, not typed)
  // Throws:
  // - ErrInvalidRequest
  //   - `owner` does not owns `id`.
  //   - `owner` does not owns `to`.
  //   - `token_id` is not root.
  //   - `token_id` is an ancestor of `to_token_id`, which creates a cycle as a result.
  //   - depth of `to_token_id` exceeds an app-specific limit.
  rpc Attach(MsgAttach) returns (MsgAttachResponse);

  // Detach defines a method to detach a token from another token.
  // Fires:
  // - EventDetach
  // - detach (deprecated, not typed)
  // - operation_root_changed (deprecated, not typed)
  // Throws:
  // - ErrInvalidRequest
  //   - `owner` does not owns `token_id`.
  rpc Detach(MsgDetach) returns (MsgDetachResponse);

  // OperatorAttach defines a method to attach a token to another token by operator.
  // Fires:
  // - EventAttach
  // - attach_from (deprecated, not typed)
  // - operation_root_changed (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized
  //   - the holder has not authorized `operator`.
  // - ErrInvalidRequest
  //   - `owner` does not owns `subject`.
  //   - `owner` does not owns `target`.
  //   - `subject` is not root.
  //   - `subject` is an ancestor of `target`, which creates a cycle as a result.
  //   - depth of `to` exceeds an app-specific limit.
  // Since: 0.46.0 (finschia)
  rpc OperatorAttach(MsgOperatorAttach) returns (MsgOperatorAttachResponse);

  // OperatorDetach defines a method to detach a token from another token by operator.
  // Fires:
  // - EventDetach
  // - detach_from (deprecated, not typed)
  // - operation_root_changed (deprecated, not typed)
  // Throws:
  // - ErrUnauthorized
  //   - the holder has not authorized `operator`.
  // - ErrInvalidRequest
  //   - `owner` does not owns `subject`.
  // Since: 0.46.0 (finschia)
  rpc OperatorDetach(MsgOperatorDetach) returns (MsgOperatorDetachResponse);

  // Deprecated: use OperatorAttach
  // AttachFrom defines a method to attach a token to another token by operator.
  rpc AttachFrom(MsgAttachFrom) returns (MsgAttachFromResponse);

  // Deprecated: use OperatorDetach
  // DetachFrom defines a method to detach a token from another token by operator.
  rpc DetachFrom(MsgDetachFrom) returns (MsgDetachFromResponse);
}

// MsgSend is the Msg/Send request type.
//
// Throws:
// - ErrInvalidAddress
//   - `from` is of invalid format.
//   - `to` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `amount` is not positive.
//
// Signer: `from`
//
// Since: 0.46.0 (finschia)
message MsgSend {
  // contract id associated with the contract.
  string contract_id = 1;
  // holder whose tokens are being sent.
  string from = 2;
  // recipient of the tokens.
  string to = 3;
  // amount of tokens to send.
  repeated Coin amount = 4 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "Coins"];
}

// MsgSendResponse is the Msg/Send response type.
//
// Since: 0.46.0 (finschia)
message MsgSendResponse {}

// MsgOperatorSend is the Msg/OperatorSend request type.
//
// Throws:
// - ErrInvalidAddress
//   - `operator` is of invalid format.
//   - `from` is of invalid format.
//   - `to` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `amount` is not positive.
//
// Signer: `operator`
//
// Since: 0.46.0 (finschia)
message MsgOperatorSend {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the send.
  string operator = 2;
  // holder whose tokens are being sent.
  string from = 3;
  // recipient of the tokens.
  string to = 4;
  // amount of tokens to send.
  repeated Coin amount = 5 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "Coins"];
}

// MsgOperatorSendResponse is the Msg/OperatorSend response type.
//
// Since: 0.46.0 (finschia)
message MsgOperatorSendResponse {}

// Deprecated: use MsgSend
//
// MsgTransferFT is the Msg/TransferFT request type.
message MsgTransferFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // the address which the transfer is from.
  string from = 2;
  // the address which the transfer is to.
  string to = 3;
  // the amount of the transfer.
  // Note: amount may be empty.
  repeated Coin amount = 4 [(gogoproto.nullable) = false];
}

// Deprecated: do not use
//
// MsgTransferFTResponse is the Msg/TransferFT response type.
message MsgTransferFTResponse {}

// Deprecated: use MsgOperatorSend
//
// MsgTransferFTFrom is the Msg/TransferFTFrom request type.
message MsgTransferFTFrom {
  // contract id associated with the contract.
  string contract_id = 1;
  // the address of the operator.
  string proxy = 2;
  // the address which the transfer is from.
  string from = 3;
  // the address which the transfer is to.
  string to = 4;
  // the amount of the transfer.
  // Note: amount may be empty.
  repeated Coin amount = 5 [(gogoproto.nullable) = false];
}

// Deprecated: do not use
//
// MsgTransferFTFromResponse is the Msg/TransferFTFrom response type.
message MsgTransferFTFromResponse {}

// Deprecated: use MsgSend
//
// MsgTransferNFT is the Msg/TransferNFT request type.
message MsgTransferNFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // the address which the transfer is from.
  string from = 2;
  // the address which the transfer is to.
  string to = 3;
  // the token ids to transfer.
  repeated string token_ids = 4;
}

// Deprecated: do not use
//
// MsgTransferNFTResponse is the Msg/TransferNFT response type.
message MsgTransferNFTResponse {}

// Deprecated: use MsgOperatorSend
//
// MsgTransferNFTFrom is the Msg/TransferNFTFrom request type.
message MsgTransferNFTFrom {
  // contract id associated with the contract.
  string contract_id = 1;
  // the address of the operator.
  string proxy = 2;
  // the address which the transfer is from.
  string from = 3;
  // the address which the transfer is to.
  string to = 4;
  // the token ids to transfer.
  repeated string token_ids = 5;
}

// Deprecated: do not use
//
// MsgTransferNFTFromResponse is the Msg/TransferNFTFrom response type.
message MsgTransferNFTFromResponse {}

// MsgAuthorizeOperator is the Msg/AuthorizeOperator request type.
//
// Throws:
// - ErrInvalidAddress
//   - `holder` is of invalid format.
//   - `operator` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//
// Signer: `holder`
//
// Since: 0.46.0 (finschia)
message MsgAuthorizeOperator {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of a holder which authorizes the `operator` address as an operator.
  string holder = 2;
  // address to set as an operator for `holder`.
  string operator = 3;
}

// MsgAuthorizeOperatorResponse is the Msg/AuthorizeOperator response type.
//
// Since: 0.46.0 (finschia)
message MsgAuthorizeOperatorResponse {}

// MsgRevokeOperator is the Msg/RevokeOperator request type.
//
// Throws:
// - ErrInvalidAddress
//   - `holder` is of invalid format.
//   - `operator` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//
// Signer: `holder`
//
// Since: 0.46.0 (finschia)
message MsgRevokeOperator {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of a holder which revokes the `operator` address as an operator.
  string holder = 2;
  // address to rescind as an operator for `holder`.
  string operator = 3;
}

// MsgRevokeOperatorResponse is the Msg/RevokeOperator response type.
//
// Since: 0.46.0 (finschia)
message MsgRevokeOperatorResponse {}

// Deprecated: use MsgAuthorizeOperator
//
// MsgApprove is the Msg/Approve request type.
message MsgApprove {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the holder who allows the manipulation of its token.
  string approver = 2;
  // address which the manipulation is allowed to.
  string proxy = 3;
}

// Deprecated: do not use
//
// MsgApproveResponse is the Msg/Approve response type.
message MsgApproveResponse {}

// Deprecated: use MsgRevokeOperator
//
// MsgDisapprove is the Msg/Disapprove request type.
message MsgDisapprove {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the holder who allows the manipulation of its token.
  string approver = 2;
  // address which the manipulation is allowed to.
  string proxy = 3;
}

// Deprecated: do not use
//
// MsgDisapproveResponse is the Msg/Disapprove response type.
message MsgDisapproveResponse {}

// MsgCreateContract is the Msg/CreateContract request type.
//
// Throws:
// - ErrInvalidAddress
//   - `owner` is of invalid format.
// - ErrInvalidRequest
//   - `name` exceeds the app-specific limit in length.
//   - `base_img_uri` exceeds the app-specific limit in length.
//   - `meta` exceeds the app-specific limit in length.
//
// Signer: `owner`
message MsgCreateContract {
  // address which all the permissions on the contract will be granted to (not a permanent property).
  string owner = 1;

  // name defines the human-readable name of the contract.
  string name = 2;
  // base img uri is an uri for the contract image stored off chain.
  string base_img_uri = 3;
  // meta is a brief description of the contract.
  string meta = 4;
}

// MsgCreateContractResponse is the Msg/CreateContract response type.
message MsgCreateContractResponse {
  // id of the new contract.
  string id = 1;
}

// MsgCreateFTClass is the Msg/CreateFTClass request type.
//
// Throws:
// - ErrInvalidAddress
//   - `operator` is of invalid format.
//   - `to` is not empty and is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `name` exceeds the app-specific limit in length.
//   - `meta` exceeds the app-specific limit in length.
//   - `decimals` is lesser than 0 or greater than 18.
//   - `supply` is positive and `to` is of invalid format.
//
// Signer: `operator`
//
// Since: 0.46.0 (finschia)
message MsgCreateFTClass {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the create.
  string operator = 2;
  // name defines the human-readable name of the token class.
  string name = 3;
  // meta is a brief description of the token class.
  string meta = 4;
  // decimals is the number of decimals which one must divide the amount by to get its user representation.
  int32 decimals = 5;

  // recipient of the minted tokens.
  string to = 6;
  // amount of tokens to mint on the create.
  // Note: supply may be zero.
  string supply = 7 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgCreateFTClassResponse is the Msg/CreateFTClass response type.
//
// Since: 0.46.0 (finschia)
message MsgCreateFTClassResponse {
  // id of the new token class.
  string id = 1;
}

// MsgCreateNFTClass is the Msg/CreateNFTClass request type.
//
// Throws:
// - ErrInvalidAddress
//   - `operator` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `name` exceeds the app-specific limit in length.
//   - `meta` exceeds the app-specific limit in length.
//
// Signer: `operator`
//
// Since: 0.46.0 (finschia)
message MsgCreateNFTClass {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the create.
  string operator = 2;
  // name defines the human-readable name of the token class.
  string name = 3;
  // meta is a brief description of the token class.
  string meta = 4;
}

// MsgCreateNFTClassResponse is the Msg/CreateNFTClass response type.
//
// Since: 0.46.0 (finschia)
message MsgCreateNFTClassResponse {
  // id of the new token class.
  string id = 1;
}

// Deprecated: use MsgCreateFTClass
//
// MsgIssueFT is the Msg/IssueFT request type.
//
// Throws:
// - ErrInvalidAddress
//   - `owner` is of invalid format.
//   - `to` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `name` is empty.
//   - `name` exceeds the app-specific limit in length.
//   - `meta` exceeds the app-specific limit in length.
//   - `decimals` is lesser than 0 or greater than 18.
//   - `amount` is not positive.
//   - `mintable` == false, amount == 1 and decimals == 0 (weird, but for the backward compatibility).
//
// Signer: `owner`
message MsgIssueFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // name defines the human-readable name of the token class.
  string name = 2;
  // meta is a brief description of the token class.
  string meta = 3;
  // decimals is the number of decimals which one must divide the amount by to get its user representation.
  int32 decimals = 4;
  // mintable represents whether the token is allowed to be minted or burnt.
  bool mintable = 5;

  // the address of the grantee which must have the permission to issue a token.
  string owner = 6;

  // the address to send the minted tokens to. mandatory.
  string to = 7;
  // the amount of tokens to mint on the issuance.
  // Note: if you provide negative amount, a panic may result.
  // Note: amount may be zero.
  string amount = 8 [(gogoproto.customtype) = "github.com/line/lbm-sdk/types.Int", (gogoproto.nullable) = false];
}

// Deprecated: do not use
//
// MsgIssueFTResponse is the Msg/IssueFT response type.
message MsgIssueFTResponse {
  // id of the new token class.
  string id = 1;
}

// Deprecated: use MsgCreateNFTClass
//
// MsgIssueNFT is the Msg/IssueNFT request type.
//
// Throws:
// - ErrInvalidAddress
//   - `owner` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `name` exceeds the app-specific limit in length.
//   - `meta` exceeds the app-specific limit in length.
//
// Signer: `owner`
message MsgIssueNFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // name defines the human-readable name of the token class.
  string name = 2;
  // meta is a brief description of the token class.
  string meta = 3;

  // the address of the grantee which must have the permission to issue a token.
  string owner = 4;
}

// Deprecated: do not use
//
// MsgIssueNFTResponse is the Msg/IssueNFT response type.
message MsgIssueNFTResponse {
  // id of the new token class.
  string id = 1;
}

// MsgMintFT is the Msg/MintFT request type.
//
// Throws:
// - ErrInvalidAddress
//   - `from` is of invalid format.
//   - `to` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `amount` is not positive.
//
// Signer: `from`
message MsgMintFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the grantee which has the permission for the mint.
  string from = 2;
  // address which the minted tokens will be sent to.
  string to = 3;
  // the amount of the mint.
  // Note: amount may be empty.
  repeated Coin amount = 4 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "Coins"];
}

// MsgMintFTResponse is the Msg/MintFT response type.
message MsgMintFTResponse {}

// MsgMintNFT is the Msg/MintNFT request type.
//
// Throws:
// - ErrInvalidAddress
//   - `from` is of invalid format.
//   - `to` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `params` is empty.
//   - `params` has an invalid element.
//
// Signer: `from`
message MsgMintNFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the grantee which has the permission for the mint.
  string from = 2;
  // address which the minted token will be sent to.
  string to = 3;
  // parameters for the minted tokens.
  repeated MintNFTParam params = 4 [(gogoproto.nullable) = false];
}

// MsgMintNFTResponse is the Msg/MintNFT response type.
message MsgMintNFTResponse {
  // ids of the new non-fungible tokens.
  repeated string ids = 1;
}

// MintNFTParam defines a parameter for minting nft.
message MintNFTParam {
  // token type or class id of the nft.
  // Note: it cannot start with zero.
  string token_type = 1;
  // name defines the human-readable name of the nft (mandatory).
  // Note: it has an app-specific limit in length.
  string name = 2;
  // meta is a brief description of the nft.
  // Note: it has an app-specific limit in length.
  string meta = 3;
}

// MsgBurn is the Msg/Burn request type.
//
// Throws:
// - ErrInvalidAddress
//   - `from` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `amount` is not positive.
//
// Signer: `from`
//
// Since: 0.46.0 (finschia)
message MsgBurn {
  // contract id associated with the contract.
  string contract_id = 1;
  // holder whose tokens are being burned.
  string from = 2;
  // amount of tokens to burn.
  repeated Coin amount = 3 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "Coins"];
}

// MsgBurnResponse is the Msg/Burn response type.
//
// Since: 0.46.0 (finschia)
message MsgBurnResponse {}

// MsgOperatorBurn is the Msg/OperatorBurn request type.
//
// Throws:
// - ErrInvalidAddress
//   - `operator` is of invalid format.
//   - `from` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `amount` is not positive.
//
// Signer: `from`
//
// Since: 0.46.0 (finschia)
message MsgOperatorBurn {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the burn.
  string operator = 2;
  // holder whose tokens are being burned.
  string from = 3;
  // amount of tokens to burn.
  repeated Coin amount = 4 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "Coins"];
}

// MsgOperatorBurnResponse is the Msg/OperatorBurn response type.
//
// Since: 0.46.0 (finschia)
message MsgOperatorBurnResponse {}

// Deprecated: use MsgBurn
//
// MsgBurnFT is the Msg/BurnFT request type.
message MsgBurnFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which the tokens will be burnt from.
  // Note: it must have the permission for the burn.
  string from = 2;
  // the amount of the burn.
  // Note: amount may be empty.
  repeated Coin amount = 3 [(gogoproto.nullable) = false];
}

// Deprecated: do not use
//
// MsgBurnFTResponse is the Msg/BurnFT response type.
message MsgBurnFTResponse {}

// Deprecated: use MsgOperatorBurn
//
// MsgBurnFTFrom is the Msg/BurnFTFrom request type.
message MsgBurnFTFrom {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the burn.
  // Note: it must have the permission for the burn.
  // Note: it must have been authorized by from.
  string proxy = 2;
  // address which the tokens will be burnt from.
  string from = 3;
  // the amount of the burn.
  // Note: amount may be empty.
  repeated Coin amount = 4 [(gogoproto.nullable) = false];
}

// Deprecated: do not use
//
// MsgBurnFTFromResponse is the Msg/BurnFTFrom response type.
message MsgBurnFTFromResponse {}

// Deprecated: use MsgBurn
//
// MsgBurnNFT is the Msg/BurnNFT request type.
message MsgBurnNFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which the tokens will be burnt from.
  // Note: it must have the permission for the burn.
  string from = 2;
  // the token ids to burn.
  // Note: id cannot start with zero.
  repeated string token_ids = 3;
}

// Deprecated: do not use
//
// MsgBurnNFTResponse is the Msg/BurnNFT response type.
message MsgBurnNFTResponse {}

// Deprecated: use MsgOperatorBurn
//
// MsgBurnNFTFrom is the Msg/BurnNFTFrom request type.
message MsgBurnNFTFrom {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the burn.
  // Note: it must have the permission for the burn.
  // Note: it must have been authorized by from.
  string proxy = 2;
  // address which the tokens will be burnt from.
  string from = 3;
  // the token ids to burn.
  // Note: id cannot start with zero.
  repeated string token_ids = 4;
}

// Deprecated: do not use
//
// MsgBurnNFTFromResponse is the Msg/BurnNFTFrom response type.
message MsgBurnNFTFromResponse {}

// MsgModifyContract is the Msg/ModifyContract request type.
//
// Throws:
// - ErrInvalidAddress
//   - `operator` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `changes` has duplicate keys.
//   - `changes` has a key which is not allowed to modify.
//   - `changes` is empty.
//
// Signer: `operator`
//
// Since: 0.46.0 (finschia)
message MsgModifyContract {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the modify.
  string operator = 2;
  // attributes to apply.
  repeated Attribute changes = 3 [(gogoproto.nullable) = false];
}

// MsgModifyContractResponse is the Msg/ModifyContract response type.
//
// Since: 0.46.0 (finschia)
message MsgModifyContractResponse {}

// MsgModifyTokenClass is the Msg/ModifyTokenClass request type.
//
// Throws:
// - ErrInvalidAddress
//   - `operator` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `class_id` is of invalid format.
//   - `changes` has duplicate keys.
//   - `changes` has a key which is not allowed to modify.
//   - `changes` is empty.
//
// Signer: `operator`
//
// Since: 0.46.0 (finschia)
message MsgModifyTokenClass {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the modify.
  string operator = 2;
  // class id associated with the token class.
  string class_id = 3;
  // attributes to apply.
  repeated Attribute changes = 4 [(gogoproto.nullable) = false];
}

// MsgModifyTokenClassResponse is the Msg/ModifyTokenClass response type.
//
// Since: 0.46.0 (finschia)
message MsgModifyTokenClassResponse {}

// MsgModifyNFT is the Msg/ModifyNFT request type.
//
// Throws:
// - ErrInvalidAddress
//   - `operator` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `token_id` is of invalid format.
//   - `changes` has duplicate keys.
//   - `changes` has a key which is not allowed to modify.
//   - `changes` is empty.
//
// Signer: `operator`
//
// Since: 0.46.0 (finschia)
message MsgModifyNFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the modify.
  string operator = 2;
  // token id associated with the non-fungible token.
  string token_id = 3;
  // attributes to apply.
  repeated Attribute changes = 4 [(gogoproto.nullable) = false];
}

// MsgModifyNFTResponse is the Msg/ModifyNFT response type.
//
// Since: 0.46.0 (finschia)
message MsgModifyNFTResponse {}

// Deprecated: use MsgModifyContract, MsgModifyTokenClass or MsgModifyNFT
//
// MsgModify is the Msg/Modify request type.
message MsgModify {
  // contract id associated with the contract.
  string contract_id = 1;
  // the address of the grantee which must have modify permission.
  string owner = 2;
  // token type of the token.
  string token_type = 3;
  // token index of the token.
  // if index is empty, it would modify the corresponding token type.
  // if index is not empty, it would modify the corresponding nft.
  // Note: if token type is of FTs, the index cannot be empty.
  string token_index = 4;
  // changes to apply.
  // on modifying collection: name, base_img_uri, meta.
  // on modifying token type and token: name, meta.
  repeated Change changes = 5 [(gogoproto.nullable) = false];
}

// Deprecated: do not use
//
// MsgModifyResponse is the Msg/Modify response type.
message MsgModifyResponse {}

// MsgGrant is the Msg/Grant request type.
//
// Throws:
// - ErrInvalidAddress
//   - `granter` is of invalid format.
//   - `grantee` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `permission` is not a valid permission.
//
// Signer: `granter`
//
// Since: 0.46.0 (finschia)
message MsgGrant {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the granter which must have the permission to give.
  string granter = 2;
  // address of the grantee.
  string grantee = 3;
  // permission on the contract.
  Permission permission = 4;
}

// MsgGrantResponse is the Msg/Grant response type.
//
// Since: 0.46.0 (finschia)
message MsgGrantResponse {}

// MsgAbandon is the Msg/Abandon request type.
//
// Throws:
// - ErrInvalidAddress
//   - `grantee` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `permission` is not a valid permission.
//
// Signer: `grantee`
//
// Since: 0.46.0 (finschia)
message MsgAbandon {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the grantee which abandons the permission.
  string grantee = 2;
  // permission on the contract.
  Permission permission = 3;
}

// MsgAbandonResponse is the Msg/Abandon response type.
//
// Since: 0.46.0 (finschia)
message MsgAbandonResponse {}

// Deprecated: use MsgGrant
//
// MsgGrantPermission is the Msg/GrantPermission request type.
message MsgGrantPermission {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the granter which must have the permission to give.
  string from = 2;
  // address of the grantee.
  string to = 3;
  // permission on the contract.
  string permission = 4;
}

// Deprecated: do not use
//
// MsgGrantPermissionResponse is the Msg/GrantPermission response type.
message MsgGrantPermissionResponse {}

// Deprecated: use MsgAbandon
//
// MsgRevokePermission is the Msg/RevokePermission request type.
message MsgRevokePermission {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the grantee which abandons the permission.
  string from = 2;
  // permission on the contract.
  string permission = 3;
}

// Deprecated: do not use
//
// MsgRevokePermissionResponse is the Msg/RevokePermission response type.
message MsgRevokePermissionResponse {}

// MsgAttach is the Msg/Attach request type.
//
// Throws:
// - ErrInvalidAddress
//   - `from` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `token_id` is of invalid format.
//   - `to_token_id` is of invalid format.
//   - `token_id` is equal to `to_token_id`.
//
// Signer: `from`
//
// TODO: revisit the field names
message MsgAttach {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the owner of the token.
  string from = 2;
  // token id of the token to attach.
  string token_id = 3;
  // to token id which one attachs the token to.
  string to_token_id = 4;
}

// MsgAttachResponse is the Msg/Attach response type.
message MsgAttachResponse {}

// MsgDetach is the Msg/Detach request type.
//
// Throws:
// - ErrInvalidAddress
//   - `from` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `token_id` is of invalid format.
//
// Signer: `from`
//
// TODO: revisit the field names
message MsgDetach {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the owner of the token.
  string from = 2;
  // token id of the token to detach.
  string token_id = 3;
}

// MsgDetachResponse is the Msg/Detach response type.
message MsgDetachResponse {}

// MsgOperatorAttach is the Msg/OperatorAttach request type.
//
// Throws:
// - ErrInvalidAddress
//   - `operator` is of invalid format.
//   - `owner` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `subject` is of invalid format.
//   - `target` is of invalid format.
//   - `subject` is equal to `target`.
//
// Signer: `operator`
//
// Since: 0.46.0 (finschia)
message MsgOperatorAttach {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the operator.
  string operator = 2;
  // address of the owner of the token.
  string owner = 3;
  // token id of the token to attach.
  string subject = 4;
  // token id which one attachs the token to.
  string target = 5;
}

// MsgOperatorAttachResponse is the Msg/OperatorAttach response type.
//
// Since: 0.46.0 (finschia)
message MsgOperatorAttachResponse {}

// MsgOperatorDetach is the Msg/OperatorDetach request type.
//
// Throws:
// - ErrInvalidAddress
//   - `operator` is of invalid format.
//   - `owner` is of invalid format.
// - ErrInvalidRequest
//   - `contract_id` is of invalid format.
//   - `subject` is of invalid format.
//
// Signer: `operator`
//
// Since: 0.46.0 (finschia)
message MsgOperatorDetach {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the operator.
  string operator = 2;
  // address of the holder of the token.
  string owner = 3;
  // token id of the token to detach.
  string subject = 4;
}

// MsgOperatorDetachResponse is the Msg/OperatorDetach response type.
//
// Since: 0.46.0 (finschia)
message MsgOperatorDetachResponse {}

// Deprecated: use MsgOperatorAttach
//
// MsgAttachFrom is the Msg/AttachFrom request type.
message MsgAttachFrom {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the operator.
  string proxy = 2;
  // address of the owner of the token.
  string from = 3;
  // token id of the token to attach.
  string token_id = 4;
  // to token id which one attachs the token to.
  string to_token_id = 5;
}

// Deprecated: do not use
//
// MsgAttachFromResponse is the Msg/AttachFrom response type.
message MsgAttachFromResponse {}

// Deprecated: use MsgOperatorDetach
//
// MsgDetachFrom is the Msg/DetachFrom request type.
message MsgDetachFrom {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the operator.
  string proxy = 2;
  // address of the owner of the token.
  string from = 3;
  // token id of the token to detach.
  string token_id = 4;
}

// Deprecated: do not use
//
// MsgDetachFromResponse is the Msg/DetachFrom response type.
message MsgDetachFromResponse {}
