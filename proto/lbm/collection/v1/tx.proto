syntax = "proto3";
package lbm.collection.v1;

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

import "lbm/collection/v1/collection.proto";

option go_package = "github.com/Finschia/finschia-sdk/x/collection";

option (gogoproto.equal_all) = false;

// Msg defines the collection Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // SendNFT defines a method to send non-fungible tokens from one account to another account.
  // Fires:
  // - EventSent
  rpc SendNFT(MsgSendNFT) returns (MsgSendNFTResponse);

  // OperatorSendNFT defines a method to send non-fungible tokens from one account to another account by the operator.
  // Fires:
  // - EventSent
  rpc OperatorSendNFT(MsgOperatorSendNFT) returns (MsgOperatorSendNFTResponse);

  // AuthorizeOperator allows one to send tokens on behalf of the holder.
  // Fires:
  // - EventAuthorizedOperator
  rpc AuthorizeOperator(MsgAuthorizeOperator) returns (MsgAuthorizeOperatorResponse);

  // RevokeOperator revokes the authorization of the operator to send the holder's token.
  // Fires:
  // - EventRevokedOperator
  rpc RevokeOperator(MsgRevokeOperator) returns (MsgRevokeOperatorResponse);

  // CreateContract defines a method to create a contract for collection.
  // it grants `mint`, `burn`, `modify` and `issue` permissions on the contract to its creator.
  // Fires:
  // - EventCreatedContract
  rpc CreateContract(MsgCreateContract) returns (MsgCreateContractResponse);

  // IssueNFT defines a method to create a class of non-fungible token.
  // Fires:
  // - EventCreatedNFTClass
  // Note: it DOES grant `mint` and `burn` permissions to its issuer.
  rpc IssueNFT(MsgIssueNFT) returns (MsgIssueNFTResponse);

  // MintNFT defines a method to mint non-fungible tokens.
  // Fires:
  // - EventMintedNFT
  rpc MintNFT(MsgMintNFT) returns (MsgMintNFTResponse);

  // BurnNFT defines a method to burn non-fungible tokens.
  // Fires:
  // - EventBurned
  rpc BurnNFT(MsgBurnNFT) returns (MsgBurnNFTResponse);

  // OperatorBurnNFT defines a method to burn non-fungible tokens of the holder by the operator.
  // Fires:
  // - EventBurned
  rpc OperatorBurnNFT(MsgOperatorBurnNFT) returns (MsgOperatorBurnNFTResponse);

  // Modify defines a method to modify metadata.
  // Fires:
  // - EventModifiedContract
  // - EventModifiedTokenClass
  // - EventModifiedNFT
  rpc Modify(MsgModify) returns (MsgModifyResponse);

  // GrantPermission allows one to mint or burn tokens or modify metadata.
  // Fires:
  // - EventGranted
  rpc GrantPermission(MsgGrantPermission) returns (MsgGrantPermissionResponse);

  // RevokePermission abandons a permission.
  // Fires:
  // - EventRenounced
  rpc RevokePermission(MsgRevokePermission) returns (MsgRevokePermissionResponse);
}

// MsgSendNFT is the Msg/SendNFT request type.
message MsgSendNFT {
  option (cosmos.msg.v1.signer) = "from";
  option (amino.name)           = "lbm-sdk/MsgSendNFT";

  // contract id associated with the contract.
  string contract_id = 1;
  // the address which the transfer is from.
  string from = 2;
  // the address which the transfer is to.
  string to = 3;
  // the token ids to transfer.
  repeated string token_ids = 4;
}

// MsgSendNFTResponse is the Msg/SendNFT response type.
message MsgSendNFTResponse {}

// MsgOperatorSendNFT is the Msg/OperatorSendNFT request type.
message MsgOperatorSendNFT {
  option (cosmos.msg.v1.signer) = "operator";
  option (amino.name)           = "lbm-sdk/MsgOperatorSendNFT";

  // contract id associated with the contract.
  string contract_id = 1;
  // the address of the operator.
  string operator = 2;
  // the address which the transfer is from.
  string from = 3;
  // the address which the transfer is to.
  string to = 4;
  // the token ids to transfer.
  repeated string token_ids = 5;
}

// MsgOperatorSendNFTResponse is the Msg/OperatorSendNFT response type.
message MsgOperatorSendNFTResponse {}

// MsgAuthorizeOperator is the Msg/AuthorizeOperator request type.
message MsgAuthorizeOperator {
  option (cosmos.msg.v1.signer) = "holder";
  option (amino.name)           = "lbm-sdk/collection/MsgAuthorizeOperator";

  // contract id associated with the contract.
  string contract_id = 1;
  // address of the holder who allows the manipulation of its token.
  string holder = 2;
  // address which the manipulation is allowed to.
  string operator = 3;
}

// MsgAuthorizeOperatorResponse is the Msg/AuthorizeOperator response type.
message MsgAuthorizeOperatorResponse {}

// MsgRevokeOperator is the Msg/RevokeOperator request type.
message MsgRevokeOperator {
  option (cosmos.msg.v1.signer) = "holder";
  option (amino.name)           = "lbm-sdk/collection/MsgRevokeOperator";

  // contract id associated with the contract.
  string contract_id = 1;
  // address of the holder who allows the manipulation of its token.
  string holder = 2;
  // address which the manipulation is allowed to.
  string operator = 3;
}

// MsgRevokeOperatorResponse is the Msg/RevokeOperator response type.
message MsgRevokeOperatorResponse {}

// MsgCreateContract is the Msg/CreateContract request type.
message MsgCreateContract {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name)           = "lbm-sdk/MsgCreateContract";

  // address which all the permissions on the contract will be granted to (not a permanent property).
  string owner = 1;

  // name defines the human-readable name of the contract.
  string name = 2;
  // uri for the contract image stored off chain.
  string uri = 3;
  // meta is a brief description of the contract.
  string meta = 4;
}

// MsgCreateContractResponse is the Msg/CreateContract response type.
message MsgCreateContractResponse {
  // id of the new contract.
  string contract_id = 1;
}

// MsgIssueNFT is the Msg/IssueNFT request type.
message MsgIssueNFT {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name)           = "lbm-sdk/MsgIssueNFT";

  // contract id associated with the contract.
  string contract_id = 1;
  // name defines the human-readable name of the token type.
  string name = 2;
  // meta is a brief description of the token type.
  string meta = 3;

  // the address of the grantee which must have the permission to issue a token.
  string owner = 4;
}

// MsgIssueNFTResponse is the Msg/IssueNFT response type.
message MsgIssueNFTResponse {
  // id of the new token type.
  // refer to TokenType for the definition.
  string token_type = 1;
}

// MsgMintNFT is the Msg/MintNFT request type.
message MsgMintNFT {
  option (cosmos.msg.v1.signer) = "from";
  option (amino.name)           = "lbm-sdk/MsgMintNFT";

  // contract id associated with the contract.
  string contract_id = 1;
  // address of the grantee which has the permission for the mint.
  string from = 2;
  // address which the minted token will be sent to.
  string to = 3;
  // parameters for the minted tokens.
  repeated MintNFTParam params = 4 [(gogoproto.nullable) = false];
}

// MsgMintNFTResponse is the Msg/MintNFT response type.
message MsgMintNFTResponse {
  // ids of the new non-fungible tokens.
  repeated string token_ids = 1;
}

// MintNFTParam defines a parameter for minting nft.
message MintNFTParam {
  // token type or class id of the nft.
  // Note: it cannot start with zero.
  // refer to TokenType for the definition.
  string token_type = 1;
  // name defines the human-readable name of the nft (mandatory).
  // Note: it has an app-specific limit in length.
  string name = 2;
  // meta is a brief description of the nft.
  // Note: it has an app-specific limit in length.
  string meta = 3;
}

// MsgBurnNFT is the Msg/BurnNFT request type.
message MsgBurnNFT {
  option (cosmos.msg.v1.signer) = "from";
  option (amino.name)           = "lbm-sdk/MsgBurnNFT";

  // contract id associated with the contract.
  string contract_id = 1;
  // address which the tokens will be burnt from.
  // Note: it must have the permission for the burn.
  string from = 2;
  // the token ids to burn.
  // Note: id cannot start with zero.
  repeated string token_ids = 3;
}

// MsgBurnNFTResponse is the Msg/BurnNFT response type.
message MsgBurnNFTResponse {}

// MsgOperatorBurnNFT is the Msg/OperatorBurnNFT request type.
message MsgOperatorBurnNFT {
  option (cosmos.msg.v1.signer) = "operator";
  option (amino.name)           = "lbm-sdk/MsgOperatorBurnNFT";

  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the burn.
  // Note: it must have the permission for the burn.
  // Note: it must have been authorized by from.
  string operator = 2;
  // address which the tokens will be burnt from.
  string from = 3;
  // the token ids to burn.
  // Note: id cannot start with zero.
  repeated string token_ids = 4;
}

// MsgOperatorBurnNFTResponse is the Msg/OperatorBurnNFT response type.
message MsgOperatorBurnNFTResponse {}

// MsgModify is the Msg/Modify request type.
message MsgModify {
  option (cosmos.msg.v1.signer) = "owner";
  option (amino.name)           = "lbm-sdk/collection/MsgModify";

  // contract id associated with the contract.
  string contract_id = 1;
  // the address of the grantee which must have modify permission.
  string owner = 2;
  // token type of the token.
  // refer to TokenType for the definition.
  string token_type = 3;
  // token index of the token.
  // if index is empty, it would modify the corresponding token type.
  // if index is not empty, it would modify the corresponding nft.
  // Note: if token type is of FTs, the index cannot be empty.
  string token_index = 4;
  // changes to apply.
  // possible attribute keys on modifying collection: name, uri, base_img_uri (deprecated), meta.
  // possible attribute keys on modifying token type and token: name, meta.
  repeated Attribute changes = 5 [(gogoproto.nullable) = false];
}

// MsgModifyResponse is the Msg/Modify response type.
message MsgModifyResponse {}

// MsgGrantPermission is the Msg/GrantPermission request type.
message MsgGrantPermission {
  option (cosmos.msg.v1.signer) = "from";
  option (amino.name)           = "lbm-sdk/collection/MsgGrantPermission";

  // contract id associated with the contract.
  string contract_id = 1;
  // address of the granter which must have the permission to give.
  string from = 2;
  // address of the grantee.
  string to = 3;
  // permission on the contract.
  string permission = 4;
}

// MsgGrantPermissionResponse is the Msg/GrantPermission response type.
message MsgGrantPermissionResponse {}

// MsgRevokePermission is the Msg/RevokePermission request type.
message MsgRevokePermission {
  option (cosmos.msg.v1.signer) = "from";
  option (amino.name)           = "lbm-sdk/collection/MsgRevokePermission";

  // contract id associated with the contract.
  string contract_id = 1;
  // address of the grantee which abandons the permission.
  string from = 2;
  // permission on the contract.
  string permission = 3;
}

// MsgRevokePermissionResponse is the Msg/RevokePermission response type.
message MsgRevokePermissionResponse {}
