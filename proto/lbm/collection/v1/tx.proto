syntax = "proto3";
package lbm.collection.v1;

import "gogoproto/gogo.proto";

import "lbm/collection/v1/collection.proto";

option go_package = "github.com/Finschia/finschia-sdk/x/collection";

option (gogoproto.equal_all) = false;

// Msg defines the collection Msg service.
service Msg {
  // SendFT defines a method to send fungible tokens from one account to another account.
  // Fires:
  // - EventSent
  // - transfer_ft (deprecated, not typed)
  rpc SendFT(MsgSendFT) returns (MsgSendFTResponse);

  // OperatorSendFT defines a method to send fungible tokens from one account to another account by the operator.
  // Fires:
  // - EventSent
  // - transfer_ft_from (deprecated, not typed)
  rpc OperatorSendFT(MsgOperatorSendFT) returns (MsgOperatorSendFTResponse);

  // SendNFT defines a method to send non-fungible tokens from one account to another account.
  // Fires:
  // - EventSent
  // - transfer_nft (deprecated, not typed)
  // - operation_transfer_nft (deprecated, not typed)
  rpc SendNFT(MsgSendNFT) returns (MsgSendNFTResponse);

  // OperatorSendNFT defines a method to send non-fungible tokens from one account to another account by the operator.
  // Fires:
  // - EventSent
  // - transfer_nft_from (deprecated, not typed)
  // - operation_transfer_nft (deprecated, not typed)
  rpc OperatorSendNFT(MsgOperatorSendNFT) returns (MsgOperatorSendNFTResponse);

  // AuthorizeOperator allows one to send tokens on behalf of the holder.
  // Fires:
  // - EventAuthorizedOperator
  // - approve_collection (deprecated, not typed)
  rpc AuthorizeOperator(MsgAuthorizeOperator) returns (MsgAuthorizeOperatorResponse);

  // RevokeOperator revokes the authorization of the operator to send the holder's token.
  // Fires:
  // - EventRevokedOperator
  // - disapprove_collection (deprecated, not typed)
  rpc RevokeOperator(MsgRevokeOperator) returns (MsgRevokeOperatorResponse);

  // CreateContract defines a method to create a contract for collection.
  // it grants `mint`, `burn`, `modify` and `issue` permissions on the contract to its creator.
  // Fires:
  // - EventCreatedContract
  // - create_collection (deprecated, not typed)
  rpc CreateContract(MsgCreateContract) returns (MsgCreateContractResponse);

  // IssueFT defines a method to create a class of fungible token.
  // Fires:
  // - EventCreatedFTClass
  // - EventMintedFT
  // - issue_ft (deprecated, not typed)
  // Note: it does not grant any permissions to its issuer.
  rpc IssueFT(MsgIssueFT) returns (MsgIssueFTResponse);

  // IssueNFT defines a method to create a class of non-fungible token.
  // Fires:
  // - EventCreatedNFTClass
  // - issue_nft (deprecated, not typed)
  // Note: it DOES grant `mint` and `burn` permissions to its issuer.
  rpc IssueNFT(MsgIssueNFT) returns (MsgIssueNFTResponse);

  // MintFT defines a method to mint fungible tokens.
  // Fires:
  // - EventMintedFT
  // - mint_ft (deprecated, not typed)
  rpc MintFT(MsgMintFT) returns (MsgMintFTResponse);

  // MintNFT defines a method to mint non-fungible tokens.
  // Fires:
  // - EventMintedNFT
  // - mint_nft (deprecated, not typed)
  rpc MintNFT(MsgMintNFT) returns (MsgMintNFTResponse);

  // BurnFT defines a method to burn fungible tokens.
  // Fires:
  // - EventBurned
  // - burn_ft (deprecated, not typed)
  // - burn_nft (deprecated, not typed)
  // - operation_burn_nft (deprecated, not typed)
  rpc BurnFT(MsgBurnFT) returns (MsgBurnFTResponse);

  // OperatorBurnFT defines a method to burn fungible tokens of the holder by the operator.
  // Fires:
  // - EventBurned
  // - burn_ft_from (deprecated, not typed)
  // - burn_nft_from (deprecated, not typed)
  // - operation_burn_nft (deprecated, not typed)
  rpc OperatorBurnFT(MsgOperatorBurnFT) returns (MsgOperatorBurnFTResponse);

  // BurnNFT defines a method to burn non-fungible tokens.
  // Fires:
  // - EventBurned
  // - burn_ft (deprecated, not typed)
  // - burn_nft (deprecated, not typed)
  // - operation_burn_nft (deprecated, not typed)
  rpc BurnNFT(MsgBurnNFT) returns (MsgBurnNFTResponse);

  // OperatorBurnNFT defines a method to burn non-fungible tokens of the holder by the operator.
  // Fires:
  // - EventBurned
  // - burn_ft_from (deprecated, not typed)
  // - burn_nft_from (deprecated, not typed)
  // - operation_burn_nft (deprecated, not typed)
  rpc OperatorBurnNFT(MsgOperatorBurnNFT) returns (MsgOperatorBurnNFTResponse);

  // Modify defines a method to modify metadata.
  // Fires:
  // - EventModifiedContract
  // - modify_collection (deprecated, not typed)
  // - EventModifiedTokenClass
  // - modify_token_type (deprecated, not typed)
  // - modify_token (deprecated, not typed)
  // - EventModifiedNFT
  rpc Modify(MsgModify) returns (MsgModifyResponse);

  // GrantPermission allows one to mint or burn tokens or modify metadata.
  // Fires:
  // - EventGranted
  // - grant_perm (deprecated, not typed)
  rpc GrantPermission(MsgGrantPermission) returns (MsgGrantPermissionResponse);

  // RevokePermission abandons a permission.
  // Fires:
  // - EventRenounced
  // - revoke_perm (deprecated, not typed)
  rpc RevokePermission(MsgRevokePermission) returns (MsgRevokePermissionResponse);

  // Attach defines a method to attach a token to another token.
  // Fires:
  // - EventAttach
  // - attach (deprecated, not typed)
  // - operation_root_changed (deprecated, not typed)
  rpc Attach(MsgAttach) returns (MsgAttachResponse);

  // Detach defines a method to detach a token from another token.
  // Fires:
  // - EventDetach
  // - detach (deprecated, not typed)
  // - operation_root_changed (deprecated, not typed)
  rpc Detach(MsgDetach) returns (MsgDetachResponse);

  // OperatorAttach defines a method to attach a token to another token by operator.
  // Fires:
  // - EventAttach
  // - attach_from (deprecated, not typed)
  // - operation_root_changed (deprecated, not typed)
  rpc OperatorAttach(MsgOperatorAttach) returns (MsgOperatorAttachResponse);

  // OperatorDetach defines a method to detach a token from another token by operator.
  // Fires:
  // - EventDetach
  // - detach_from (deprecated, not typed)
  // - operation_root_changed (deprecated, not typed)
  rpc OperatorDetach(MsgOperatorDetach) returns (MsgOperatorDetachResponse);
}

// MsgSendFT is the Msg/SendFT request type.
message MsgSendFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // the address which the transfer is from.
  string from = 2;
  // the address which the transfer is to.
  string to = 3;
  // the amount of the transfer.
  // Note: amount may be empty.
  repeated Coin amount = 4 [(gogoproto.nullable) = false];
}

// MsgSendFTResponse is the Msg/SendFT response type.
message MsgSendFTResponse {}

// MsgOperatorSendFT is the Msg/OperatorSendFT request type.
message MsgOperatorSendFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // the address of the operator.
  string operator = 2;
  // the address which the transfer is from.
  string from = 3;
  // the address which the transfer is to.
  string to = 4;
  // the amount of the transfer.
  // Note: amount may be empty.
  repeated Coin amount = 5 [(gogoproto.nullable) = false];
}

// MsgOperatorSendFTResponse is the Msg/OperatorSendFT response type.
message MsgOperatorSendFTResponse {}

// MsgSendNFT is the Msg/SendNFT request type.
message MsgSendNFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // the address which the transfer is from.
  string from = 2;
  // the address which the transfer is to.
  string to = 3;
  // the token ids to transfer.
  repeated string token_ids = 4;
}

// MsgSendNFTResponse is the Msg/SendNFT response type.
message MsgSendNFTResponse {}

// MsgOperatorSendNFT is the Msg/OperatorSendNFT request type.
message MsgOperatorSendNFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // the address of the operator.
  string operator = 2;
  // the address which the transfer is from.
  string from = 3;
  // the address which the transfer is to.
  string to = 4;
  // the token ids to transfer.
  repeated string token_ids = 5;
}

// MsgOperatorSendNFTResponse is the Msg/OperatorSendNFT response type.
message MsgOperatorSendNFTResponse {}

// MsgAuthorizeOperator is the Msg/AuthorizeOperator request type.
message MsgAuthorizeOperator {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the holder who allows the manipulation of its token.
  string holder = 2;
  // address which the manipulation is allowed to.
  string operator = 3;
}

// MsgAuthorizeOperatorResponse is the Msg/AuthorizeOperator response type.
message MsgAuthorizeOperatorResponse {}

// MsgRevokeOperator is the Msg/RevokeOperator request type.
message MsgRevokeOperator {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the holder who allows the manipulation of its token.
  string holder = 2;
  // address which the manipulation is allowed to.
  string operator = 3;
}

// MsgRevokeOperatorResponse is the Msg/RevokeOperator response type.
message MsgRevokeOperatorResponse {}

// MsgCreateContract is the Msg/CreateContract request type.
//
// Signer: `owner`
message MsgCreateContract {
  // address which all the permissions on the contract will be granted to (not a permanent property).
  string owner = 1;

  // name defines the human-readable name of the contract.
  string name = 2;
  // uri for the contract image stored off chain.
  string uri = 3;
  // meta is a brief description of the contract.
  string meta = 4;
}

// MsgCreateContractResponse is the Msg/CreateContract response type.
message MsgCreateContractResponse {
  // id of the new contract.
  string contract_id = 1;
}

// MsgIssueFT is the Msg/IssueFT request type.
//
// Signer: `owner`
message MsgIssueFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // name defines the human-readable name of the token type.
  string name = 2;
  // meta is a brief description of the token type.
  string meta = 3;
  // decimals is the number of decimals which one must divide the amount by to get its user representation.
  int32 decimals = 4;
  // mintable represents whether the token is allowed to be minted or burnt.
  bool mintable = 5;

  // the address of the grantee which must have the permission to issue a token.
  string owner = 6;

  // the address to send the minted tokens to. mandatory.
  string to = 7;
  // the amount of tokens to mint on the issuance.
  // Note: if you provide negative amount, a panic may result.
  // Note: amount may be zero.
  string amount = 8 [(gogoproto.customtype) = "github.com/Finschia/finschia-sdk/types.Int", (gogoproto.nullable) = false];
}

// MsgIssueFTResponse is the Msg/IssueFT response type.
message MsgIssueFTResponse {
  // id of the token.
  string token_id = 1;
}

// MsgIssueNFT is the Msg/IssueNFT request type.
//
// Signer: `owner`
message MsgIssueNFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // name defines the human-readable name of the token type.
  string name = 2;
  // meta is a brief description of the token type.
  string meta = 3;

  // the address of the grantee which must have the permission to issue a token.
  string owner = 4;
}

// MsgIssueNFTResponse is the Msg/IssueNFT response type.
message MsgIssueNFTResponse {
  // id of the new token type.
  // refer to TokenType for the definition.
  string token_type = 1;
}

// MsgMintFT is the Msg/MintFT request type.
//
// Signer: `from`
message MsgMintFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the grantee which has the permission for the mint.
  string from = 2;
  // address which the minted tokens will be sent to.
  string to = 3;
  // the amount of the mint.
  // Note: amount may be empty.
  repeated Coin amount = 4 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "Coins"];
}

// MsgMintFTResponse is the Msg/MintFT response type.
message MsgMintFTResponse {}

// MsgMintNFT is the Msg/MintNFT request type.
//
// Signer: `from`
message MsgMintNFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the grantee which has the permission for the mint.
  string from = 2;
  // address which the minted token will be sent to.
  string to = 3;
  // parameters for the minted tokens.
  repeated MintNFTParam params = 4 [(gogoproto.nullable) = false];
}

// MsgMintNFTResponse is the Msg/MintNFT response type.
message MsgMintNFTResponse {
  // ids of the new non-fungible tokens.
  repeated string token_ids = 1;
}

// MintNFTParam defines a parameter for minting nft.
message MintNFTParam {
  // token type or class id of the nft.
  // Note: it cannot start with zero.
  // refer to TokenType for the definition.
  string token_type = 1;
  // name defines the human-readable name of the nft (mandatory).
  // Note: it has an app-specific limit in length.
  string name = 2;
  // meta is a brief description of the nft.
  // Note: it has an app-specific limit in length.
  string meta = 3;
}

// MsgBurnFT is the Msg/BurnFT request type.
message MsgBurnFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which the tokens will be burnt from.
  // Note: it must have the permission for the burn.
  string from = 2;
  // the amount of the burn.
  // Note: amount may be empty.
  repeated Coin amount = 3 [(gogoproto.nullable) = false];
}

// MsgBurnFTResponse is the Msg/BurnFT response type.
message MsgBurnFTResponse {}

// MsgOperatorBurnFT is the Msg/OperatorBurnFT request type.
message MsgOperatorBurnFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the burn.
  // Note: it must have the permission for the burn.
  // Note: it must have been authorized by from.
  string operator = 2;
  // address which the tokens will be burnt from.
  string from = 3;
  // the amount of the burn.
  // Note: amount may be empty.
  repeated Coin amount = 4 [(gogoproto.nullable) = false];
}

// MsgOperatorBurnFTResponse is the Msg/OperatorBurnFT response type.
message MsgOperatorBurnFTResponse {}

// MsgBurnNFT is the Msg/BurnNFT request type.
message MsgBurnNFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which the tokens will be burnt from.
  // Note: it must have the permission for the burn.
  string from = 2;
  // the token ids to burn.
  // Note: id cannot start with zero.
  repeated string token_ids = 3;
}

// MsgBurnNFTResponse is the Msg/BurnNFT response type.
message MsgBurnNFTResponse {}

// MsgOperatorBurnNFT is the Msg/OperatorBurnNFT request type.
message MsgOperatorBurnNFT {
  // contract id associated with the contract.
  string contract_id = 1;
  // address which triggers the burn.
  // Note: it must have the permission for the burn.
  // Note: it must have been authorized by from.
  string operator = 2;
  // address which the tokens will be burnt from.
  string from = 3;
  // the token ids to burn.
  // Note: id cannot start with zero.
  repeated string token_ids = 4;
}

// MsgOperatorBurnNFTResponse is the Msg/OperatorBurnNFT response type.
message MsgOperatorBurnNFTResponse {}

// MsgModify is the Msg/Modify request type.
message MsgModify {
  // contract id associated with the contract.
  string contract_id = 1;
  // the address of the grantee which must have modify permission.
  string owner = 2;
  // token type of the token.
  // refer to TokenType for the definition.
  string token_type = 3;
  // token index of the token.
  // if index is empty, it would modify the corresponding token type.
  // if index is not empty, it would modify the corresponding nft.
  // Note: if token type is of FTs, the index cannot be empty.
  string token_index = 4;
  // changes to apply.
  // possible attribute keys on modifying collection: name, uri, base_img_uri (deprecated), meta.
  // possible attribute keys on modifying token type and token: name, meta.
  repeated Attribute changes = 5 [(gogoproto.nullable) = false];
}

// MsgModifyResponse is the Msg/Modify response type.
message MsgModifyResponse {}

// MsgGrantPermission is the Msg/GrantPermission request type.
message MsgGrantPermission {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the granter which must have the permission to give.
  string from = 2;
  // address of the grantee.
  string to = 3;
  // permission on the contract.
  string permission = 4;
}

// MsgGrantPermissionResponse is the Msg/GrantPermission response type.
message MsgGrantPermissionResponse {}

// MsgRevokePermission is the Msg/RevokePermission request type.
message MsgRevokePermission {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the grantee which abandons the permission.
  string from = 2;
  // permission on the contract.
  string permission = 3;
}

// MsgRevokePermissionResponse is the Msg/RevokePermission response type.
message MsgRevokePermissionResponse {}

// MsgAttach is the Msg/Attach request type.
//
// Signer: `from`
message MsgAttach {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the owner of the token.
  string from = 2;
  // token id of the token to attach.
  string token_id = 3;
  // to token id which one attachs the token to.
  string to_token_id = 4;
}

// MsgAttachResponse is the Msg/Attach response type.
message MsgAttachResponse {}

// MsgDetach is the Msg/Detach request type.
//
// Signer: `from`
message MsgDetach {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the owner of the token.
  string from = 2;
  // token id of the token to detach.
  string token_id = 3;
}

// MsgDetachResponse is the Msg/Detach response type.
message MsgDetachResponse {}

// MsgOperatorAttach is the Msg/OperatorAttach request type.
message MsgOperatorAttach {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the operator.
  string operator = 2;
  // address of the owner of the token.
  string from = 3;
  // token id of the token to attach.
  string token_id = 4;
  // to token id which one attachs the token to.
  string to_token_id = 5;
}

// MsgOperatorAttachResponse is the Msg/OperatorAttach response type.
message MsgOperatorAttachResponse {}

// MsgOperatorDetach is the Msg/OperatorDetach request type.
message MsgOperatorDetach {
  // contract id associated with the contract.
  string contract_id = 1;
  // address of the operator.
  string operator = 2;
  // address of the owner of the token.
  string from = 3;
  // token id of the token to detach.
  string token_id = 4;
}

// MsgOperatorDetachResponse is the Msg/OperatorDetach response type.
message MsgOperatorDetachResponse {}
