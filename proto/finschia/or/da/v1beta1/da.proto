syntax = "proto3";
package finschia.or.da.v1beta1;

import "gogoproto/gogo.proto";
import "finschia/or/da/v1beta1/params.proto";

option go_package = "github.com/Finschia/finschia-sdk/x/or/da/types";

enum CompressionOption {
  option (gogoproto.goproto_enum_prefix) = false;

  // COMPRESSION_OPTION_UNSPECIFIED defines a no-op compress option.
  COMPRESSION_OPTION_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "OptionEmpty"];

  // Zstandard is a fast compression algorithm, providing high compression ratios.
  // It also offers a special mode for small data, called dictionary compression.
  COMPRESSION_OPTION_ZSTD = 1 [(gogoproto.enumvalue_customname) = "OptionZSTD"];
}

// BatchContext denotes a range of transactions that belong the same batch.
// It is used to compress shared fields that would otherwise be repeated for each transaction.
message BatchContext {
  // num_sequenced_txs specifies the number of sequencer txs included in
  // the batch.
  uint64 num_sequenced_txs = 1;

  // num_subsequent_queue_txs specifies the number of queued txs included in
  // the batch
  uint64 num_subsequent_queue_txs = 2;

  // timestamp is the L1 unix timestamp of the batch.
  int64 l1_timestamp = 3;
  // blockNumber is the L1 BlockNumber of the batch.
  int64 l1_height = 4;
}

message BatchElement {
  bool is_sequenced = 1;

  // timestamp is the L1 unix timestamp of the batch.
  // SEQUENCER TX ONLY
  int64 l1_timestamp = 2;

  // blockNumber is the L1 BlockNumber of the batch.
  // SEQUENCER TX ONLY
  int64 l1_height = 3;

  // SEQUENCER TX ONLY
  bytes txraw = 4;

  // QUEUED TX ONLY
  uint64 queue_index = 5;
}

// Sequencer use CTCBatch when they submit
message CTCBatch {
  //  total_elements_to_append is the number of txs to add in batch
  uint64 total_elements_to_append = 1;

  // previous total batch elements.
  string should_start_at_element = 2 [(gogoproto.customtype) = "github.com/Finschia/finschia-sdk/types.Int", (gogoproto.nullable) = false];

  repeated BatchContext batch_contexts = 3;
  repeated BatchElement elements = 4;
}

// L1toL2Queue is a queued tx for L2 batch.
// Sequencer must process this transaction in time.
message L1toL2Queue {
  // timestamp is the L1 unix timestamp of the batch.
  // It is set when the type of tx is L1toL2
  int64 l1_timestamp = 1;

  // blockNumber is the L1 BlockNumber of the batch.
  int64 l1_height = 2;

  bytes txraw = 3;
}

message CTCMetadata {
  // Assumed to contain all contiguous batches between base and height (inclusive)
  uint64 base = 1;
  uint64 height = 2;
  uint64 pruning_ptr = 3;
}

// CTCRef is a data type that forms an element of Canonical Transaction Chain.
message CTC {
  // Hash value of current batch header
  bytes batch_hash = 1;

  // Total number of elements submitted.
  string total_elements = 2 [(gogoproto.customtype) = "github.com/Finschia/finschia-sdk/types.Int", (gogoproto.nullable) = false];

  // Index of the next queue element.
  uint64 next_queue_index = 3;

  // The latest batch timestamp.
  int64 timestamp = 4;

  // The latest batch blockNumber
  int64 block_number = 5;

  // Reference for accessing CTC batch data.
  CTCRef batch_ref = 6;
}

message CTCRef {
  bytes txhash = 1 [(gogoproto.customname) = "TxHash"];
  int64 msg_index = 2;
}
