syntax = "proto3";
package finschia.or.da.v1;

import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/Finschia/finschia-sdk/x/or/da/types";

// Params defines the parameters for the module.
message Params {
  option (gogoproto.goproto_stringer) = false;

  // 1. CC-related
  uint64 cc_batch_max_bytes = 1 [(gogoproto.customname) = "CCBatchMaxBytes"];

  // Queue Tx-related

  // max_queue_tx_size is the maximum queue tx size that can be submitted.
  uint64 max_queue_tx_size = 2;

  // min_queue_tx_gas is the minimum gas that must be specified for a queue tx.
  uint64 min_queue_tx_gas = 3;

  // l2gas_discount_divisor is the ratio between the cost of gas on L1 and L2.
  // This is a positive integer, meaning we assume L2 gas is always less costly.
  uint64 l2gas_discount_divisor = 4;

  // enqueue_l2gas_prepaid is the base cost of calling enqueue function.
  uint64 enqueue_l2gas_prepaid = 5;

  // A sequencer must submit a queue tx to L2 before this time.
  uint64 queue_tx_expiration_window = 6;


  // 2. SCC-related
  uint64 scc_batch_max_bytes = 7 [(gogoproto.customname) = "SCCBatchMaxBytes"];

  // Number of seconds that the verifier is allowed to submit a fraud proof.
  // Currnet scc batch header timestamp + fraud_proof_window = challenge period
  uint64 fraud_proof_window = 8;
  // Number of seconds that the sequencer is exclusively allowed to post state roots
  uint64 sequencer_publish_window = 9;
}
