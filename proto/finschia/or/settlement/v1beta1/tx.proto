syntax = "proto3";
package finschia.or.settlement.v1beta1;

// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/Finschia/finschia-sdk/x/or/settlement/types";

// Msg defines the Msg service.
service Msg {
  rpc InitiateChallenge(MsgInitiateChallenge) returns (MsgInitiateChallengeResponse);
  rpc ProposeState(MsgProposeState) returns (MsgProposeStateResponse);
  rpc RespondState(MsgRespondState) returns (MsgRespondStateResponse);
  rpc ConfirmStateTransition(MsgConfirmStateTransition) returns (MsgConfirmStateTransitionResponse);
  rpc DenyStateTransition(MsgDenyStateTransition) returns (MsgDenyStateTransitionResponse);
  rpc AddTrieNode(MsgAddTrieNode) returns (MsgAddTrieNodeResponse);
}

message MsgInitiateChallenge {
  int64  block_number_n     = 1;
  bytes  block_header_np1   = 2;
  bytes  assertion_root     = 3;
  bytes  final_system_state = 4;
  uint64 step_count         = 5;
}

message MsgInitiateChallengeResponse {
  uint64 challenge_id = 1;
}

message MsgProposeState {
  uint64 challenge_id = 1;
  bytes  state_hash   = 2;
}

message MsgProposeStateResponse {}

message MsgRespondState {
  uint64 challenge_id = 1;
  bytes  state_hash   = 2;
}

message MsgRespondStateResponse {}

message MsgConfirmStateTransition {
  int64 challenge_id = 1;
}

message MsgConfirmStateTransitionResponse {}

message MsgDenyStateTransition {
  int64 challenge_id = 1;
}

message MsgDenyStateTransitionResponse {}

message MsgAddTrieNode {
  int64 challenge_id = 1;
}

message MsgAddTrieNodeResponse {}
