// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lbm/consortium/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	query "github.com/line/lbm-sdk/types/query"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryEnabledRequest is the request type for the Query/Params RPC method.
type QueryEnabledRequest struct {
}

func (m *QueryEnabledRequest) Reset()         { *m = QueryEnabledRequest{} }
func (m *QueryEnabledRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEnabledRequest) ProtoMessage()    {}
func (*QueryEnabledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e916717a75144447, []int{0}
}
func (m *QueryEnabledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnabledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnabledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnabledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnabledRequest.Merge(m, src)
}
func (m *QueryEnabledRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnabledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnabledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnabledRequest proto.InternalMessageInfo

// QueryEnabledResponse is the response type for the Query/Params RPC method.
type QueryEnabledResponse struct {
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *QueryEnabledResponse) Reset()         { *m = QueryEnabledResponse{} }
func (m *QueryEnabledResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEnabledResponse) ProtoMessage()    {}
func (*QueryEnabledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e916717a75144447, []int{1}
}
func (m *QueryEnabledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnabledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnabledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnabledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnabledResponse.Merge(m, src)
}
func (m *QueryEnabledResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnabledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnabledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnabledResponse proto.InternalMessageInfo

func (m *QueryEnabledResponse) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// QueryAllowedValidatorsRequest is the request type for the
// Query/AllowedValidators RPC method.
type QueryAllowedValidatorsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllowedValidatorsRequest) Reset()         { *m = QueryAllowedValidatorsRequest{} }
func (m *QueryAllowedValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedValidatorsRequest) ProtoMessage()    {}
func (*QueryAllowedValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e916717a75144447, []int{2}
}
func (m *QueryAllowedValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedValidatorsRequest.Merge(m, src)
}
func (m *QueryAllowedValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedValidatorsRequest proto.InternalMessageInfo

func (m *QueryAllowedValidatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllowedValidatorsResponse is the response type for the
// Query/AllowedValidators RPC method.
type QueryAllowedValidatorsResponse struct {
	ValidatorAddresses []string `protobuf:"bytes,1,rep,name=validator_addresses,json=validatorAddresses,proto3" json:"validator_addresses,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllowedValidatorsResponse) Reset()         { *m = QueryAllowedValidatorsResponse{} }
func (m *QueryAllowedValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedValidatorsResponse) ProtoMessage()    {}
func (*QueryAllowedValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e916717a75144447, []int{3}
}
func (m *QueryAllowedValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedValidatorsResponse.Merge(m, src)
}
func (m *QueryAllowedValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedValidatorsResponse proto.InternalMessageInfo

func (m *QueryAllowedValidatorsResponse) GetValidatorAddresses() []string {
	if m != nil {
		return m.ValidatorAddresses
	}
	return nil
}

func (m *QueryAllowedValidatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllowedValidatorRequest is the request type for the
// Query/AllowedValidator RPC method.
type QueryAllowedValidatorRequest struct {
	// validator_address defines the validator address to query for.
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QueryAllowedValidatorRequest) Reset()         { *m = QueryAllowedValidatorRequest{} }
func (m *QueryAllowedValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedValidatorRequest) ProtoMessage()    {}
func (*QueryAllowedValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e916717a75144447, []int{4}
}
func (m *QueryAllowedValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedValidatorRequest.Merge(m, src)
}
func (m *QueryAllowedValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedValidatorRequest proto.InternalMessageInfo

func (m *QueryAllowedValidatorRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

// QueryAllowedValidatorResponse is the request type for the
// Query/AllowedValidator RPC method.
type QueryAllowedValidatorResponse struct {
	Allowed bool `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
}

func (m *QueryAllowedValidatorResponse) Reset()         { *m = QueryAllowedValidatorResponse{} }
func (m *QueryAllowedValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedValidatorResponse) ProtoMessage()    {}
func (*QueryAllowedValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e916717a75144447, []int{5}
}
func (m *QueryAllowedValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedValidatorResponse.Merge(m, src)
}
func (m *QueryAllowedValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedValidatorResponse proto.InternalMessageInfo

func (m *QueryAllowedValidatorResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func init() {
	proto.RegisterType((*QueryEnabledRequest)(nil), "lbm.consortium.v1.QueryEnabledRequest")
	proto.RegisterType((*QueryEnabledResponse)(nil), "lbm.consortium.v1.QueryEnabledResponse")
	proto.RegisterType((*QueryAllowedValidatorsRequest)(nil), "lbm.consortium.v1.QueryAllowedValidatorsRequest")
	proto.RegisterType((*QueryAllowedValidatorsResponse)(nil), "lbm.consortium.v1.QueryAllowedValidatorsResponse")
	proto.RegisterType((*QueryAllowedValidatorRequest)(nil), "lbm.consortium.v1.QueryAllowedValidatorRequest")
	proto.RegisterType((*QueryAllowedValidatorResponse)(nil), "lbm.consortium.v1.QueryAllowedValidatorResponse")
}

func init() { proto.RegisterFile("lbm/consortium/v1/query.proto", fileDescriptor_e916717a75144447) }

var fileDescriptor_e916717a75144447 = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6e, 0xd3, 0x30,
	0x1c, 0xc7, 0xeb, 0x4d, 0x30, 0x66, 0x2e, 0xab, 0x07, 0x52, 0x15, 0xb5, 0xd9, 0x14, 0x09, 0x98,
	0x40, 0xd8, 0xed, 0x38, 0x4d, 0x48, 0xa0, 0x22, 0x38, 0x71, 0x81, 0x1c, 0x38, 0x70, 0x99, 0x9c,
	0xc5, 0x0a, 0x11, 0xae, 0x9d, 0xc5, 0x4e, 0x60, 0x42, 0x70, 0xe0, 0x09, 0x10, 0x3c, 0x00, 0xaf,
	0xc1, 0x23, 0x70, 0x9c, 0xc4, 0x85, 0x23, 0x6a, 0xf7, 0x20, 0x28, 0xb6, 0x43, 0xdb, 0xa5, 0x81,
	0x71, 0x8c, 0xbf, 0xfe, 0xfa, 0xfb, 0xf9, 0xfd, 0x09, 0x1c, 0xf0, 0x68, 0x42, 0x8e, 0xa4, 0x50,
	0x32, 0xd7, 0x69, 0x31, 0x21, 0xe5, 0x88, 0x1c, 0x17, 0x2c, 0x3f, 0xc1, 0x59, 0x2e, 0xb5, 0x44,
	0x5d, 0x1e, 0x4d, 0xf0, 0x5c, 0xc6, 0xe5, 0xc8, 0x0b, 0x2a, 0x47, 0x44, 0x15, 0xb3, 0x17, 0x2b,
	0x47, 0x46, 0x93, 0x54, 0x50, 0x9d, 0x4a, 0x61, 0x6d, 0x5e, 0x3f, 0x91, 0x32, 0xe1, 0x8c, 0xd0,
	0x2c, 0x25, 0x54, 0x08, 0xa9, 0x8d, 0xa8, 0xac, 0x1a, 0x5c, 0x87, 0xdb, 0xcf, 0x2b, 0xeb, 0x13,
	0x41, 0x23, 0xce, 0xe2, 0x90, 0x1d, 0x17, 0x4c, 0xe9, 0x60, 0x08, 0xaf, 0x2d, 0x1f, 0xab, 0x4c,
	0x0a, 0xc5, 0x50, 0x0f, 0x6e, 0x30, 0x7b, 0xd4, 0x03, 0xbb, 0x60, 0xef, 0x4a, 0x58, 0x7f, 0x06,
	0x87, 0x70, 0x60, 0x1c, 0x63, 0xce, 0xe5, 0x1b, 0x16, 0xbf, 0xa0, 0x3c, 0x8d, 0xa9, 0x96, 0xb9,
	0x72, 0x4f, 0xa2, 0x07, 0x10, 0xce, 0xd9, 0x8c, 0xfb, 0xea, 0xbe, 0x8f, 0xab, 0x9a, 0xaa, 0x02,
	0xb0, 0xad, 0xb4, 0x1c, 0xe1, 0x67, 0x34, 0x61, 0xce, 0x13, 0x2e, 0x38, 0x82, 0xcf, 0x00, 0xfa,
	0x6d, 0x09, 0x8e, 0x8e, 0xc0, 0xed, 0xb2, 0x3e, 0x3d, 0xa4, 0x71, 0x9c, 0x33, 0xa5, 0x98, 0xea,
	0x81, 0xdd, 0xf5, 0xbd, 0xcd, 0x10, 0xfd, 0x91, 0xc6, 0xb5, 0x82, 0x1e, 0x2e, 0x31, 0xad, 0x19,
	0xa6, 0x9d, 0x56, 0x26, 0x9b, 0xb2, 0x04, 0xf5, 0x14, 0xf6, 0x57, 0x32, 0xd5, 0x45, 0xdf, 0x81,
	0xdd, 0x06, 0x91, 0xa9, 0x7d, 0x33, 0xdc, 0x3a, 0xcf, 0x13, 0x1c, 0xb4, 0xb4, 0x70, 0xb1, 0xfb,
	0xd4, 0x6a, 0x75, 0xf7, 0xdd, 0xe7, 0xfe, 0xd9, 0x3a, 0xbc, 0x64, 0xbc, 0xe8, 0x03, 0xdc, 0x70,
	0x43, 0x43, 0x37, 0x71, 0x63, 0x63, 0xf0, 0x8a, 0x61, 0x7b, 0xb7, 0xfe, 0x79, 0xcf, 0xe6, 0x07,
	0xc1, 0xc7, 0x1f, 0x67, 0x5f, 0xd6, 0xfa, 0xc8, 0x23, 0xcd, 0x4d, 0x75, 0x7b, 0x80, 0xbe, 0x02,
	0xd8, 0x6d, 0x4c, 0x08, 0x0d, 0xdb, 0x22, 0xda, 0xd6, 0xc5, 0x1b, 0xfd, 0x87, 0xc3, 0xe1, 0xdd,
	0x30, 0x78, 0x3b, 0x68, 0xb0, 0x02, 0xaf, 0x9c, 0xb3, 0x7c, 0x03, 0x70, 0xeb, 0xfc, 0x23, 0x88,
	0x5c, 0x34, 0xae, 0xe6, 0x1b, 0x5e, 0xdc, 0xe0, 0xf0, 0xc6, 0x06, 0xef, 0x3e, 0x3a, 0xf8, 0x2b,
	0x1e, 0x79, 0xd7, 0x58, 0x98, 0xf7, 0xc4, 0x8d, 0xf9, 0xd1, 0xe3, 0xef, 0x53, 0x1f, 0x9c, 0x4e,
	0x7d, 0xf0, 0x6b, 0xea, 0x83, 0x4f, 0x33, 0xbf, 0x73, 0x3a, 0xf3, 0x3b, 0x3f, 0x67, 0x7e, 0xe7,
	0xe5, 0xed, 0x24, 0xd5, 0xaf, 0x8a, 0x08, 0x1f, 0xc9, 0x09, 0xe1, 0xa9, 0x60, 0x55, 0xc6, 0x5d,
	0x15, 0xbf, 0x26, 0x6f, 0x17, 0x93, 0xf4, 0x49, 0xc6, 0x54, 0x74, 0xd9, 0xfc, 0xfa, 0xf7, 0x7e,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x77, 0x48, 0x12, 0x70, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Enabled queries the modules availability.
	Enabled(ctx context.Context, in *QueryEnabledRequest, opts ...grpc.CallOption) (*QueryEnabledResponse, error)
	// AllowedValidators queries allowed validators.
	AllowedValidators(ctx context.Context, in *QueryAllowedValidatorsRequest, opts ...grpc.CallOption) (*QueryAllowedValidatorsResponse, error)
	// AllowedValidator queries whether the address is allowed by consortium.
	AllowedValidator(ctx context.Context, in *QueryAllowedValidatorRequest, opts ...grpc.CallOption) (*QueryAllowedValidatorResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Enabled(ctx context.Context, in *QueryEnabledRequest, opts ...grpc.CallOption) (*QueryEnabledResponse, error) {
	out := new(QueryEnabledResponse)
	err := c.cc.Invoke(ctx, "/lbm.consortium.v1.Query/Enabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowedValidators(ctx context.Context, in *QueryAllowedValidatorsRequest, opts ...grpc.CallOption) (*QueryAllowedValidatorsResponse, error) {
	out := new(QueryAllowedValidatorsResponse)
	err := c.cc.Invoke(ctx, "/lbm.consortium.v1.Query/AllowedValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowedValidator(ctx context.Context, in *QueryAllowedValidatorRequest, opts ...grpc.CallOption) (*QueryAllowedValidatorResponse, error) {
	out := new(QueryAllowedValidatorResponse)
	err := c.cc.Invoke(ctx, "/lbm.consortium.v1.Query/AllowedValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Enabled queries the modules availability.
	Enabled(context.Context, *QueryEnabledRequest) (*QueryEnabledResponse, error)
	// AllowedValidators queries allowed validators.
	AllowedValidators(context.Context, *QueryAllowedValidatorsRequest) (*QueryAllowedValidatorsResponse, error)
	// AllowedValidator queries whether the address is allowed by consortium.
	AllowedValidator(context.Context, *QueryAllowedValidatorRequest) (*QueryAllowedValidatorResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Enabled(ctx context.Context, req *QueryEnabledRequest) (*QueryEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enabled not implemented")
}
func (*UnimplementedQueryServer) AllowedValidators(ctx context.Context, req *QueryAllowedValidatorsRequest) (*QueryAllowedValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowedValidators not implemented")
}
func (*UnimplementedQueryServer) AllowedValidator(ctx context.Context, req *QueryAllowedValidatorRequest) (*QueryAllowedValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowedValidator not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Enabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Enabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.consortium.v1.Query/Enabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Enabled(ctx, req.(*QueryEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowedValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllowedValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowedValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.consortium.v1.Query/AllowedValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowedValidators(ctx, req.(*QueryAllowedValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowedValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllowedValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowedValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.consortium.v1.Query/AllowedValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowedValidator(ctx, req.(*QueryAllowedValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lbm.consortium.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enabled",
			Handler:    _Query_Enabled_Handler,
		},
		{
			MethodName: "AllowedValidators",
			Handler:    _Query_AllowedValidators_Handler,
		},
		{
			MethodName: "AllowedValidator",
			Handler:    _Query_AllowedValidator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbm/consortium/v1/query.proto",
}

func (m *QueryEnabledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnabledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnabledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEnabledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnabledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnabledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllowedValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllowedValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddresses) > 0 {
		for iNdEx := len(m.ValidatorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorAddresses[iNdEx])
			copy(dAtA[i:], m.ValidatorAddresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllowedValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllowedValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Allowed {
		i--
		if m.Allowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryEnabledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEnabledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *QueryAllowedValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllowedValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidatorAddresses) > 0 {
		for _, s := range m.ValidatorAddresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllowedValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllowedValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Allowed {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryEnabledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnabledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnabledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnabledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnabledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnabledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddresses = append(m.ValidatorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Allowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
