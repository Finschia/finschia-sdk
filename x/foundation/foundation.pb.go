// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lbm/foundation/v1/foundation.proto

package foundation

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_line_lbm_sdk_types "github.com/line/lbm-sdk/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the foundation module.
type Params struct {
	Enabled       bool                              `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	FoundationTax github_com_line_lbm_sdk_types.Dec `protobuf:"bytes,2,opt,name=foundation_tax,json=foundationTax,proto3,customtype=github.com/line/lbm-sdk/types.Dec" json:"foundation_tax"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_1980496a233f02f4, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// ValidatorAuth defines authorization info of a validator.
type ValidatorAuth struct {
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	CreationAllowed bool   `protobuf:"varint,2,opt,name=creation_allowed,json=creationAllowed,proto3" json:"creation_allowed,omitempty"`
}

func (m *ValidatorAuth) Reset()         { *m = ValidatorAuth{} }
func (m *ValidatorAuth) String() string { return proto.CompactTextString(m) }
func (*ValidatorAuth) ProtoMessage()    {}
func (*ValidatorAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_1980496a233f02f4, []int{1}
}
func (m *ValidatorAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorAuth.Merge(m, src)
}
func (m *ValidatorAuth) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorAuth.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorAuth proto.InternalMessageInfo

func (m *ValidatorAuth) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *ValidatorAuth) GetCreationAllowed() bool {
	if m != nil {
		return m.CreationAllowed
	}
	return false
}

// UpdateFoundationParamsProposal details a proposal to update params of cosortium module.
type UpdateFoundationParamsProposal struct {
	Title       string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Params      *Params `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *UpdateFoundationParamsProposal) Reset()      { *m = UpdateFoundationParamsProposal{} }
func (*UpdateFoundationParamsProposal) ProtoMessage() {}
func (*UpdateFoundationParamsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_1980496a233f02f4, []int{2}
}
func (m *UpdateFoundationParamsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFoundationParamsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFoundationParamsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFoundationParamsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFoundationParamsProposal.Merge(m, src)
}
func (m *UpdateFoundationParamsProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFoundationParamsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFoundationParamsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFoundationParamsProposal proto.InternalMessageInfo

// UpdateValidatorAuthsProposal details a proposal to update validator auths on foundation.
type UpdateValidatorAuthsProposal struct {
	Title       string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Auths       []*ValidatorAuth `protobuf:"bytes,3,rep,name=auths,proto3" json:"auths,omitempty"`
}

func (m *UpdateValidatorAuthsProposal) Reset()      { *m = UpdateValidatorAuthsProposal{} }
func (*UpdateValidatorAuthsProposal) ProtoMessage() {}
func (*UpdateValidatorAuthsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_1980496a233f02f4, []int{3}
}
func (m *UpdateValidatorAuthsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateValidatorAuthsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateValidatorAuthsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateValidatorAuthsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateValidatorAuthsProposal.Merge(m, src)
}
func (m *UpdateValidatorAuthsProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateValidatorAuthsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateValidatorAuthsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateValidatorAuthsProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "lbm.foundation.v1.Params")
	proto.RegisterType((*ValidatorAuth)(nil), "lbm.foundation.v1.ValidatorAuth")
	proto.RegisterType((*UpdateFoundationParamsProposal)(nil), "lbm.foundation.v1.UpdateFoundationParamsProposal")
	proto.RegisterType((*UpdateValidatorAuthsProposal)(nil), "lbm.foundation.v1.UpdateValidatorAuthsProposal")
}

func init() {
	proto.RegisterFile("lbm/foundation/v1/foundation.proto", fileDescriptor_1980496a233f02f4)
}

var fileDescriptor_1980496a233f02f4 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x31, 0xaf, 0xd2, 0x50,
	0x18, 0xed, 0x95, 0x80, 0x70, 0x11, 0xd1, 0x86, 0xa1, 0x1a, 0x73, 0x5b, 0x1b, 0x87, 0x32, 0xd8,
	0x06, 0x4c, 0x1c, 0xdc, 0x20, 0xc6, 0x99, 0x34, 0xea, 0xe0, 0x42, 0x6e, 0x7b, 0xaf, 0xd0, 0x78,
	0xdb, 0xdb, 0xdc, 0x5e, 0x10, 0xff, 0x81, 0xa3, 0xa3, 0x26, 0x0e, 0x8c, 0xfe, 0x14, 0x46, 0x46,
	0xe3, 0x40, 0x4c, 0x59, 0xde, 0xcf, 0x78, 0x69, 0x2f, 0x3c, 0x4a, 0xde, 0x7b, 0xd3, 0xdb, 0x7a,
	0x4e, 0x4f, 0xcf, 0x39, 0xdf, 0xd7, 0x0f, 0xda, 0x2c, 0x88, 0xbd, 0xcf, 0x7c, 0x91, 0x10, 0x2c,
	0x23, 0x9e, 0x78, 0xcb, 0x41, 0x05, 0xb9, 0xa9, 0xe0, 0x92, 0xeb, 0x8f, 0x59, 0x10, 0xbb, 0x15,
	0x76, 0x39, 0x78, 0xda, 0x9b, 0xf1, 0x19, 0x2f, 0xdf, 0x7a, 0xc5, 0x93, 0x12, 0xda, 0x12, 0x36,
	0x26, 0x58, 0xe0, 0x38, 0xd3, 0x0d, 0x78, 0x9f, 0x26, 0x38, 0x60, 0x94, 0x18, 0xc0, 0x02, 0x4e,
	0xd3, 0x3f, 0x42, 0x7d, 0x02, 0x1f, 0x9e, 0xac, 0xa6, 0x12, 0xaf, 0x8c, 0x7b, 0x16, 0x70, 0x5a,
	0xe3, 0xfe, 0x66, 0x67, 0x6a, 0xff, 0x76, 0xe6, 0xf3, 0x59, 0x24, 0xe7, 0x8b, 0xc0, 0x0d, 0x79,
	0xec, 0xb1, 0x28, 0xa1, 0x1e, 0x0b, 0xe2, 0x97, 0x19, 0xf9, 0xe2, 0xc9, 0x6f, 0x29, 0xcd, 0xdc,
	0xb7, 0x34, 0xf4, 0x3b, 0x27, 0x83, 0xf7, 0x78, 0x65, 0x53, 0xd8, 0xf9, 0x88, 0x59, 0x44, 0xb0,
	0xe4, 0x62, 0xb4, 0x90, 0x73, 0xbd, 0x0f, 0x1f, 0xf1, 0x94, 0x8a, 0x02, 0x4f, 0x31, 0x21, 0x82,
	0x66, 0x59, 0xd9, 0xa2, 0xe5, 0x77, 0x8f, 0xfc, 0x48, 0xd1, 0x85, 0x34, 0x14, 0x54, 0x75, 0xc1,
	0x8c, 0xf1, 0xaf, 0x94, 0x94, 0x7d, 0x9a, 0x7e, 0xf7, 0xc8, 0x8f, 0x14, 0x6d, 0xff, 0x02, 0x10,
	0x7d, 0x48, 0x09, 0x96, 0xf4, 0xdd, 0x55, 0xbc, 0x9a, 0x76, 0x22, 0x78, 0xca, 0x33, 0xcc, 0xf4,
	0x1e, 0xac, 0xcb, 0x48, 0x32, 0x7a, 0x48, 0x53, 0x40, 0xb7, 0x60, 0x9b, 0xd0, 0x2c, 0x14, 0x51,
	0x5a, 0x7c, 0xa2, 0xc6, 0xf5, 0xab, 0x94, 0x3e, 0x80, 0x8d, 0xb4, 0x74, 0x32, 0x6a, 0x16, 0x70,
	0xda, 0xc3, 0x27, 0xee, 0xb5, 0x8d, 0xbb, 0x2a, 0xca, 0x3f, 0x08, 0xdf, 0x3c, 0xf8, 0xbe, 0x36,
	0xb5, 0x9f, 0x6b, 0x53, 0xbb, 0x58, 0x9b, 0x9a, 0xfd, 0x1b, 0xc0, 0x67, 0xaa, 0xdb, 0xd9, 0x26,
	0xee, 0xde, 0xec, 0x35, 0xac, 0xe3, 0xc2, 0xc8, 0xa8, 0x59, 0x35, 0xa7, 0x3d, 0xb4, 0x6e, 0x28,
	0x76, 0x96, 0xe8, 0x2b, 0xf9, 0x79, 0xbd, 0xf1, 0xf8, 0x4f, 0x8e, 0xc0, 0x26, 0x47, 0x60, 0x9b,
	0x23, 0xf0, 0x3f, 0x47, 0xe0, 0xc7, 0x1e, 0x69, 0xdb, 0x3d, 0xd2, 0xfe, 0xee, 0x91, 0xf6, 0xe9,
	0xc5, 0x6d, 0x7f, 0x7c, 0x55, 0x39, 0xc5, 0xa0, 0x51, 0x9e, 0xd8, 0xab, 0xcb, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x5d, 0xc1, 0x79, 0xfd, 0xb1, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	if !this.FoundationTax.Equal(that1.FoundationTax) {
		return false
	}
	return true
}
func (this *ValidatorAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorAuth)
	if !ok {
		that2, ok := that.(ValidatorAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OperatorAddress != that1.OperatorAddress {
		return false
	}
	if this.CreationAllowed != that1.CreationAllowed {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FoundationTax.Size()
		i -= size
		if _, err := m.FoundationTax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFoundation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationAllowed {
		i--
		if m.CreationAllowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintFoundation(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateFoundationParamsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFoundationParamsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFoundationParamsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFoundation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFoundation(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintFoundation(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateValidatorAuthsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateValidatorAuthsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateValidatorAuthsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Auths) > 0 {
		for iNdEx := len(m.Auths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFoundation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFoundation(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintFoundation(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFoundation(dAtA []byte, offset int, v uint64) int {
	offset -= sovFoundation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = m.FoundationTax.Size()
	n += 1 + l + sovFoundation(uint64(l))
	return n
}

func (m *ValidatorAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovFoundation(uint64(l))
	}
	if m.CreationAllowed {
		n += 2
	}
	return n
}

func (m *UpdateFoundationParamsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovFoundation(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFoundation(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovFoundation(uint64(l))
	}
	return n
}

func (m *UpdateValidatorAuthsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovFoundation(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFoundation(uint64(l))
	}
	if len(m.Auths) > 0 {
		for _, e := range m.Auths {
			l = e.Size()
			n += 1 + l + sovFoundation(uint64(l))
		}
	}
	return n
}

func sovFoundation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFoundation(x uint64) (n int) {
	return sovFoundation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoundation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoundationTax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoundation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoundation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FoundationTax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoundation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFoundation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoundation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoundation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoundation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreationAllowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFoundation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFoundation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFoundationParamsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoundation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFoundationParamsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFoundationParamsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoundation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoundation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoundation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoundation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoundation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoundation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoundation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFoundation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateValidatorAuthsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFoundation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateValidatorAuthsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateValidatorAuthsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoundation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoundation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFoundation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFoundation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFoundation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFoundation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auths = append(m.Auths, &ValidatorAuth{})
			if err := m.Auths[len(m.Auths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFoundation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFoundation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFoundation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFoundation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFoundation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFoundation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFoundation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFoundation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFoundation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFoundation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFoundation = fmt.Errorf("proto: unexpected end of group")
)
