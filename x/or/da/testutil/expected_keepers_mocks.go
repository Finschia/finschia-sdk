// Code generated by MockGen. DO NOT EDIT.
// Source: x/or/da/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/Finschia/finschia-sdk/types"
	types0 "github.com/Finschia/finschia-sdk/x/auth/types"
	types1 "github.com/Finschia/finschia-sdk/x/or/da/types"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(ctx types.Context, addr types.AccAddress) types0.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, addr)
	ret0, _ := ret[0].(types0.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), ctx, addr)
}

// MockRollupKeeper is a mock of RollupKeeper interface.
type MockRollupKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockRollupKeeperMockRecorder
}

// MockRollupKeeperMockRecorder is the mock recorder for MockRollupKeeper.
type MockRollupKeeperMockRecorder struct {
	mock *MockRollupKeeper
}

// NewMockRollupKeeper creates a new mock instance.
func NewMockRollupKeeper(ctrl *gomock.Controller) *MockRollupKeeper {
	mock := &MockRollupKeeper{ctrl: ctrl}
	mock.recorder = &MockRollupKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRollupKeeper) EXPECT() *MockRollupKeeperMockRecorder {
	return m.recorder
}

// GetRegisteredRollups mocks base method.
func (m *MockRollupKeeper) GetRegisteredRollups(ctx types.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredRollups", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRegisteredRollups indicates an expected call of GetRegisteredRollups.
func (mr *MockRollupKeeperMockRecorder) GetRegisteredRollups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredRollups", reflect.TypeOf((*MockRollupKeeper)(nil).GetRegisteredRollups), ctx)
}

// GetRollupInfo mocks base method.
func (m *MockRollupKeeper) GetRollupInfo(ctx types.Context, rollupID string) (types1.RollupInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRollupInfo", ctx, rollupID)
	ret0, _ := ret[0].(types1.RollupInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRollupInfo indicates an expected call of GetRollupInfo.
func (mr *MockRollupKeeperMockRecorder) GetRollupInfo(ctx, rollupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollupInfo", reflect.TypeOf((*MockRollupKeeper)(nil).GetRollupInfo), ctx, rollupID)
}
