// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: finschia/or/da/v1/da.proto

package types

import (
	fmt "fmt"
	github_com_Finschia_finschia_sdk_types "github.com/Finschia/finschia-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CompressionOption int32

const (
	// COMPRESSION_OPTION_UNSPECIFIED defines a no-op compress option.
	OptionEmpty CompressionOption = 0
	// Go standard library fo zlib compression (RFC 1950).
	OptionZLIB CompressionOption = 1
	// Zstandard is a fast compression algorithm, providing high compression ratios.
	// It also offers a special mode for small data, called dictionary compression.
	OptionZSTD CompressionOption = 2
)

var CompressionOption_name = map[int32]string{
	0: "COMPRESSION_OPTION_UNSPECIFIED",
	1: "COMPRESSION_OPTION_ZLIB",
	2: "COMPRESSION_OPTION_ZSTD",
}

var CompressionOption_value = map[string]int32{
	"COMPRESSION_OPTION_UNSPECIFIED": 0,
	"COMPRESSION_OPTION_ZLIB":        1,
	"COMPRESSION_OPTION_ZSTD":        2,
}

func (x CompressionOption) String() string {
	return proto.EnumName(CompressionOption_name, int32(x))
}

func (CompressionOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5f98d06b06a65392, []int{0}
}

// BatchContext denotes a range of transactions that belong the same batch.
// It is used to compress shared fields that would otherwise be repeated for each transaction.
type CCBatchContext struct {
	// num_sequenced_txs specifies the number of sequencer txs included in
	// the batch.
	NumSequencedTxs uint64 `protobuf:"varint,1,opt,name=num_sequenced_txs,json=numSequencedTxs,proto3" json:"num_sequenced_txs,omitempty"`
	// num_subsequent_queue_txs specifies the number of queued txs included in
	// the batch
	NumSubsequentQueueTxs uint64 `protobuf:"varint,2,opt,name=num_subsequent_queue_txs,json=numSubsequentQueueTxs,proto3" json:"num_subsequent_queue_txs,omitempty"`
	// timestamp is the L2 block unix timestamp of the batch.
	Timestamp time.Time `protobuf:"bytes,3,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// blockNumber is the L1 BlockNumber of the batch.
	L1Height uint64 `protobuf:"varint,4,opt,name=l1_height,json=l1Height,proto3" json:"l1_height,omitempty"`
}

func (m *CCBatchContext) Reset()         { *m = CCBatchContext{} }
func (m *CCBatchContext) String() string { return proto.CompactTextString(m) }
func (*CCBatchContext) ProtoMessage()    {}
func (*CCBatchContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f98d06b06a65392, []int{0}
}
func (m *CCBatchContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCBatchContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCBatchContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCBatchContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCBatchContext.Merge(m, src)
}
func (m *CCBatchContext) XXX_Size() int {
	return m.Size()
}
func (m *CCBatchContext) XXX_DiscardUnknown() {
	xxx_messageInfo_CCBatchContext.DiscardUnknown(m)
}

var xxx_messageInfo_CCBatchContext proto.InternalMessageInfo

func (m *CCBatchContext) GetNumSequencedTxs() uint64 {
	if m != nil {
		return m.NumSequencedTxs
	}
	return 0
}

func (m *CCBatchContext) GetNumSubsequentQueueTxs() uint64 {
	if m != nil {
		return m.NumSubsequentQueueTxs
	}
	return 0
}

func (m *CCBatchContext) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *CCBatchContext) GetL1Height() uint64 {
	if m != nil {
		return m.L1Height
	}
	return 0
}

type CCBatchElement struct {
	// timestamp is the L2 block unix timestamp of the batch.
	// SEQUENCER TX ONLY
	Timestamp time.Time `protobuf:"bytes,1,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// blockNumber is the L1 BlockNumber of the batch.
	// SEQUENCER TX ONLY
	L1Height uint64 `protobuf:"varint,2,opt,name=l1_height,json=l1Height,proto3" json:"l1_height,omitempty"`
	// SEQUENCER TX ONLY
	Txraw []byte `protobuf:"bytes,3,opt,name=txraw,proto3" json:"txraw,omitempty"`
	// QUEUED TX ONLY
	QueueIndex uint64 `protobuf:"varint,4,opt,name=queue_index,json=queueIndex,proto3" json:"queue_index,omitempty"`
	// l2_height is required when we reconstruct the L2 chain without relying on the L2 sequencer.
	L2Height uint64 `protobuf:"varint,5,opt,name=l2_height,json=l2Height,proto3" json:"l2_height,omitempty"`
}

func (m *CCBatchElement) Reset()         { *m = CCBatchElement{} }
func (m *CCBatchElement) String() string { return proto.CompactTextString(m) }
func (*CCBatchElement) ProtoMessage()    {}
func (*CCBatchElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f98d06b06a65392, []int{1}
}
func (m *CCBatchElement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCBatchElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCBatchElement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCBatchElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCBatchElement.Merge(m, src)
}
func (m *CCBatchElement) XXX_Size() int {
	return m.Size()
}
func (m *CCBatchElement) XXX_DiscardUnknown() {
	xxx_messageInfo_CCBatchElement.DiscardUnknown(m)
}

var xxx_messageInfo_CCBatchElement proto.InternalMessageInfo

func (m *CCBatchElement) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *CCBatchElement) GetL1Height() uint64 {
	if m != nil {
		return m.L1Height
	}
	return 0
}

func (m *CCBatchElement) GetTxraw() []byte {
	if m != nil {
		return m.Txraw
	}
	return nil
}

func (m *CCBatchElement) GetQueueIndex() uint64 {
	if m != nil {
		return m.QueueIndex
	}
	return 0
}

func (m *CCBatchElement) GetL2Height() uint64 {
	if m != nil {
		return m.L2Height
	}
	return 0
}

// CCBatch is used  when the sequencer submits.
// Assuming the block and timestamp criteria for sequencer txs are
// respected within each group, the following are examples of groupings:
//  - [s]         // sequencer can exist by itself
//  - [q]         // ququed tx can exist by itself
//  - [s] [s]     // differing sequencer tx timestamp/blocknumber
//  - [s q] [s]   // sequencer tx must precede queued tx in group
//  - [q] [q s]   // INVALID: consecutive queued txs are split
//  - [q q] [s]   // correct split for preceding case
//  - [s q] [s q] // alternating sequencer tx interleaved with queued
type CCBatch struct {
	// previous total batch elements.
	ShouldStartAtElement github_com_Finschia_finschia_sdk_types.Int `protobuf:"bytes,1,opt,name=should_start_at_element,json=shouldStartAtElement,proto3,customtype=github.com/Finschia/finschia-sdk/types.Int" json:"should_start_at_element"`
	BatchContexts        []*CCBatchContext                          `protobuf:"bytes,2,rep,name=batch_contexts,json=batchContexts,proto3" json:"batch_contexts,omitempty"`
	Elements             []*CCBatchElement                          `protobuf:"bytes,3,rep,name=elements,proto3" json:"elements,omitempty"`
	// compression is the compression algorithm used for the batch.
	Compression CompressionOption `protobuf:"varint,4,opt,name=compression,proto3,enum=finschia.or.da.v1.CompressionOption" json:"compression,omitempty"`
}

func (m *CCBatch) Reset()         { *m = CCBatch{} }
func (m *CCBatch) String() string { return proto.CompactTextString(m) }
func (*CCBatch) ProtoMessage()    {}
func (*CCBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f98d06b06a65392, []int{2}
}
func (m *CCBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCBatch.Merge(m, src)
}
func (m *CCBatch) XXX_Size() int {
	return m.Size()
}
func (m *CCBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_CCBatch.DiscardUnknown(m)
}

var xxx_messageInfo_CCBatch proto.InternalMessageInfo

func (m *CCBatch) GetBatchContexts() []*CCBatchContext {
	if m != nil {
		return m.BatchContexts
	}
	return nil
}

func (m *CCBatch) GetElements() []*CCBatchElement {
	if m != nil {
		return m.Elements
	}
	return nil
}

func (m *CCBatch) GetCompression() CompressionOption {
	if m != nil {
		return m.Compression
	}
	return OptionEmpty
}

// CCRef is a data type that forms an element of Canonical Transaction Chain.
type CCRef struct {
	// Reference for accessing batch data.
	Header *BatchHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *CCRef) Reset()         { *m = CCRef{} }
func (m *CCRef) String() string { return proto.CompactTextString(m) }
func (*CCRef) ProtoMessage()    {}
func (*CCRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f98d06b06a65392, []int{3}
}
func (m *CCRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCRef.Merge(m, src)
}
func (m *CCRef) XXX_Size() int {
	return m.Size()
}
func (m *CCRef) XXX_DiscardUnknown() {
	xxx_messageInfo_CCRef.DiscardUnknown(m)
}

var xxx_messageInfo_CCRef proto.InternalMessageInfo

func (m *CCRef) GetHeader() *BatchHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// L1toL2Queue is a queued tx for L2 batch.
// Sequencer must process this transaction in time.
type L1ToL2Queue struct {
	// timestamp is the L1 unix timestamp of the batch.
	// It is set when the type of tx is L1toL2
	L1Timestamp time.Time `protobuf:"bytes,1,opt,name=l1_timestamp,json=l1Timestamp,proto3,stdtime" json:"l1_timestamp"`
	// blockNumber is the L1 BlockNumber of the batch.
	L1Height uint64 `protobuf:"varint,2,opt,name=l1_height,json=l1Height,proto3" json:"l1_height,omitempty"`
	Txraw    []byte `protobuf:"bytes,3,opt,name=txraw,proto3" json:"txraw,omitempty"`
}

func (m *L1ToL2Queue) Reset()         { *m = L1ToL2Queue{} }
func (m *L1ToL2Queue) String() string { return proto.CompactTextString(m) }
func (*L1ToL2Queue) ProtoMessage()    {}
func (*L1ToL2Queue) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f98d06b06a65392, []int{4}
}
func (m *L1ToL2Queue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *L1ToL2Queue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_L1ToL2Queue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *L1ToL2Queue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L1ToL2Queue.Merge(m, src)
}
func (m *L1ToL2Queue) XXX_Size() int {
	return m.Size()
}
func (m *L1ToL2Queue) XXX_DiscardUnknown() {
	xxx_messageInfo_L1ToL2Queue.DiscardUnknown(m)
}

var xxx_messageInfo_L1ToL2Queue proto.InternalMessageInfo

func (m *L1ToL2Queue) GetL1Timestamp() time.Time {
	if m != nil {
		return m.L1Timestamp
	}
	return time.Time{}
}

func (m *L1ToL2Queue) GetL1Height() uint64 {
	if m != nil {
		return m.L1Height
	}
	return 0
}

func (m *L1ToL2Queue) GetTxraw() []byte {
	if m != nil {
		return m.Txraw
	}
	return nil
}

// Proposer use SCCBatch when they submit.
type SCCBatch struct {
	// previous total batch elements.
	ShouldStartAtElement github_com_Finschia_finschia_sdk_types.Int `protobuf:"bytes,1,opt,name=should_start_at_element,json=shouldStartAtElement,proto3,customtype=github.com/Finschia/finschia-sdk/types.Int" json:"should_start_at_element"`
	// IntermediateStateRoots for a specific range of CCs.
	IntermediateStateRoots [][]byte `protobuf:"bytes,2,rep,name=IntermediateStateRoots,proto3" json:"IntermediateStateRoots,omitempty"`
}

func (m *SCCBatch) Reset()         { *m = SCCBatch{} }
func (m *SCCBatch) String() string { return proto.CompactTextString(m) }
func (*SCCBatch) ProtoMessage()    {}
func (*SCCBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f98d06b06a65392, []int{5}
}
func (m *SCCBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCCBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SCCBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SCCBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCCBatch.Merge(m, src)
}
func (m *SCCBatch) XXX_Size() int {
	return m.Size()
}
func (m *SCCBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_SCCBatch.DiscardUnknown(m)
}

var xxx_messageInfo_SCCBatch proto.InternalMessageInfo

func (m *SCCBatch) GetIntermediateStateRoots() [][]byte {
	if m != nil {
		return m.IntermediateStateRoots
	}
	return nil
}

// CCRef is a data type that forms an element of Canonical Transaction Chain.
type SCCRef struct {
	// Reference for accessing batch data.
	Header *BatchHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *SCCRef) Reset()         { *m = SCCRef{} }
func (m *SCCRef) String() string { return proto.CompactTextString(m) }
func (*SCCRef) ProtoMessage()    {}
func (*SCCRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f98d06b06a65392, []int{6}
}
func (m *SCCRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCCRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SCCRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SCCRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCCRef.Merge(m, src)
}
func (m *SCCRef) XXX_Size() int {
	return m.Size()
}
func (m *SCCRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SCCRef.DiscardUnknown(m)
}

var xxx_messageInfo_SCCRef proto.InternalMessageInfo

func (m *SCCRef) GetHeader() *BatchHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type BatchHeader struct {
	// Reference for accessing batch data.
	TxHash []byte `protobuf:"bytes,1,opt,name=txhash,proto3" json:"txhash,omitempty"`
	// Total number of elements submitted.
	TotalElements github_com_Finschia_finschia_sdk_types.Int `protobuf:"bytes,2,opt,name=total_elements,json=totalElements,proto3,customtype=github.com/Finschia/finschia-sdk/types.Int" json:"total_elements"`
	// Number of elements in the batch.
	BatchSize  uint64 `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	BatchIndex uint64 `protobuf:"varint,4,opt,name=batch_index,json=batchIndex,proto3" json:"batch_index,omitempty"`
	// CC Batch : previous block hash.
	// SCC Batch : Merkle Root of IntermediateStateRoots.
	BatchRoot []byte `protobuf:"bytes,5,opt,name=batch_root,json=batchRoot,proto3" json:"batch_root,omitempty"`
}

func (m *BatchHeader) Reset()         { *m = BatchHeader{} }
func (m *BatchHeader) String() string { return proto.CompactTextString(m) }
func (*BatchHeader) ProtoMessage()    {}
func (*BatchHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f98d06b06a65392, []int{7}
}
func (m *BatchHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchHeader.Merge(m, src)
}
func (m *BatchHeader) XXX_Size() int {
	return m.Size()
}
func (m *BatchHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BatchHeader proto.InternalMessageInfo

func (m *BatchHeader) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *BatchHeader) GetBatchSize() uint64 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *BatchHeader) GetBatchIndex() uint64 {
	if m != nil {
		return m.BatchIndex
	}
	return 0
}

func (m *BatchHeader) GetBatchRoot() []byte {
	if m != nil {
		return m.BatchRoot
	}
	return nil
}

// BatchChainState is the state of target batch chain.
type CCState struct {
	// Assumed to contain all contiguous batches between base and height (inclusive).
	Base   uint64 `protobuf:"varint,1,opt,name=base,proto3" json:"base,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// The name of rollup chain (use as key).
	Name []byte `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The ratio between the cost of gas on L1 and L2.
	// This is a positive integer.
	L1ToL2GasRatio uint64 `protobuf:"varint,4,opt,name=l1_to_l2_gas_ratio,json=l1ToL2GasRatio,proto3" json:"l1_to_l2_gas_ratio,omitempty"`
	// Index of the next queue element.
	NextQueueIndex uint64 `protobuf:"varint,5,opt,name=next_queue_index,json=nextQueueIndex,proto3" json:"next_queue_index,omitempty"`
	// The latest batch timestamp.
	L1Timestamp time.Time `protobuf:"bytes,6,opt,name=l1_timestamp,json=l1Timestamp,proto3,stdtime" json:"l1_timestamp"`
	// The latest batch L1 blockNumber.
	L1Height uint64 `protobuf:"varint,7,opt,name=l1_height,json=l1Height,proto3" json:"l1_height,omitempty"`
}

func (m *CCState) Reset()         { *m = CCState{} }
func (m *CCState) String() string { return proto.CompactTextString(m) }
func (*CCState) ProtoMessage()    {}
func (*CCState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f98d06b06a65392, []int{8}
}
func (m *CCState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CCState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CCState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CCState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CCState.Merge(m, src)
}
func (m *CCState) XXX_Size() int {
	return m.Size()
}
func (m *CCState) XXX_DiscardUnknown() {
	xxx_messageInfo_CCState.DiscardUnknown(m)
}

var xxx_messageInfo_CCState proto.InternalMessageInfo

func (m *CCState) GetBase() uint64 {
	if m != nil {
		return m.Base
	}
	return 0
}

func (m *CCState) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CCState) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CCState) GetL1ToL2GasRatio() uint64 {
	if m != nil {
		return m.L1ToL2GasRatio
	}
	return 0
}

func (m *CCState) GetNextQueueIndex() uint64 {
	if m != nil {
		return m.NextQueueIndex
	}
	return 0
}

func (m *CCState) GetL1Timestamp() time.Time {
	if m != nil {
		return m.L1Timestamp
	}
	return time.Time{}
}

func (m *CCState) GetL1Height() uint64 {
	if m != nil {
		return m.L1Height
	}
	return 0
}

// BatchChainState is the state of target batch chain.
type SCCState struct {
	// Assumed to contain all contiguous batches between base and height (inclusive).
	Base   uint64 `protobuf:"varint,1,opt,name=base,proto3" json:"base,omitempty"`
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// The name of rollup chain (use as key).
	Name []byte `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The latest batch timestamp when the sequencer submits.
	LastSequencerSubmit time.Time `protobuf:"bytes,4,opt,name=last_sequencer_submit,json=lastSequencerSubmit,proto3,stdtime" json:"last_sequencer_submit"`
}

func (m *SCCState) Reset()         { *m = SCCState{} }
func (m *SCCState) String() string { return proto.CompactTextString(m) }
func (*SCCState) ProtoMessage()    {}
func (*SCCState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f98d06b06a65392, []int{9}
}
func (m *SCCState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCCState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SCCState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SCCState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCCState.Merge(m, src)
}
func (m *SCCState) XXX_Size() int {
	return m.Size()
}
func (m *SCCState) XXX_DiscardUnknown() {
	xxx_messageInfo_SCCState.DiscardUnknown(m)
}

var xxx_messageInfo_SCCState proto.InternalMessageInfo

func (m *SCCState) GetBase() uint64 {
	if m != nil {
		return m.Base
	}
	return 0
}

func (m *SCCState) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SCCState) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SCCState) GetLastSequencerSubmit() time.Time {
	if m != nil {
		return m.LastSequencerSubmit
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("finschia.or.da.v1.CompressionOption", CompressionOption_name, CompressionOption_value)
	proto.RegisterType((*CCBatchContext)(nil), "finschia.or.da.v1.CCBatchContext")
	proto.RegisterType((*CCBatchElement)(nil), "finschia.or.da.v1.CCBatchElement")
	proto.RegisterType((*CCBatch)(nil), "finschia.or.da.v1.CCBatch")
	proto.RegisterType((*CCRef)(nil), "finschia.or.da.v1.CCRef")
	proto.RegisterType((*L1ToL2Queue)(nil), "finschia.or.da.v1.L1toL2Queue")
	proto.RegisterType((*SCCBatch)(nil), "finschia.or.da.v1.SCCBatch")
	proto.RegisterType((*SCCRef)(nil), "finschia.or.da.v1.SCCRef")
	proto.RegisterType((*BatchHeader)(nil), "finschia.or.da.v1.BatchHeader")
	proto.RegisterType((*CCState)(nil), "finschia.or.da.v1.CCState")
	proto.RegisterType((*SCCState)(nil), "finschia.or.da.v1.SCCState")
}

func init() { proto.RegisterFile("finschia/or/da/v1/da.proto", fileDescriptor_5f98d06b06a65392) }

var fileDescriptor_5f98d06b06a65392 = []byte{
	// 921 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x3a, 0x8e, 0x9b, 0x3c, 0xbb, 0x6e, 0x32, 0xa4, 0xad, 0x65, 0xc4, 0x3a, 0x58, 0x1c,
	0xa2, 0x20, 0xd6, 0xf2, 0x56, 0x2a, 0x27, 0x04, 0xd8, 0x71, 0x6a, 0x4b, 0xa1, 0x49, 0x77, 0x8d,
	0x04, 0xbd, 0xac, 0xc6, 0xde, 0x89, 0x77, 0xc5, 0xee, 0x8e, 0xbb, 0x33, 0x5b, 0xb6, 0xbd, 0x23,
	0x41, 0x4f, 0xfd, 0x02, 0x3d, 0xc1, 0x81, 0x0b, 0x1f, 0x03, 0xa9, 0xc7, 0x9e, 0x10, 0xe2, 0x10,
	0x50, 0x72, 0xe4, 0x4b, 0xa0, 0x99, 0xd9, 0x75, 0xe2, 0x26, 0x55, 0x51, 0x1b, 0xa9, 0x27, 0xcf,
	0xbc, 0xf7, 0x7b, 0x7f, 0xf7, 0xf7, 0xde, 0x18, 0x1a, 0x87, 0x7e, 0xc4, 0x26, 0x9e, 0x8f, 0xdb,
	0x34, 0x6e, 0xbb, 0xb8, 0xfd, 0xb0, 0xd3, 0x76, 0xb1, 0x31, 0x8b, 0x29, 0xa7, 0x68, 0x3d, 0xd7,
	0x19, 0x34, 0x36, 0x5c, 0x6c, 0x3c, 0xec, 0x34, 0x36, 0xa6, 0x74, 0x4a, 0xa5, 0xb6, 0x2d, 0x4e,
	0x0a, 0xd8, 0x68, 0x4e, 0x29, 0x9d, 0x06, 0xa4, 0x2d, 0x6f, 0xe3, 0xe4, 0xb0, 0xcd, 0xfd, 0x90,
	0x30, 0x8e, 0xc3, 0x59, 0x06, 0xd0, 0xcf, 0x47, 0x99, 0xe1, 0x18, 0x87, 0x4c, 0xe9, 0x5b, 0x7f,
	0x68, 0x50, 0xeb, 0xf5, 0xba, 0x98, 0x4f, 0xbc, 0x1e, 0x8d, 0x38, 0x49, 0x39, 0xda, 0x86, 0xf5,
	0x28, 0x09, 0x1d, 0x46, 0x1e, 0x24, 0x24, 0x9a, 0x10, 0xd7, 0xe1, 0x29, 0xab, 0x6b, 0x9b, 0xda,
	0x56, 0xc9, 0xba, 0x16, 0x25, 0xa1, 0x9d, 0xcb, 0x47, 0x29, 0x43, 0x9f, 0x42, 0x5d, 0x62, 0x93,
	0xb1, 0x82, 0x73, 0xe7, 0x41, 0x42, 0x12, 0x22, 0x4d, 0x8a, 0xd2, 0xe4, 0xba, 0x30, 0x99, 0xab,
	0xef, 0x09, 0xad, 0x30, 0xec, 0xc2, 0xea, 0x3c, 0xd5, 0xfa, 0xd2, 0xa6, 0xb6, 0x55, 0x31, 0x1b,
	0x86, 0x2a, 0xc6, 0xc8, 0x8b, 0x31, 0x46, 0x39, 0xa2, 0xbb, 0xf2, 0xfc, 0xa8, 0x59, 0x78, 0xfa,
	0x77, 0x53, 0xb3, 0x4e, 0xcd, 0xd0, 0xfb, 0xb0, 0x1a, 0x74, 0x1c, 0x8f, 0xf8, 0x53, 0x8f, 0xd7,
	0x4b, 0x32, 0xda, 0x4a, 0xd0, 0x19, 0xc8, 0x7b, 0xeb, 0xf7, 0xd3, 0xc2, 0xfa, 0x01, 0x09, 0x49,
	0xc4, 0x17, 0x63, 0x6a, 0x97, 0x10, 0xb3, 0xb8, 0x18, 0x13, 0x6d, 0xc0, 0x32, 0x4f, 0x63, 0xfc,
	0xbd, 0x2c, 0xa8, 0x6a, 0xa9, 0x0b, 0x6a, 0x42, 0x45, 0x35, 0xc5, 0x8f, 0x5c, 0x92, 0x66, 0x89,
	0x82, 0x14, 0x0d, 0x85, 0x44, 0xfa, 0x34, 0x73, 0x9f, 0xcb, 0x99, 0x4f, 0x33, 0xaf, 0xa3, 0x08,
	0x57, 0xb2, 0x3a, 0x90, 0x0f, 0x37, 0x99, 0x47, 0x93, 0xc0, 0x75, 0x18, 0xc7, 0x31, 0x77, 0x30,
	0x77, 0x88, 0xaa, 0x4d, 0x96, 0xb3, 0xda, 0x35, 0x45, 0xca, 0x7f, 0x1d, 0x35, 0xb7, 0xa7, 0x3e,
	0xf7, 0x92, 0xb1, 0x31, 0xa1, 0x61, 0x7b, 0x37, 0x27, 0x40, 0xce, 0x84, 0x4f, 0x98, 0xfb, 0x5d,
	0x9b, 0x3f, 0x9a, 0x11, 0x66, 0x0c, 0x23, 0x6e, 0x6d, 0x28, 0x97, 0xb6, 0xf0, 0xf8, 0x25, 0xcf,
	0x7b, 0x35, 0x80, 0xda, 0x58, 0xc4, 0x74, 0x26, 0x8a, 0x15, 0xe2, 0x73, 0x2e, 0x6d, 0x55, 0xcc,
	0x0f, 0x8d, 0x73, 0xd4, 0x34, 0x16, 0xf9, 0x63, 0x5d, 0x1d, 0x9f, 0xb9, 0x31, 0xf4, 0x19, 0xac,
	0x64, 0x49, 0xb2, 0xfa, 0xd2, 0xeb, 0x7c, 0x64, 0xe1, 0xad, 0xb9, 0x09, 0xda, 0x85, 0xca, 0x84,
	0x86, 0xb3, 0x98, 0x30, 0xe6, 0xd3, 0x48, 0x76, 0xaf, 0x66, 0x7e, 0x74, 0x91, 0x87, 0x53, 0xd4,
	0xfe, 0x8c, 0xfb, 0x34, 0xb2, 0xce, 0x1a, 0xb6, 0x3e, 0x87, 0xe5, 0x5e, 0xcf, 0x22, 0x87, 0xe8,
	0x36, 0x94, 0x3d, 0x82, 0x5d, 0x12, 0x67, 0x14, 0xd0, 0x2f, 0xf0, 0x25, 0x73, 0x19, 0x48, 0x94,
	0x95, 0xa1, 0x5b, 0x3f, 0x69, 0x50, 0xd9, 0xeb, 0x70, 0xba, 0x67, 0x4a, 0x12, 0xa3, 0x3b, 0x50,
	0x0d, 0x3a, 0xce, 0x9b, 0x11, 0xaa, 0x12, 0x74, 0x46, 0x6f, 0x41, 0xa9, 0xd6, 0x6f, 0x1a, 0xac,
	0xd8, 0xef, 0x80, 0x15, 0xb7, 0xe1, 0xc6, 0x30, 0xe2, 0x24, 0x0e, 0x89, 0xeb, 0x63, 0x4e, 0x6c,
	0x8e, 0x39, 0xb1, 0x28, 0xcd, 0xd8, 0x51, 0xb5, 0x5e, 0xa1, 0x6d, 0x7d, 0x01, 0x65, 0xfb, 0xed,
	0xba, 0xff, 0xaf, 0x06, 0x95, 0x33, 0x72, 0xd4, 0x82, 0x32, 0x4f, 0x3d, 0xcc, 0x3c, 0xe9, 0xa7,
	0xda, 0x85, 0xe3, 0xa3, 0x66, 0x79, 0x94, 0x0e, 0x30, 0xf3, 0xac, 0x4c, 0x83, 0xbe, 0x85, 0x1a,
	0xa7, 0x1c, 0x07, 0xce, 0x9c, 0x7f, 0xc5, 0x37, 0xee, 0xc7, 0x55, 0xe9, 0xa9, 0x9f, 0xb3, 0xf2,
	0x03, 0x00, 0x35, 0x1e, 0xcc, 0x7f, 0x4c, 0xe4, 0xb7, 0x29, 0x59, 0xab, 0x52, 0x62, 0xfb, 0x8f,
	0x89, 0x18, 0x79, 0xa5, 0x5e, 0x18, 0x79, 0x29, 0x52, 0x23, 0x3f, 0xb7, 0x8f, 0x29, 0x55, 0x33,
	0x5f, 0xcd, 0xec, 0x45, 0xc3, 0x5a, 0x3f, 0xc8, 0xa1, 0x97, 0x0d, 0x44, 0x08, 0x4a, 0x63, 0xcc,
	0x48, 0xb6, 0x81, 0xe5, 0x19, 0xdd, 0x10, 0x5d, 0x3c, 0xc3, 0x97, 0xec, 0x26, 0xb0, 0x11, 0x0e,
	0x49, 0x46, 0x16, 0x79, 0x46, 0xdb, 0x80, 0x04, 0x4f, 0xa9, 0x13, 0x98, 0xce, 0x14, 0x33, 0x27,
	0xc6, 0xdc, 0xa7, 0x59, 0x4a, 0xb5, 0xa0, 0x33, 0xa2, 0x7b, 0xe6, 0x1d, 0xcc, 0x2c, 0x21, 0x45,
	0x5b, 0xb0, 0x16, 0x91, 0x34, 0x5f, 0xe2, 0x2a, 0x79, 0xb5, 0x90, 0x6a, 0x42, 0x7e, 0xef, 0x74,
	0x67, 0xbd, 0xcc, 0xfe, 0xf2, 0xa5, 0xb0, 0xff, 0xca, 0x4b, 0x4b, 0xfc, 0x17, 0xc5, 0xf3, 0xcb,
	0x69, 0xc4, 0x37, 0x70, 0x3d, 0xc0, 0x8c, 0xcf, 0x1f, 0xb6, 0x58, 0x3c, 0x5b, 0xa1, 0xaf, 0x9e,
	0x8e, 0xff, 0x9b, 0xfb, 0x7b, 0xc2, 0x45, 0xfe, 0x04, 0xc6, 0xb6, 0x74, 0xb0, 0xfd, 0xab, 0x06,
	0xeb, 0xe7, 0xd6, 0x0f, 0xba, 0x05, 0x7a, 0x6f, 0xff, 0xab, 0x03, 0xab, 0x6f, 0xdb, 0xc3, 0xfd,
	0xbb, 0xce, 0xfe, 0xc1, 0x48, 0xfc, 0x7c, 0x7d, 0xd7, 0x3e, 0xe8, 0xf7, 0x86, 0xbb, 0xc3, 0xfe,
	0xce, 0x5a, 0xa1, 0x71, 0xed, 0xc9, 0xb3, 0xcd, 0x8a, 0xc2, 0xf7, 0xc3, 0x19, 0x7f, 0x84, 0x3e,
	0x86, 0x9b, 0x17, 0x18, 0xdd, 0xdf, 0x1b, 0x76, 0xd7, 0xb4, 0x46, 0xed, 0xc9, 0xb3, 0x4d, 0x50,
	0x68, 0x21, 0x79, 0x15, 0xd8, 0x1e, 0xed, 0xac, 0x15, 0x17, 0xc0, 0xf6, 0x68, 0xa7, 0x51, 0xfa,
	0xf1, 0x67, 0xbd, 0xd0, 0x1d, 0x3c, 0x3f, 0xd6, 0xb5, 0x17, 0xc7, 0xba, 0xf6, 0xcf, 0xb1, 0xae,
	0x3d, 0x3d, 0xd1, 0x0b, 0x2f, 0x4e, 0xf4, 0xc2, 0x9f, 0x27, 0x7a, 0xe1, 0xbe, 0xf1, 0xda, 0x69,
	0x48, 0xb3, 0xff, 0x10, 0x72, 0x2a, 0xc6, 0x65, 0xd9, 0xa7, 0x5b, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x5d, 0x8f, 0xd1, 0xbd, 0xc8, 0x08, 0x00, 0x00,
}

func (m *CCBatchContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCBatchContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCBatchContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L1Height != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.L1Height))
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintDa(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.NumSubsequentQueueTxs != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.NumSubsequentQueueTxs))
		i--
		dAtA[i] = 0x10
	}
	if m.NumSequencedTxs != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.NumSequencedTxs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CCBatchElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCBatchElement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCBatchElement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L2Height != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.L2Height))
		i--
		dAtA[i] = 0x28
	}
	if m.QueueIndex != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.QueueIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Txraw) > 0 {
		i -= len(m.Txraw)
		copy(dAtA[i:], m.Txraw)
		i = encodeVarintDa(dAtA, i, uint64(len(m.Txraw)))
		i--
		dAtA[i] = 0x1a
	}
	if m.L1Height != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.L1Height))
		i--
		dAtA[i] = 0x10
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintDa(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CCBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Compression != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.Compression))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Elements) > 0 {
		for iNdEx := len(m.Elements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Elements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDa(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BatchContexts) > 0 {
		for iNdEx := len(m.BatchContexts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchContexts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDa(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.ShouldStartAtElement.Size()
		i -= size
		if _, err := m.ShouldStartAtElement.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDa(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CCRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDa(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *L1ToL2Queue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L1ToL2Queue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *L1ToL2Queue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txraw) > 0 {
		i -= len(m.Txraw)
		copy(dAtA[i:], m.Txraw)
		i = encodeVarintDa(dAtA, i, uint64(len(m.Txraw)))
		i--
		dAtA[i] = 0x1a
	}
	if m.L1Height != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.L1Height))
		i--
		dAtA[i] = 0x10
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.L1Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.L1Timestamp):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintDa(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SCCBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCCBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SCCBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IntermediateStateRoots) > 0 {
		for iNdEx := len(m.IntermediateStateRoots) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IntermediateStateRoots[iNdEx])
			copy(dAtA[i:], m.IntermediateStateRoots[iNdEx])
			i = encodeVarintDa(dAtA, i, uint64(len(m.IntermediateStateRoots[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.ShouldStartAtElement.Size()
		i -= size
		if _, err := m.ShouldStartAtElement.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDa(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SCCRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCCRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SCCRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDa(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchRoot) > 0 {
		i -= len(m.BatchRoot)
		copy(dAtA[i:], m.BatchRoot)
		i = encodeVarintDa(dAtA, i, uint64(len(m.BatchRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BatchIndex != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.BatchIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.BatchSize != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.BatchSize))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.TotalElements.Size()
		i -= size
		if _, err := m.TotalElements.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDa(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintDa(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CCState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CCState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L1Height != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.L1Height))
		i--
		dAtA[i] = 0x38
	}
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.L1Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.L1Timestamp):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintDa(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x32
	if m.NextQueueIndex != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.NextQueueIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.L1ToL2GasRatio != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.L1ToL2GasRatio))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDa(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.Base))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SCCState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCCState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SCCState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastSequencerSubmit, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastSequencerSubmit):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintDa(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x22
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDa(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != 0 {
		i = encodeVarintDa(dAtA, i, uint64(m.Base))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDa(dAtA []byte, offset int, v uint64) int {
	offset -= sovDa(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CCBatchContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumSequencedTxs != 0 {
		n += 1 + sovDa(uint64(m.NumSequencedTxs))
	}
	if m.NumSubsequentQueueTxs != 0 {
		n += 1 + sovDa(uint64(m.NumSubsequentQueueTxs))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovDa(uint64(l))
	if m.L1Height != 0 {
		n += 1 + sovDa(uint64(m.L1Height))
	}
	return n
}

func (m *CCBatchElement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovDa(uint64(l))
	if m.L1Height != 0 {
		n += 1 + sovDa(uint64(m.L1Height))
	}
	l = len(m.Txraw)
	if l > 0 {
		n += 1 + l + sovDa(uint64(l))
	}
	if m.QueueIndex != 0 {
		n += 1 + sovDa(uint64(m.QueueIndex))
	}
	if m.L2Height != 0 {
		n += 1 + sovDa(uint64(m.L2Height))
	}
	return n
}

func (m *CCBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ShouldStartAtElement.Size()
	n += 1 + l + sovDa(uint64(l))
	if len(m.BatchContexts) > 0 {
		for _, e := range m.BatchContexts {
			l = e.Size()
			n += 1 + l + sovDa(uint64(l))
		}
	}
	if len(m.Elements) > 0 {
		for _, e := range m.Elements {
			l = e.Size()
			n += 1 + l + sovDa(uint64(l))
		}
	}
	if m.Compression != 0 {
		n += 1 + sovDa(uint64(m.Compression))
	}
	return n
}

func (m *CCRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovDa(uint64(l))
	}
	return n
}

func (m *L1ToL2Queue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.L1Timestamp)
	n += 1 + l + sovDa(uint64(l))
	if m.L1Height != 0 {
		n += 1 + sovDa(uint64(m.L1Height))
	}
	l = len(m.Txraw)
	if l > 0 {
		n += 1 + l + sovDa(uint64(l))
	}
	return n
}

func (m *SCCBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ShouldStartAtElement.Size()
	n += 1 + l + sovDa(uint64(l))
	if len(m.IntermediateStateRoots) > 0 {
		for _, b := range m.IntermediateStateRoots {
			l = len(b)
			n += 1 + l + sovDa(uint64(l))
		}
	}
	return n
}

func (m *SCCRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovDa(uint64(l))
	}
	return n
}

func (m *BatchHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovDa(uint64(l))
	}
	l = m.TotalElements.Size()
	n += 1 + l + sovDa(uint64(l))
	if m.BatchSize != 0 {
		n += 1 + sovDa(uint64(m.BatchSize))
	}
	if m.BatchIndex != 0 {
		n += 1 + sovDa(uint64(m.BatchIndex))
	}
	l = len(m.BatchRoot)
	if l > 0 {
		n += 1 + l + sovDa(uint64(l))
	}
	return n
}

func (m *CCState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != 0 {
		n += 1 + sovDa(uint64(m.Base))
	}
	if m.Height != 0 {
		n += 1 + sovDa(uint64(m.Height))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDa(uint64(l))
	}
	if m.L1ToL2GasRatio != 0 {
		n += 1 + sovDa(uint64(m.L1ToL2GasRatio))
	}
	if m.NextQueueIndex != 0 {
		n += 1 + sovDa(uint64(m.NextQueueIndex))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.L1Timestamp)
	n += 1 + l + sovDa(uint64(l))
	if m.L1Height != 0 {
		n += 1 + sovDa(uint64(m.L1Height))
	}
	return n
}

func (m *SCCState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != 0 {
		n += 1 + sovDa(uint64(m.Base))
	}
	if m.Height != 0 {
		n += 1 + sovDa(uint64(m.Height))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDa(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastSequencerSubmit)
	n += 1 + l + sovDa(uint64(l))
	return n
}

func sovDa(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDa(x uint64) (n int) {
	return sovDa(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CCBatchContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCBatchContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCBatchContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSequencedTxs", wireType)
			}
			m.NumSequencedTxs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSequencedTxs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSubsequentQueueTxs", wireType)
			}
			m.NumSubsequentQueueTxs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSubsequentQueueTxs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Height", wireType)
			}
			m.L1Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L1Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCBatchElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCBatchElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCBatchElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Height", wireType)
			}
			m.L1Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L1Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txraw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txraw = append(m.Txraw[:0], dAtA[iNdEx:postIndex]...)
			if m.Txraw == nil {
				m.Txraw = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueIndex", wireType)
			}
			m.QueueIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueueIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2Height", wireType)
			}
			m.L2Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldStartAtElement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShouldStartAtElement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchContexts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchContexts = append(m.BatchContexts, &CCBatchContext{})
			if err := m.BatchContexts[len(m.BatchContexts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elements = append(m.Elements, &CCBatchElement{})
			if err := m.Elements[len(m.Elements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			m.Compression = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compression |= CompressionOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BatchHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L1ToL2Queue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: L1toL2Queue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: L1toL2Queue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.L1Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Height", wireType)
			}
			m.L1Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L1Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txraw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txraw = append(m.Txraw[:0], dAtA[iNdEx:postIndex]...)
			if m.Txraw == nil {
				m.Txraw = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCCBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCCBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCCBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldStartAtElement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShouldStartAtElement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntermediateStateRoots", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntermediateStateRoots = append(m.IntermediateStateRoots, make([]byte, postIndex-iNdEx))
			copy(m.IntermediateStateRoots[len(m.IntermediateStateRoots)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCCRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCCRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCCRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BatchHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalElements", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalElements.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			m.BatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchIndex", wireType)
			}
			m.BatchIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchRoot = append(m.BatchRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BatchRoot == nil {
				m.BatchRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			m.Base = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Base |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1ToL2GasRatio", wireType)
			}
			m.L1ToL2GasRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L1ToL2GasRatio |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextQueueIndex", wireType)
			}
			m.NextQueueIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextQueueIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.L1Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Height", wireType)
			}
			m.L1Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L1Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCCState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCCState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCCState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			m.Base = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Base |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSequencerSubmit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDa
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastSequencerSubmit, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDa(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDa
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDa
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDa
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDa
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDa        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDa          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDa = fmt.Errorf("proto: unexpected end of group")
)
