// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: finschia/or/da/v1/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventUpdateParams is emitted after updating foundation parameters.
type EventUpdateParams struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *EventUpdateParams) Reset()         { *m = EventUpdateParams{} }
func (m *EventUpdateParams) String() string { return proto.CompactTextString(m) }
func (*EventUpdateParams) ProtoMessage()    {}
func (*EventUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_58900962c0403d56, []int{0}
}
func (m *EventUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateParams.Merge(m, src)
}
func (m *EventUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateParams proto.InternalMessageInfo

func (m *EventUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type EventAppendCCBatch struct {
	RollupName          string `protobuf:"bytes,1,opt,name=rollup_name,json=rollupName,proto3" json:"rollup_name,omitempty"`
	BatchIndex          uint64 `protobuf:"varint,2,opt,name=batch_index,json=batchIndex,proto3" json:"batch_index,omitempty"`
	ProcessedQueueIndex uint64 `protobuf:"varint,3,opt,name=processed_queue_index,json=processedQueueIndex,proto3" json:"processed_queue_index,omitempty"`
	TotalFrames         uint64 `protobuf:"varint,4,opt,name=total_frames,json=totalFrames,proto3" json:"total_frames,omitempty"`
	BatchSize           uint32 `protobuf:"varint,5,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	BatchHash           []byte `protobuf:"bytes,6,opt,name=batch_hash,json=batchHash,proto3" json:"batch_hash,omitempty"`
	// processed_l2block is the last l2block height that has been processed by L1.
	ProcessedL2Block uint64 `protobuf:"varint,7,opt,name=processed_l2block,json=processedL2block,proto3" json:"processed_l2block,omitempty"`
}

func (m *EventAppendCCBatch) Reset()         { *m = EventAppendCCBatch{} }
func (m *EventAppendCCBatch) String() string { return proto.CompactTextString(m) }
func (*EventAppendCCBatch) ProtoMessage()    {}
func (*EventAppendCCBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_58900962c0403d56, []int{1}
}
func (m *EventAppendCCBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAppendCCBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAppendCCBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAppendCCBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAppendCCBatch.Merge(m, src)
}
func (m *EventAppendCCBatch) XXX_Size() int {
	return m.Size()
}
func (m *EventAppendCCBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAppendCCBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EventAppendCCBatch proto.InternalMessageInfo

func (m *EventAppendCCBatch) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

func (m *EventAppendCCBatch) GetBatchIndex() uint64 {
	if m != nil {
		return m.BatchIndex
	}
	return 0
}

func (m *EventAppendCCBatch) GetProcessedQueueIndex() uint64 {
	if m != nil {
		return m.ProcessedQueueIndex
	}
	return 0
}

func (m *EventAppendCCBatch) GetTotalFrames() uint64 {
	if m != nil {
		return m.TotalFrames
	}
	return 0
}

func (m *EventAppendCCBatch) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *EventAppendCCBatch) GetBatchHash() []byte {
	if m != nil {
		return m.BatchHash
	}
	return nil
}

func (m *EventAppendCCBatch) GetProcessedL2Block() uint64 {
	if m != nil {
		return m.ProcessedL2Block
	}
	return 0
}

type EventSaveQueueTx struct {
	RollupName       string `protobuf:"bytes,1,opt,name=rollup_name,json=rollupName,proto3" json:"rollup_name,omitempty"`
	NextQueueIndex   uint64 `protobuf:"varint,2,opt,name=next_queue_index,json=nextQueueIndex,proto3" json:"next_queue_index,omitempty"`
	ExtraConsumedGas uint64 `protobuf:"varint,3,opt,name=extra_consumed_gas,json=extraConsumedGas,proto3" json:"extra_consumed_gas,omitempty"`
	L2GasLimit       uint64 `protobuf:"varint,4,opt,name=l2gas_limit,json=l2gasLimit,proto3" json:"l2gas_limit,omitempty"`
}

func (m *EventSaveQueueTx) Reset()         { *m = EventSaveQueueTx{} }
func (m *EventSaveQueueTx) String() string { return proto.CompactTextString(m) }
func (*EventSaveQueueTx) ProtoMessage()    {}
func (*EventSaveQueueTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_58900962c0403d56, []int{2}
}
func (m *EventSaveQueueTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSaveQueueTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSaveQueueTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSaveQueueTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSaveQueueTx.Merge(m, src)
}
func (m *EventSaveQueueTx) XXX_Size() int {
	return m.Size()
}
func (m *EventSaveQueueTx) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSaveQueueTx.DiscardUnknown(m)
}

var xxx_messageInfo_EventSaveQueueTx proto.InternalMessageInfo

func (m *EventSaveQueueTx) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

func (m *EventSaveQueueTx) GetNextQueueIndex() uint64 {
	if m != nil {
		return m.NextQueueIndex
	}
	return 0
}

func (m *EventSaveQueueTx) GetExtraConsumedGas() uint64 {
	if m != nil {
		return m.ExtraConsumedGas
	}
	return 0
}

func (m *EventSaveQueueTx) GetL2GasLimit() uint64 {
	if m != nil {
		return m.L2GasLimit
	}
	return 0
}

type EventAppendSCCBatch struct {
	RollupName          string    `protobuf:"bytes,1,opt,name=rollup_name,json=rollupName,proto3" json:"rollup_name,omitempty"`
	BatchIndex          uint64    `protobuf:"varint,2,opt,name=batch_index,json=batchIndex,proto3" json:"batch_index,omitempty"`
	TotalFrames         uint64    `protobuf:"varint,3,opt,name=total_frames,json=totalFrames,proto3" json:"total_frames,omitempty"`
	BatchSize           uint32    `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	BatchRoot           []byte    `protobuf:"bytes,5,opt,name=batch_root,json=batchRoot,proto3" json:"batch_root,omitempty"`
	LastSequencerSubmit time.Time `protobuf:"bytes,6,opt,name=last_sequencer_submit,json=lastSequencerSubmit,proto3,stdtime" json:"last_sequencer_submit"`
}

func (m *EventAppendSCCBatch) Reset()         { *m = EventAppendSCCBatch{} }
func (m *EventAppendSCCBatch) String() string { return proto.CompactTextString(m) }
func (*EventAppendSCCBatch) ProtoMessage()    {}
func (*EventAppendSCCBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_58900962c0403d56, []int{3}
}
func (m *EventAppendSCCBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAppendSCCBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAppendSCCBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAppendSCCBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAppendSCCBatch.Merge(m, src)
}
func (m *EventAppendSCCBatch) XXX_Size() int {
	return m.Size()
}
func (m *EventAppendSCCBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAppendSCCBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EventAppendSCCBatch proto.InternalMessageInfo

func (m *EventAppendSCCBatch) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

func (m *EventAppendSCCBatch) GetBatchIndex() uint64 {
	if m != nil {
		return m.BatchIndex
	}
	return 0
}

func (m *EventAppendSCCBatch) GetTotalFrames() uint64 {
	if m != nil {
		return m.TotalFrames
	}
	return 0
}

func (m *EventAppendSCCBatch) GetBatchSize() uint32 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

func (m *EventAppendSCCBatch) GetBatchRoot() []byte {
	if m != nil {
		return m.BatchRoot
	}
	return nil
}

func (m *EventAppendSCCBatch) GetLastSequencerSubmit() time.Time {
	if m != nil {
		return m.LastSequencerSubmit
	}
	return time.Time{}
}

type EventDeleteSCCBatch struct {
	RollupName    string `protobuf:"bytes,1,opt,name=rollup_name,json=rollupName,proto3" json:"rollup_name,omitempty"`
	NewBatchIndex uint64 `protobuf:"varint,2,opt,name=new_batch_index,json=newBatchIndex,proto3" json:"new_batch_index,omitempty"`
}

func (m *EventDeleteSCCBatch) Reset()         { *m = EventDeleteSCCBatch{} }
func (m *EventDeleteSCCBatch) String() string { return proto.CompactTextString(m) }
func (*EventDeleteSCCBatch) ProtoMessage()    {}
func (*EventDeleteSCCBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_58900962c0403d56, []int{4}
}
func (m *EventDeleteSCCBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventDeleteSCCBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventDeleteSCCBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventDeleteSCCBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDeleteSCCBatch.Merge(m, src)
}
func (m *EventDeleteSCCBatch) XXX_Size() int {
	return m.Size()
}
func (m *EventDeleteSCCBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDeleteSCCBatch.DiscardUnknown(m)
}

var xxx_messageInfo_EventDeleteSCCBatch proto.InternalMessageInfo

func (m *EventDeleteSCCBatch) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

func (m *EventDeleteSCCBatch) GetNewBatchIndex() uint64 {
	if m != nil {
		return m.NewBatchIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*EventUpdateParams)(nil), "finschia.or.da.v1.EventUpdateParams")
	proto.RegisterType((*EventAppendCCBatch)(nil), "finschia.or.da.v1.EventAppendCCBatch")
	proto.RegisterType((*EventSaveQueueTx)(nil), "finschia.or.da.v1.EventSaveQueueTx")
	proto.RegisterType((*EventAppendSCCBatch)(nil), "finschia.or.da.v1.EventAppendSCCBatch")
	proto.RegisterType((*EventDeleteSCCBatch)(nil), "finschia.or.da.v1.EventDeleteSCCBatch")
}

func init() { proto.RegisterFile("finschia/or/da/v1/event.proto", fileDescriptor_58900962c0403d56) }

var fileDescriptor_58900962c0403d56 = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0x8c, 0xdb, 0x10, 0xe8, 0xb6, 0x85, 0xc4, 0xa1, 0x92, 0x89, 0x54, 0x27, 0xe4, 0x80, 0x22,
	0x01, 0xb6, 0x1a, 0x0e, 0x9c, 0x49, 0xa0, 0x14, 0x29, 0x42, 0xe0, 0x14, 0x09, 0x71, 0x60, 0xb5,
	0xb6, 0xbf, 0xd8, 0x56, 0x6d, 0xaf, 0xeb, 0x5d, 0xa7, 0xa1, 0x4f, 0x51, 0x71, 0xe2, 0x21, 0x78,
	0x90, 0x1e, 0x7b, 0xe4, 0x04, 0x28, 0x79, 0x11, 0xb4, 0x6b, 0x3b, 0x2d, 0x44, 0xa8, 0x1c, 0xb8,
	0x25, 0x33, 0xe3, 0xef, 0x67, 0x66, 0x3f, 0xb4, 0x3b, 0x09, 0x62, 0xe6, 0xf8, 0x01, 0x31, 0x69,
	0x6a, 0xba, 0xc4, 0x9c, 0xee, 0x99, 0x30, 0x85, 0x98, 0x1b, 0x49, 0x4a, 0x39, 0x55, 0x1b, 0x25,
	0x6d, 0xd0, 0xd4, 0x70, 0x89, 0x31, 0xdd, 0x6b, 0xdd, 0xf5, 0xa8, 0x47, 0x25, 0x6b, 0x8a, 0x5f,
	0xb9, 0xb0, 0xd5, 0xf6, 0x28, 0xf5, 0x42, 0x30, 0xe5, 0x3f, 0x3b, 0x9b, 0x98, 0x3c, 0x88, 0x80,
	0x71, 0x12, 0x25, 0x85, 0x40, 0x5f, 0x6d, 0x94, 0x90, 0x94, 0x44, 0x2c, 0xe7, 0xbb, 0x23, 0xd4,
	0x78, 0x21, 0x1a, 0xbf, 0x4b, 0x5c, 0xc2, 0xe1, 0x8d, 0xa4, 0xd4, 0xa7, 0xa8, 0x96, 0x8b, 0x34,
	0xa5, 0xa3, 0xf4, 0x36, 0xfb, 0xf7, 0x8c, 0x95, 0x79, 0x8c, 0x5c, 0x3a, 0xa8, 0x9e, 0x7f, 0x6f,
	0x57, 0xac, 0x42, 0xde, 0xfd, 0xb2, 0x86, 0x54, 0x59, 0xee, 0x59, 0x92, 0x40, 0xec, 0x0e, 0x87,
	0x03, 0xc2, 0x1d, 0x5f, 0x6d, 0xa3, 0xcd, 0x94, 0x86, 0x61, 0x96, 0xe0, 0x98, 0x44, 0x20, 0x8b,
	0x6e, 0x58, 0x28, 0x87, 0x5e, 0x93, 0x08, 0x84, 0xc0, 0x16, 0x4a, 0x1c, 0xc4, 0x2e, 0xcc, 0xb4,
	0xb5, 0x8e, 0xd2, 0xab, 0x5a, 0x48, 0x42, 0xaf, 0x04, 0xa2, 0xf6, 0xd1, 0x4e, 0x92, 0x52, 0x07,
	0x18, 0x03, 0x17, 0x1f, 0x67, 0x90, 0x41, 0x21, 0x5d, 0x97, 0xd2, 0xe6, 0x92, 0x7c, 0x2b, 0xb8,
	0xfc, 0x9b, 0xfb, 0x68, 0x8b, 0x53, 0x4e, 0x42, 0x3c, 0x49, 0x49, 0x04, 0x4c, 0xab, 0x4a, 0xe9,
	0xa6, 0xc4, 0xf6, 0x25, 0xa4, 0xee, 0xa2, 0xbc, 0x09, 0x66, 0xc1, 0x29, 0x68, 0x37, 0x3a, 0x4a,
	0x6f, 0xdb, 0xda, 0x90, 0xc8, 0x38, 0x38, 0x85, 0x4b, 0xda, 0x27, 0xcc, 0xd7, 0x6a, 0x1d, 0xa5,
	0xb7, 0x55, 0xd0, 0x07, 0x84, 0xf9, 0xea, 0x43, 0xd4, 0xb8, 0x1c, 0x2a, 0xec, 0xdb, 0x21, 0x75,
	0x8e, 0xb4, 0x9b, 0xb2, 0x4b, 0x7d, 0x49, 0x8c, 0x72, 0xbc, 0xfb, 0x55, 0x41, 0x75, 0x69, 0xcd,
	0x98, 0x4c, 0x41, 0x4e, 0x79, 0x38, 0xbb, 0xde, 0x98, 0x1e, 0xaa, 0xc7, 0x30, 0xe3, 0xbf, 0xad,
	0x9c, 0xbb, 0x73, 0x5b, 0xe0, 0x57, 0xb6, 0x7d, 0x84, 0x54, 0x98, 0xf1, 0x94, 0x60, 0x87, 0xc6,
	0x2c, 0x8b, 0xc0, 0xc5, 0x1e, 0x61, 0x85, 0x3d, 0x75, 0xc9, 0x0c, 0x0b, 0xe2, 0x25, 0x61, 0xa2,
	0x71, 0xd8, 0xf7, 0x08, 0xc3, 0x61, 0x10, 0x05, 0xbc, 0xb0, 0x06, 0x49, 0x68, 0x24, 0x90, 0xee,
	0xe7, 0x35, 0xd4, 0xbc, 0x92, 0xe4, 0xf8, 0xff, 0x45, 0xf9, 0x67, 0x2c, 0xeb, 0xd7, 0xc5, 0x52,
	0xfd, 0x6b, 0x2c, 0x29, 0xa5, 0x5c, 0xa6, 0x56, 0xc6, 0x62, 0x51, 0xca, 0xd5, 0xf7, 0x68, 0x27,
	0x24, 0x8c, 0x63, 0x06, 0xc7, 0x19, 0xc4, 0x0e, 0xa4, 0x98, 0x65, 0xb6, 0xd8, 0xb2, 0x26, 0x1f,
	0x73, 0xcb, 0xc8, 0x6f, 0xc6, 0x28, 0x6f, 0xc6, 0x38, 0x2c, 0x6f, 0x66, 0x70, 0x4b, 0xbc, 0xe6,
	0xb3, 0x1f, 0x6d, 0xc5, 0x6a, 0x8a, 0x12, 0xe3, 0xb2, 0xc2, 0x58, 0x16, 0xe8, 0x7e, 0x2c, 0x3c,
	0x79, 0x0e, 0x21, 0x70, 0xf8, 0x77, 0x4f, 0x1e, 0xa0, 0x3b, 0x31, 0x9c, 0xe0, 0x55, 0x5f, 0xb6,
	0x63, 0x38, 0x19, 0x2c, 0xad, 0x19, 0x1c, 0x9c, 0xcf, 0x75, 0xe5, 0x62, 0xae, 0x2b, 0x3f, 0xe7,
	0xba, 0x72, 0xb6, 0xd0, 0x2b, 0x17, 0x0b, 0xbd, 0xf2, 0x6d, 0xa1, 0x57, 0x3e, 0x18, 0x5e, 0xc0,
	0xfd, 0xcc, 0x36, 0x1c, 0x1a, 0x99, 0xfb, 0xe5, 0x45, 0x97, 0x47, 0xf9, 0x98, 0xb9, 0x47, 0xe6,
	0xac, 0x38, 0x70, 0xfe, 0x29, 0x01, 0x66, 0xd7, 0xe4, 0x72, 0x4f, 0x7e, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x8b, 0x4b, 0x56, 0x9c, 0x68, 0x04, 0x00, 0x00,
}

func (m *EventUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventAppendCCBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAppendCCBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAppendCCBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProcessedL2Block != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ProcessedL2Block))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BatchHash) > 0 {
		i -= len(m.BatchHash)
		copy(dAtA[i:], m.BatchHash)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BatchHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.BatchSize != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BatchSize))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalFrames != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TotalFrames))
		i--
		dAtA[i] = 0x20
	}
	if m.ProcessedQueueIndex != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ProcessedQueueIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.BatchIndex != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BatchIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSaveQueueTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSaveQueueTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSaveQueueTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L2GasLimit != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.L2GasLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.ExtraConsumedGas != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.ExtraConsumedGas))
		i--
		dAtA[i] = 0x18
	}
	if m.NextQueueIndex != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NextQueueIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventAppendSCCBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAppendSCCBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAppendSCCBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastSequencerSubmit, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastSequencerSubmit):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintEvent(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	if len(m.BatchRoot) > 0 {
		i -= len(m.BatchRoot)
		copy(dAtA[i:], m.BatchRoot)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.BatchRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BatchSize != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BatchSize))
		i--
		dAtA[i] = 0x20
	}
	if m.TotalFrames != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TotalFrames))
		i--
		dAtA[i] = 0x18
	}
	if m.BatchIndex != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.BatchIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventDeleteSCCBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDeleteSCCBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventDeleteSCCBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewBatchIndex != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.NewBatchIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventAppendCCBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.BatchIndex != 0 {
		n += 1 + sovEvent(uint64(m.BatchIndex))
	}
	if m.ProcessedQueueIndex != 0 {
		n += 1 + sovEvent(uint64(m.ProcessedQueueIndex))
	}
	if m.TotalFrames != 0 {
		n += 1 + sovEvent(uint64(m.TotalFrames))
	}
	if m.BatchSize != 0 {
		n += 1 + sovEvent(uint64(m.BatchSize))
	}
	l = len(m.BatchHash)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.ProcessedL2Block != 0 {
		n += 1 + sovEvent(uint64(m.ProcessedL2Block))
	}
	return n
}

func (m *EventSaveQueueTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NextQueueIndex != 0 {
		n += 1 + sovEvent(uint64(m.NextQueueIndex))
	}
	if m.ExtraConsumedGas != 0 {
		n += 1 + sovEvent(uint64(m.ExtraConsumedGas))
	}
	if m.L2GasLimit != 0 {
		n += 1 + sovEvent(uint64(m.L2GasLimit))
	}
	return n
}

func (m *EventAppendSCCBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.BatchIndex != 0 {
		n += 1 + sovEvent(uint64(m.BatchIndex))
	}
	if m.TotalFrames != 0 {
		n += 1 + sovEvent(uint64(m.TotalFrames))
	}
	if m.BatchSize != 0 {
		n += 1 + sovEvent(uint64(m.BatchSize))
	}
	l = len(m.BatchRoot)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastSequencerSubmit)
	n += 1 + l + sovEvent(uint64(l))
	return n
}

func (m *EventDeleteSCCBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.NewBatchIndex != 0 {
		n += 1 + sovEvent(uint64(m.NewBatchIndex))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAppendCCBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAppendCCBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAppendCCBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchIndex", wireType)
			}
			m.BatchIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedQueueIndex", wireType)
			}
			m.ProcessedQueueIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessedQueueIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFrames", wireType)
			}
			m.TotalFrames = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFrames |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			m.BatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchHash = append(m.BatchHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BatchHash == nil {
				m.BatchHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedL2Block", wireType)
			}
			m.ProcessedL2Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessedL2Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSaveQueueTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSaveQueueTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSaveQueueTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextQueueIndex", wireType)
			}
			m.NextQueueIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextQueueIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraConsumedGas", wireType)
			}
			m.ExtraConsumedGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtraConsumedGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2GasLimit", wireType)
			}
			m.L2GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAppendSCCBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAppendSCCBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAppendSCCBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchIndex", wireType)
			}
			m.BatchIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFrames", wireType)
			}
			m.TotalFrames = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFrames |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			m.BatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchRoot = append(m.BatchRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BatchRoot == nil {
				m.BatchRoot = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSequencerSubmit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastSequencerSubmit, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDeleteSCCBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeleteSCCBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeleteSCCBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBatchIndex", wireType)
			}
			m.NewBatchIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewBatchIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
