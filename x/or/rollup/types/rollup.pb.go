// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: finschia/or/rollup/v1/rollup.proto

package types

import (
	fmt "fmt"
	types "github.com/Finschia/finschia-sdk/codec/types"
	types1 "github.com/Finschia/finschia-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Rollup struct {
	RollupName            string     `protobuf:"bytes,1,opt,name=rollupName,proto3" json:"rollupName,omitempty"`
	Creator               string     `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	PermissionedAddresses Sequencers `protobuf:"bytes,3,opt,name=permissionedAddresses,proto3" json:"permissionedAddresses"`
	MaxSequencers         uint64     `protobuf:"varint,4,opt,name=maxSequencers,proto3" json:"maxSequencers,omitempty"`
}

func (m *Rollup) Reset()         { *m = Rollup{} }
func (m *Rollup) String() string { return proto.CompactTextString(m) }
func (*Rollup) ProtoMessage()    {}
func (*Rollup) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa090da04695ac, []int{0}
}
func (m *Rollup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rollup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rollup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rollup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rollup.Merge(m, src)
}
func (m *Rollup) XXX_Size() int {
	return m.Size()
}
func (m *Rollup) XXX_DiscardUnknown() {
	xxx_messageInfo_Rollup.DiscardUnknown(m)
}

var xxx_messageInfo_Rollup proto.InternalMessageInfo

func (m *Rollup) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

func (m *Rollup) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Rollup) GetPermissionedAddresses() Sequencers {
	if m != nil {
		return m.PermissionedAddresses
	}
	return Sequencers{}
}

func (m *Rollup) GetMaxSequencers() uint64 {
	if m != nil {
		return m.MaxSequencers
	}
	return 0
}

type Sequencer struct {
	SequencerAddress string     `protobuf:"bytes,1,opt,name=sequencerAddress,proto3" json:"sequencerAddress,omitempty"`
	Pubkey           *types.Any `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	RollupName       string     `protobuf:"bytes,3,opt,name=rollupName,proto3" json:"rollupName,omitempty"`
}

func (m *Sequencer) Reset()         { *m = Sequencer{} }
func (m *Sequencer) String() string { return proto.CompactTextString(m) }
func (*Sequencer) ProtoMessage()    {}
func (*Sequencer) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa090da04695ac, []int{1}
}
func (m *Sequencer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sequencer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sequencer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sequencer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sequencer.Merge(m, src)
}
func (m *Sequencer) XXX_Size() int {
	return m.Size()
}
func (m *Sequencer) XXX_DiscardUnknown() {
	xxx_messageInfo_Sequencer.DiscardUnknown(m)
}

var xxx_messageInfo_Sequencer proto.InternalMessageInfo

func (m *Sequencer) GetSequencerAddress() string {
	if m != nil {
		return m.SequencerAddress
	}
	return ""
}

func (m *Sequencer) GetPubkey() *types.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Sequencer) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

type Deposit struct {
	RollupName       string      `protobuf:"bytes,1,opt,name=rollupName,proto3" json:"rollupName,omitempty"`
	SequencerAddress string      `protobuf:"bytes,2,opt,name=SequencerAddress,proto3" json:"SequencerAddress,omitempty"`
	Value            types1.Coin `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa090da04695ac, []int{2}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

func (m *Deposit) GetSequencerAddress() string {
	if m != nil {
		return m.SequencerAddress
	}
	return ""
}

func (m *Deposit) GetValue() types1.Coin {
	if m != nil {
		return m.Value
	}
	return types1.Coin{}
}

type SequencersByRollup struct {
	RollupName string      `protobuf:"bytes,1,opt,name=rollupName,proto3" json:"rollupName,omitempty"`
	Sequencers []Sequencer `protobuf:"bytes,2,rep,name=sequencers,proto3" json:"sequencers"`
}

func (m *SequencersByRollup) Reset()         { *m = SequencersByRollup{} }
func (m *SequencersByRollup) String() string { return proto.CompactTextString(m) }
func (*SequencersByRollup) ProtoMessage()    {}
func (*SequencersByRollup) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa090da04695ac, []int{3}
}
func (m *SequencersByRollup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SequencersByRollup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SequencersByRollup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SequencersByRollup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequencersByRollup.Merge(m, src)
}
func (m *SequencersByRollup) XXX_Size() int {
	return m.Size()
}
func (m *SequencersByRollup) XXX_DiscardUnknown() {
	xxx_messageInfo_SequencersByRollup.DiscardUnknown(m)
}

var xxx_messageInfo_SequencersByRollup proto.InternalMessageInfo

func (m *SequencersByRollup) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

func (m *SequencersByRollup) GetSequencers() []Sequencer {
	if m != nil {
		return m.Sequencers
	}
	return nil
}

type Sequencers struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *Sequencers) Reset()         { *m = Sequencers{} }
func (m *Sequencers) String() string { return proto.CompactTextString(m) }
func (*Sequencers) ProtoMessage()    {}
func (*Sequencers) Descriptor() ([]byte, []int) {
	return fileDescriptor_11aa090da04695ac, []int{4}
}
func (m *Sequencers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sequencers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sequencers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sequencers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sequencers.Merge(m, src)
}
func (m *Sequencers) XXX_Size() int {
	return m.Size()
}
func (m *Sequencers) XXX_DiscardUnknown() {
	xxx_messageInfo_Sequencers.DiscardUnknown(m)
}

var xxx_messageInfo_Sequencers proto.InternalMessageInfo

func (m *Sequencers) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func init() {
	proto.RegisterType((*Rollup)(nil), "finschia.or.rollup.v1.Rollup")
	proto.RegisterType((*Sequencer)(nil), "finschia.or.rollup.v1.Sequencer")
	proto.RegisterType((*Deposit)(nil), "finschia.or.rollup.v1.Deposit")
	proto.RegisterType((*SequencersByRollup)(nil), "finschia.or.rollup.v1.SequencersByRollup")
	proto.RegisterType((*Sequencers)(nil), "finschia.or.rollup.v1.Sequencers")
}

func init() {
	proto.RegisterFile("finschia/or/rollup/v1/rollup.proto", fileDescriptor_11aa090da04695ac)
}

var fileDescriptor_11aa090da04695ac = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4f, 0x6a, 0xdb, 0x4e,
	0x14, 0xf6, 0xc4, 0xfe, 0x39, 0xf8, 0x99, 0x1f, 0x84, 0xc1, 0x01, 0x39, 0x14, 0x55, 0x15, 0x5d,
	0x08, 0x43, 0x66, 0xb0, 0x4b, 0x0f, 0x10, 0xb7, 0x78, 0xd3, 0x52, 0x8a, 0xb2, 0x2b, 0x94, 0x22,
	0xc9, 0x13, 0x45, 0xc4, 0xd2, 0x53, 0x67, 0x24, 0x13, 0x41, 0x8f, 0xd0, 0x45, 0x6f, 0xd0, 0x4b,
	0xf4, 0x0e, 0x0d, 0x5d, 0x65, 0xd9, 0x55, 0x29, 0xf6, 0x45, 0x4a, 0x34, 0xa3, 0xd8, 0x75, 0x02,
	0xe9, 0x6e, 0xde, 0xf7, 0xfe, 0x7f, 0xdf, 0x1b, 0x70, 0xcf, 0x92, 0x4c, 0x45, 0xe7, 0x49, 0xc0,
	0x51, 0x72, 0x89, 0x8b, 0x45, 0x99, 0xf3, 0xe5, 0xd8, 0xbc, 0x58, 0x2e, 0xb1, 0x40, 0x7a, 0xd8,
	0xc4, 0x30, 0x94, 0xcc, 0x78, 0x96, 0xe3, 0xa3, 0x61, 0x84, 0x2a, 0x45, 0xf5, 0xa1, 0x0e, 0xe2,
	0xda, 0xd0, 0x19, 0x47, 0xc3, 0x18, 0x31, 0x5e, 0x08, 0x5e, 0x5b, 0x61, 0x79, 0xc6, 0x83, 0xac,
	0x32, 0x2e, 0x5b, 0x07, 0xf2, 0x30, 0x50, 0x82, 0x2f, 0xc7, 0xa1, 0x28, 0x82, 0x31, 0x8f, 0x30,
	0xc9, 0x8c, 0x7f, 0x10, 0x63, 0x8c, 0xba, 0xe4, 0xcd, 0x4b, 0xa3, 0xee, 0x77, 0x02, 0x5d, 0xbf,
	0xee, 0x4c, 0x6d, 0x00, 0x3d, 0xc3, 0x9b, 0x20, 0x15, 0x16, 0x71, 0x88, 0xd7, 0xf3, 0xb7, 0x10,
	0x6a, 0xc1, 0x7e, 0x24, 0x45, 0x50, 0xa0, 0xb4, 0xf6, 0x6a, 0x67, 0x63, 0xd2, 0xf7, 0x70, 0x98,
	0x0b, 0x99, 0x26, 0x4a, 0x25, 0x98, 0x89, 0xf9, 0xc9, 0x7c, 0x2e, 0x85, 0x52, 0x42, 0x59, 0x6d,
	0x87, 0x78, 0xfd, 0xc9, 0x13, 0x76, 0xef, 0x9e, 0xec, 0x54, 0x7c, 0x2c, 0x45, 0x16, 0x09, 0xa9,
	0xa6, 0x9d, 0xab, 0x5f, 0x8f, 0x5b, 0xfe, 0xfd, 0x55, 0xe8, 0x53, 0xf8, 0x3f, 0x0d, 0x2e, 0x37,
	0xd1, 0x56, 0xc7, 0x21, 0x5e, 0xc7, 0xff, 0x1b, 0x74, 0xbf, 0x12, 0xe8, 0xdd, 0x9a, 0x74, 0x04,
	0x07, 0xaa, 0x31, 0x4c, 0x25, 0xb3, 0xd2, 0x1d, 0x9c, 0xce, 0xa0, 0x9b, 0x97, 0xe1, 0x85, 0xa8,
	0xea, 0xbd, 0xfa, 0x93, 0x01, 0xd3, 0x2c, 0xb3, 0x86, 0x65, 0x76, 0x92, 0x55, 0x53, 0xeb, 0xc7,
	0xb7, 0xe3, 0x81, 0x11, 0x23, 0x92, 0x55, 0x5e, 0x20, 0x7b, 0x5b, 0x86, 0xaf, 0x44, 0xe5, 0x9b,
	0xec, 0x1d, 0x02, 0xdb, 0xbb, 0x04, 0xba, 0x9f, 0x09, 0xec, 0xbf, 0x14, 0x39, 0xaa, 0xa4, 0x78,
	0x90, 0xec, 0x11, 0x1c, 0x9c, 0xee, 0xce, 0xaf, 0x59, 0xbf, 0x83, 0xd3, 0xe7, 0xf0, 0xdf, 0x32,
	0x58, 0x94, 0xc2, 0xd0, 0x3d, 0x64, 0x66, 0xca, 0x9b, 0x4b, 0x60, 0xe6, 0x12, 0xd8, 0x0b, 0x4c,
	0x32, 0x43, 0xb3, 0x8e, 0x76, 0x3f, 0x01, 0xdd, 0x52, 0xa0, 0xfa, 0xc7, 0x2b, 0x98, 0x01, 0xa8,
	0x8d, 0x12, 0x7b, 0x4e, 0xdb, 0xeb, 0x4f, 0x9c, 0x87, 0x04, 0x36, 0x8d, 0xb7, 0x32, 0xdd, 0x11,
	0xc0, 0xa6, 0x3b, 0x7d, 0x04, 0xbd, 0xe0, 0xf6, 0x6a, 0x88, 0xd3, 0xf6, 0x7a, 0xfe, 0x06, 0x98,
	0xbe, 0xbe, 0x5a, 0xd9, 0xe4, 0x7a, 0x65, 0x93, 0xdf, 0x2b, 0x9b, 0x7c, 0x59, 0xdb, 0xad, 0xeb,
	0xb5, 0xdd, 0xfa, 0xb9, 0xb6, 0x5b, 0xef, 0x26, 0x71, 0x52, 0x9c, 0x97, 0x21, 0x8b, 0x30, 0xe5,
	0xb3, 0xe6, 0xc3, 0x35, 0xc3, 0x1c, 0xab, 0xf9, 0x05, 0xbf, 0xdc, 0xfa, 0x7f, 0x45, 0x95, 0x0b,
	0x15, 0x76, 0x6b, 0x59, 0x9f, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x5d, 0x73, 0x95, 0xa2,
	0x03, 0x00, 0x00,
}

func (m *Rollup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rollup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rollup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxSequencers != 0 {
		i = encodeVarintRollup(dAtA, i, uint64(m.MaxSequencers))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.PermissionedAddresses.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRollup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sequencer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sequencer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sequencer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SequencerAddress) > 0 {
		i -= len(m.SequencerAddress)
		copy(dAtA[i:], m.SequencerAddress)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.SequencerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRollup(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.SequencerAddress) > 0 {
		i -= len(m.SequencerAddress)
		copy(dAtA[i:], m.SequencerAddress)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.SequencerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SequencersByRollup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SequencersByRollup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequencersByRollup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sequencers) > 0 {
		for iNdEx := len(m.Sequencers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sequencers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRollup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintRollup(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Sequencers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sequencers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sequencers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintRollup(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRollup(dAtA []byte, offset int, v uint64) int {
	offset -= sovRollup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Rollup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	l = m.PermissionedAddresses.Size()
	n += 1 + l + sovRollup(uint64(l))
	if m.MaxSequencers != 0 {
		n += 1 + sovRollup(uint64(m.MaxSequencers))
	}
	return n
}

func (m *Sequencer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SequencerAddress)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovRollup(uint64(l))
	}
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	return n
}

func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	l = len(m.SequencerAddress)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovRollup(uint64(l))
	return n
}

func (m *SequencersByRollup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovRollup(uint64(l))
	}
	if len(m.Sequencers) > 0 {
		for _, e := range m.Sequencers {
			l = e.Size()
			n += 1 + l + sovRollup(uint64(l))
		}
	}
	return n
}

func (m *Sequencers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovRollup(uint64(l))
		}
	}
	return n
}

func sovRollup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRollup(x uint64) (n int) {
	return sovRollup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Rollup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rollup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rollup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionedAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PermissionedAddresses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSequencers", wireType)
			}
			m.MaxSequencers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSequencers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRollup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sequencer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sequencer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sequencer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequencerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SequencerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequencerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SequencerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SequencersByRollup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SequencersByRollup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SequencersByRollup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequencers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sequencers = append(m.Sequencers, Sequencer{})
			if err := m.Sequencers[len(m.Sequencers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sequencers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sequencers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sequencers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRollup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRollup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRollup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRollup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRollup = fmt.Errorf("proto: unexpected end of group")
)
