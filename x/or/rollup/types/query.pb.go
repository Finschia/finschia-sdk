// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: finschia/or/rollup/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/Finschia/finschia-rdk/codec/types"
	query "github.com/Finschia/finschia-rdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryRollupRequest struct {
	RollupName string `protobuf:"bytes,1,opt,name=rollup_name,json=rollupName,proto3" json:"rollup_name,omitempty"`
}

func (m *QueryRollupRequest) Reset()         { *m = QueryRollupRequest{} }
func (m *QueryRollupRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRollupRequest) ProtoMessage()    {}
func (*QueryRollupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd402f5beff853f, []int{0}
}
func (m *QueryRollupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRollupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRollupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRollupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRollupRequest.Merge(m, src)
}
func (m *QueryRollupRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRollupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRollupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRollupRequest proto.InternalMessageInfo

func (m *QueryRollupRequest) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

type QueryAllRollupRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRollupRequest) Reset()         { *m = QueryAllRollupRequest{} }
func (m *QueryAllRollupRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllRollupRequest) ProtoMessage()    {}
func (*QueryAllRollupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd402f5beff853f, []int{1}
}
func (m *QueryAllRollupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRollupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRollupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRollupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRollupRequest.Merge(m, src)
}
func (m *QueryAllRollupRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRollupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRollupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRollupRequest proto.InternalMessageInfo

func (m *QueryAllRollupRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllRollupResponse struct {
	Rollup     []Rollup            `protobuf:"bytes,1,rep,name=rollup,proto3" json:"rollup"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllRollupResponse) Reset()         { *m = QueryAllRollupResponse{} }
func (m *QueryAllRollupResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllRollupResponse) ProtoMessage()    {}
func (*QueryAllRollupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd402f5beff853f, []int{2}
}
func (m *QueryAllRollupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllRollupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllRollupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllRollupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllRollupResponse.Merge(m, src)
}
func (m *QueryAllRollupResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllRollupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllRollupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllRollupResponse proto.InternalMessageInfo

func (m *QueryAllRollupResponse) GetRollup() []Rollup {
	if m != nil {
		return m.Rollup
	}
	return nil
}

func (m *QueryAllRollupResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySequencerRequest struct {
	SequencerAddress string `protobuf:"bytes,1,opt,name=sequencer_address,json=sequencerAddress,proto3" json:"sequencer_address,omitempty"`
}

func (m *QuerySequencerRequest) Reset()         { *m = QuerySequencerRequest{} }
func (m *QuerySequencerRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySequencerRequest) ProtoMessage()    {}
func (*QuerySequencerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd402f5beff853f, []int{3}
}
func (m *QuerySequencerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySequencerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySequencerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySequencerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySequencerRequest.Merge(m, src)
}
func (m *QuerySequencerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySequencerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySequencerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySequencerRequest proto.InternalMessageInfo

func (m *QuerySequencerRequest) GetSequencerAddress() string {
	if m != nil {
		return m.SequencerAddress
	}
	return ""
}

type QueryRollupResponse struct {
	Rollup Rollup `protobuf:"bytes,1,opt,name=rollup,proto3" json:"rollup"`
}

func (m *QueryRollupResponse) Reset()         { *m = QueryRollupResponse{} }
func (m *QueryRollupResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRollupResponse) ProtoMessage()    {}
func (*QueryRollupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd402f5beff853f, []int{4}
}
func (m *QueryRollupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRollupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRollupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRollupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRollupResponse.Merge(m, src)
}
func (m *QueryRollupResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRollupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRollupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRollupResponse proto.InternalMessageInfo

func (m *QueryRollupResponse) GetRollup() Rollup {
	if m != nil {
		return m.Rollup
	}
	return Rollup{}
}

type QuerySequencerResponse struct {
	Sequencer Sequencer `protobuf:"bytes,1,opt,name=sequencer,proto3" json:"sequencer"`
}

func (m *QuerySequencerResponse) Reset()         { *m = QuerySequencerResponse{} }
func (m *QuerySequencerResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySequencerResponse) ProtoMessage()    {}
func (*QuerySequencerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd402f5beff853f, []int{5}
}
func (m *QuerySequencerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySequencerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySequencerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySequencerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySequencerResponse.Merge(m, src)
}
func (m *QuerySequencerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySequencerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySequencerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySequencerResponse proto.InternalMessageInfo

func (m *QuerySequencerResponse) GetSequencer() Sequencer {
	if m != nil {
		return m.Sequencer
	}
	return Sequencer{}
}

type QuerySequencersByRollupRequest struct {
	RollupName string `protobuf:"bytes,1,opt,name=rollup_name,json=rollupName,proto3" json:"rollup_name,omitempty"`
}

func (m *QuerySequencersByRollupRequest) Reset()         { *m = QuerySequencersByRollupRequest{} }
func (m *QuerySequencersByRollupRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySequencersByRollupRequest) ProtoMessage()    {}
func (*QuerySequencersByRollupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd402f5beff853f, []int{6}
}
func (m *QuerySequencersByRollupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySequencersByRollupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySequencersByRollupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySequencersByRollupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySequencersByRollupRequest.Merge(m, src)
}
func (m *QuerySequencersByRollupRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySequencersByRollupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySequencersByRollupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySequencersByRollupRequest proto.InternalMessageInfo

func (m *QuerySequencersByRollupRequest) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

type QuerySequencersByRollupResponse struct {
	RollupName    string      `protobuf:"bytes,1,opt,name=rollup_name,json=rollupName,proto3" json:"rollup_name,omitempty"`
	SequencerList []Sequencer `protobuf:"bytes,2,rep,name=sequencer_list,json=sequencerList,proto3" json:"sequencer_list"`
}

func (m *QuerySequencersByRollupResponse) Reset()         { *m = QuerySequencersByRollupResponse{} }
func (m *QuerySequencersByRollupResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySequencersByRollupResponse) ProtoMessage()    {}
func (*QuerySequencersByRollupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd402f5beff853f, []int{7}
}
func (m *QuerySequencersByRollupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySequencersByRollupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySequencersByRollupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySequencersByRollupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySequencersByRollupResponse.Merge(m, src)
}
func (m *QuerySequencersByRollupResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySequencersByRollupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySequencersByRollupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySequencersByRollupResponse proto.InternalMessageInfo

func (m *QuerySequencersByRollupResponse) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

func (m *QuerySequencersByRollupResponse) GetSequencerList() []Sequencer {
	if m != nil {
		return m.SequencerList
	}
	return nil
}

type QueryDepositRequest struct {
	RollupName       string `protobuf:"bytes,1,opt,name=rollup_name,json=rollupName,proto3" json:"rollup_name,omitempty"`
	SequencerAddress string `protobuf:"bytes,2,opt,name=sequencer_address,json=sequencerAddress,proto3" json:"sequencer_address,omitempty"`
}

func (m *QueryDepositRequest) Reset()         { *m = QueryDepositRequest{} }
func (m *QueryDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositRequest) ProtoMessage()    {}
func (*QueryDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd402f5beff853f, []int{8}
}
func (m *QueryDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositRequest.Merge(m, src)
}
func (m *QueryDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositRequest proto.InternalMessageInfo

func (m *QueryDepositRequest) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

func (m *QueryDepositRequest) GetSequencerAddress() string {
	if m != nil {
		return m.SequencerAddress
	}
	return ""
}

type QueryDepositResponse struct {
	Deposit *Deposit `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (m *QueryDepositResponse) Reset()         { *m = QueryDepositResponse{} }
func (m *QueryDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositResponse) ProtoMessage()    {}
func (*QueryDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9dd402f5beff853f, []int{9}
}
func (m *QueryDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositResponse.Merge(m, src)
}
func (m *QueryDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositResponse proto.InternalMessageInfo

func (m *QueryDepositResponse) GetDeposit() *Deposit {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryRollupRequest)(nil), "finschia.or.rollup.v1.QueryRollupRequest")
	proto.RegisterType((*QueryAllRollupRequest)(nil), "finschia.or.rollup.v1.QueryAllRollupRequest")
	proto.RegisterType((*QueryAllRollupResponse)(nil), "finschia.or.rollup.v1.QueryAllRollupResponse")
	proto.RegisterType((*QuerySequencerRequest)(nil), "finschia.or.rollup.v1.QuerySequencerRequest")
	proto.RegisterType((*QueryRollupResponse)(nil), "finschia.or.rollup.v1.QueryRollupResponse")
	proto.RegisterType((*QuerySequencerResponse)(nil), "finschia.or.rollup.v1.QuerySequencerResponse")
	proto.RegisterType((*QuerySequencersByRollupRequest)(nil), "finschia.or.rollup.v1.QuerySequencersByRollupRequest")
	proto.RegisterType((*QuerySequencersByRollupResponse)(nil), "finschia.or.rollup.v1.QuerySequencersByRollupResponse")
	proto.RegisterType((*QueryDepositRequest)(nil), "finschia.or.rollup.v1.QueryDepositRequest")
	proto.RegisterType((*QueryDepositResponse)(nil), "finschia.or.rollup.v1.QueryDepositResponse")
}

func init() { proto.RegisterFile("finschia/or/rollup/v1/query.proto", fileDescriptor_9dd402f5beff853f) }

var fileDescriptor_9dd402f5beff853f = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0x3b, 0xfd, 0xfd, 0x2c, 0xe9, 0x10, 0x8d, 0x8e, 0x60, 0x70, 0xa3, 0x0b, 0x6e, 0x0c,
	0x22, 0x7f, 0x76, 0xd2, 0x12, 0x8c, 0x09, 0x31, 0x91, 0x4a, 0x40, 0x13, 0x54, 0xac, 0x37, 0x0f,
	0x36, 0xdb, 0x76, 0x58, 0x36, 0xb6, 0x3b, 0xcb, 0xce, 0x96, 0x48, 0x08, 0x17, 0x5f, 0x81, 0x46,
	0xe3, 0xd1, 0x77, 0xe0, 0xc9, 0x37, 0xc1, 0xc5, 0x84, 0xc4, 0x8b, 0x27, 0x63, 0xc0, 0xab, 0xef,
	0xc1, 0x74, 0xe6, 0xd9, 0xa5, 0xdb, 0x6e, 0x97, 0xe5, 0xd6, 0x99, 0x7d, 0xbe, 0xcf, 0xf3, 0x79,
	0xfe, 0x4d, 0xf1, 0xad, 0x2d, 0xc7, 0x15, 0x8d, 0x6d, 0xc7, 0xa2, 0xdc, 0xa7, 0x3e, 0x6f, 0xb5,
	0x3a, 0x1e, 0xdd, 0x2d, 0xd1, 0x9d, 0x0e, 0xf3, 0xf7, 0x4c, 0xcf, 0xe7, 0x01, 0x27, 0xe3, 0xa1,
	0x89, 0xc9, 0x7d, 0x53, 0x99, 0x98, 0xbb, 0x25, 0xed, 0x86, 0xcd, 0xb9, 0xdd, 0x62, 0xd4, 0xf2,
	0x1c, 0x6a, 0xb9, 0x2e, 0x0f, 0xac, 0xc0, 0xe1, 0xae, 0x50, 0x22, 0xcd, 0x48, 0xf6, 0x0b, 0x72,
	0x65, 0x33, 0xdb, 0xe0, 0xa2, 0xcd, 0x05, 0xad, 0x5b, 0x82, 0xa9, 0x88, 0x74, 0xb7, 0x54, 0x67,
	0x81, 0x55, 0xa2, 0x9e, 0x65, 0x3b, 0xae, 0x74, 0x08, 0xb6, 0xd7, 0x95, 0x6d, 0x4d, 0x9e, 0xa8,
	0x3a, 0x84, 0x9f, 0x00, 0x44, 0x9e, 0xea, 0x9d, 0x2d, 0x6a, 0xb9, 0x80, 0xae, 0x8d, 0xd9, 0xdc,
	0xe6, 0x4a, 0xd2, 0xfd, 0xa5, 0x6e, 0x8d, 0x25, 0x4c, 0x5e, 0x74, 0xa3, 0x55, 0x25, 0x4c, 0x95,
	0xed, 0x74, 0x98, 0x08, 0xc8, 0x24, 0x1e, 0x55, 0x74, 0x35, 0xd7, 0x6a, 0xb3, 0x09, 0x34, 0x85,
	0x66, 0x8a, 0x55, 0xac, 0xae, 0x9e, 0x59, 0x6d, 0x66, 0xd4, 0xf0, 0xb8, 0x94, 0xad, 0xb4, 0x5a,
	0x71, 0xe5, 0x1a, 0xc6, 0xa7, 0xbc, 0x52, 0x38, 0x5a, 0x9e, 0x36, 0x81, 0xb1, 0x9b, 0x9c, 0xa9,
	0xca, 0x09, 0xc9, 0x99, 0x9b, 0x96, 0xcd, 0x40, 0x5b, 0xed, 0x51, 0x1a, 0x5f, 0x10, 0xbe, 0xd6,
	0x1f, 0x41, 0x78, 0xdc, 0x15, 0x8c, 0x2c, 0xe3, 0x82, 0x22, 0x99, 0x40, 0x53, 0xff, 0xcd, 0x8c,
	0x96, 0x6f, 0x9a, 0x89, 0x4d, 0x31, 0x95, 0xac, 0xf2, 0xff, 0xe1, 0xaf, 0xc9, 0x5c, 0x15, 0x24,
	0x64, 0x3d, 0xc6, 0x97, 0x97, 0x7c, 0x77, 0xce, 0xe4, 0x53, 0x91, 0x63, 0x80, 0xab, 0x50, 0x81,
	0x97, 0x5d, 0x78, 0xb7, 0xc1, 0xfc, 0xb0, 0x02, 0x73, 0xf8, 0x8a, 0x08, 0xef, 0x6a, 0x56, 0xb3,
	0xe9, 0x33, 0x21, 0xa0, 0x82, 0x97, 0xa3, 0x0f, 0x2b, 0xea, 0xde, 0xa8, 0xe2, 0xab, 0xb1, 0xf2,
	0x27, 0xa4, 0x88, 0xce, 0x99, 0xa2, 0xf1, 0x1a, 0x2a, 0xd7, 0x43, 0x06, 0x6e, 0x57, 0x71, 0x31,
	0x22, 0x00, 0xcf, 0x53, 0x43, 0x3c, 0x47, 0x62, 0x70, 0x7e, 0x2a, 0x34, 0x56, 0xb0, 0x1e, 0xf7,
	0x2f, 0x2a, 0xe7, 0x1d, 0x9f, 0x0f, 0x08, 0x4f, 0x0e, 0xf5, 0x01, 0xb0, 0x67, 0x39, 0x21, 0x4f,
	0xf1, 0xa5, 0xd3, 0x42, 0xb7, 0x1c, 0x11, 0x4c, 0xe4, 0xe5, 0x3c, 0x64, 0x4d, 0xe9, 0x62, 0xa4,
	0xde, 0x70, 0x44, 0x60, 0x34, 0xa0, 0x15, 0xab, 0xcc, 0xe3, 0xc2, 0x09, 0xb2, 0xe6, 0x92, 0xdc,
	0xef, 0xfc, 0x90, 0x7e, 0x6f, 0xe2, 0xb1, 0x78, 0x10, 0x48, 0xf6, 0x3e, 0x1e, 0x69, 0xaa, 0x2b,
	0xe8, 0x8b, 0x3e, 0x24, 0x89, 0x50, 0x18, 0x9a, 0x97, 0xff, 0x16, 0xf0, 0x05, 0xe9, 0x92, 0x7c,
	0x42, 0xb8, 0xa0, 0x6a, 0x48, 0xee, 0x0e, 0x51, 0x0f, 0xae, 0xba, 0x36, 0x9b, 0xc5, 0x54, 0x51,
	0x1a, 0x8b, 0xef, 0x7e, 0xfc, 0xf9, 0x98, 0x5f, 0x20, 0x73, 0x34, 0xed, 0x45, 0xa3, 0xfb, 0x3d,
	0x05, 0x3b, 0x20, 0x9f, 0x11, 0x2e, 0x46, 0x4b, 0x4c, 0xe6, 0xd3, 0xc2, 0xf5, 0xbf, 0x26, 0xda,
	0x42, 0x46, 0x6b, 0xe0, 0x9b, 0x97, 0x7c, 0xd3, 0xe4, 0x76, 0x3a, 0x1f, 0x3c, 0x05, 0x5f, 0x11,
	0x2e, 0x46, 0x33, 0x91, 0x0e, 0xd6, 0xbf, 0xe4, 0xe9, 0x60, 0x03, 0x8b, 0x67, 0x3c, 0x92, 0x60,
	0x0f, 0xc8, 0x72, 0x3a, 0x58, 0x34, 0x2e, 0x74, 0x7f, 0x60, 0xa4, 0x0e, 0xc8, 0x77, 0x84, 0xc9,
	0xe0, 0xbe, 0x90, 0xa5, 0x4c, 0x28, 0xfd, 0x3b, 0xaa, 0xdd, 0x3b, 0xaf, 0x0c, 0x52, 0x79, 0x2c,
	0x53, 0xa9, 0x90, 0x87, 0x19, 0x53, 0x11, 0xb5, 0xfa, 0x5e, 0x2d, 0x71, 0x30, 0xbe, 0x21, 0x3c,
	0x02, 0xe3, 0x4c, 0x52, 0xa7, 0x30, 0xbe, 0x91, 0xda, 0x5c, 0x26, 0x5b, 0xc0, 0x7d, 0x2e, 0x71,
	0x9f, 0x90, 0xf5, 0x74, 0x5c, 0xd8, 0xa6, 0x38, 0x61, 0x52, 0x17, 0x2a, 0x1b, 0x87, 0xc7, 0x3a,
	0x3a, 0x3a, 0xd6, 0xd1, 0xef, 0x63, 0x1d, 0xbd, 0x3f, 0xd1, 0x73, 0x47, 0x27, 0x7a, 0xee, 0xe7,
	0x89, 0x9e, 0x7b, 0x55, 0xb6, 0x9d, 0x60, 0xbb, 0x53, 0x37, 0x1b, 0xbc, 0x4d, 0xd7, 0xc2, 0x60,
	0x61, 0xd4, 0x05, 0xbf, 0xf9, 0x86, 0xbe, 0xed, 0x89, 0x1d, 0xec, 0x79, 0x4c, 0xd4, 0x0b, 0xf2,
	0x5f, 0x78, 0xf1, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xee, 0x1f, 0x2d, 0x2b, 0x7b, 0x08, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Rollup(ctx context.Context, in *QueryRollupRequest, opts ...grpc.CallOption) (*QueryRollupResponse, error)
	AllRollup(ctx context.Context, in *QueryAllRollupRequest, opts ...grpc.CallOption) (*QueryAllRollupResponse, error)
	Sequencer(ctx context.Context, in *QuerySequencerRequest, opts ...grpc.CallOption) (*QuerySequencerResponse, error)
	SequencersByRollup(ctx context.Context, in *QuerySequencersByRollupRequest, opts ...grpc.CallOption) (*QuerySequencersByRollupResponse, error)
	Deposit(ctx context.Context, in *QueryDepositRequest, opts ...grpc.CallOption) (*QueryDepositResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Rollup(ctx context.Context, in *QueryRollupRequest, opts ...grpc.CallOption) (*QueryRollupResponse, error) {
	out := new(QueryRollupResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.rollup.v1.Query/Rollup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllRollup(ctx context.Context, in *QueryAllRollupRequest, opts ...grpc.CallOption) (*QueryAllRollupResponse, error) {
	out := new(QueryAllRollupResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.rollup.v1.Query/AllRollup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sequencer(ctx context.Context, in *QuerySequencerRequest, opts ...grpc.CallOption) (*QuerySequencerResponse, error) {
	out := new(QuerySequencerResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.rollup.v1.Query/Sequencer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SequencersByRollup(ctx context.Context, in *QuerySequencersByRollupRequest, opts ...grpc.CallOption) (*QuerySequencersByRollupResponse, error) {
	out := new(QuerySequencersByRollupResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.rollup.v1.Query/SequencersByRollup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Deposit(ctx context.Context, in *QueryDepositRequest, opts ...grpc.CallOption) (*QueryDepositResponse, error) {
	out := new(QueryDepositResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.rollup.v1.Query/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Rollup(context.Context, *QueryRollupRequest) (*QueryRollupResponse, error)
	AllRollup(context.Context, *QueryAllRollupRequest) (*QueryAllRollupResponse, error)
	Sequencer(context.Context, *QuerySequencerRequest) (*QuerySequencerResponse, error)
	SequencersByRollup(context.Context, *QuerySequencersByRollupRequest) (*QuerySequencersByRollupResponse, error)
	Deposit(context.Context, *QueryDepositRequest) (*QueryDepositResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Rollup(ctx context.Context, req *QueryRollupRequest) (*QueryRollupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollup not implemented")
}
func (*UnimplementedQueryServer) AllRollup(ctx context.Context, req *QueryAllRollupRequest) (*QueryAllRollupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllRollup not implemented")
}
func (*UnimplementedQueryServer) Sequencer(ctx context.Context, req *QuerySequencerRequest) (*QuerySequencerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sequencer not implemented")
}
func (*UnimplementedQueryServer) SequencersByRollup(ctx context.Context, req *QuerySequencersByRollupRequest) (*QuerySequencersByRollupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SequencersByRollup not implemented")
}
func (*UnimplementedQueryServer) Deposit(ctx context.Context, req *QueryDepositRequest) (*QueryDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Rollup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRollupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rollup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.rollup.v1.Query/Rollup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rollup(ctx, req.(*QueryRollupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllRollup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllRollupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllRollup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.rollup.v1.Query/AllRollup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllRollup(ctx, req.(*QueryAllRollupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sequencer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySequencerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sequencer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.rollup.v1.Query/Sequencer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sequencer(ctx, req.(*QuerySequencerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SequencersByRollup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySequencersByRollupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SequencersByRollup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.rollup.v1.Query/SequencersByRollup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SequencersByRollup(ctx, req.(*QuerySequencersByRollupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.rollup.v1.Query/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Deposit(ctx, req.(*QueryDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "finschia.or.rollup.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rollup",
			Handler:    _Query_Rollup_Handler,
		},
		{
			MethodName: "AllRollup",
			Handler:    _Query_AllRollup_Handler,
		},
		{
			MethodName: "Sequencer",
			Handler:    _Query_Sequencer_Handler,
		},
		{
			MethodName: "SequencersByRollup",
			Handler:    _Query_SequencersByRollup_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Query_Deposit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finschia/or/rollup/v1/query.proto",
}

func (m *QueryRollupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRollupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRollupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRollupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRollupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRollupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllRollupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllRollupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllRollupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rollup) > 0 {
		for iNdEx := len(m.Rollup) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rollup[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySequencerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySequencerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySequencerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SequencerAddress) > 0 {
		i -= len(m.SequencerAddress)
		copy(dAtA[i:], m.SequencerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SequencerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRollupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRollupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRollupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rollup.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySequencerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySequencerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySequencerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Sequencer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySequencersByRollupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySequencersByRollupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySequencersByRollupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySequencersByRollupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySequencersByRollupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySequencersByRollupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SequencerList) > 0 {
		for iNdEx := len(m.SequencerList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SequencerList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SequencerAddress) > 0 {
		i -= len(m.SequencerAddress)
		copy(dAtA[i:], m.SequencerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SequencerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deposit != nil {
		{
			size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryRollupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRollupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllRollupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rollup) > 0 {
		for _, e := range m.Rollup {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySequencerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SequencerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRollupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rollup.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySequencerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sequencer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySequencersByRollupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySequencersByRollupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.SequencerList) > 0 {
		for _, e := range m.SequencerList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SequencerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deposit != nil {
		l = m.Deposit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryRollupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRollupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRollupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRollupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRollupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRollupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllRollupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllRollupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllRollupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rollup = append(m.Rollup, Rollup{})
			if err := m.Rollup[len(m.Rollup)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySequencerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySequencerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySequencerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequencerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SequencerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRollupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRollupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRollupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rollup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySequencerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySequencerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySequencerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequencer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sequencer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySequencersByRollupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySequencersByRollupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySequencersByRollupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySequencersByRollupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySequencersByRollupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySequencersByRollupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequencerList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SequencerList = append(m.SequencerList, Sequencer{})
			if err := m.SequencerList[len(m.SequencerList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequencerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SequencerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deposit == nil {
				m.Deposit = &Deposit{}
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
