package mips

import (
	"crypto/sha256"
	"encoding/hex"
	"math/rand"
	"testing"
	"time"

	"github.com/Finschia/finschia-sdk/x/or/settlement/types"
	"github.com/stretchr/testify/require"
)

func TestStepWitnessMemory(t *testing.T) {
	statebytes, err := hex.DecodeString("0B87556AFA51677D1F4D377E608C48367190537A643CF619AD2DE5513A749A7D6433433D3F48974B10083D3FF6799E9D448B47406168FF2EE9DA2E1E2035101B0000004800011FB800011FBC5555600000000055243CC00000000000000000072BFA000000000000000000000FA3000000000000000540438040000000200000000000000000000000000000000100000000000000010000000000000020FFFFFFFF000000010000000000000001000000002438FFF8000CA07840424D6C0000000000000004000D8FC400000000000000000000032040424C80404000F000011F5C")
	require.NoError(t, err)
	state, err := types.DecodeState(statebytes)
	require.NoError(t, err)
	proofs, err := hex.DecodeString
	require.NoError(t, err)
	key, err := hex.DecodeString("6433433D3F48974B10083D3FF6799E9D448B47406168FF2EE9DA2E1E2035101B")
	require.NoError(t, err)
	val, err := hex.DecodeString("000000000000006054710D7FC08E1AAE43C7981A6B01692DE5856BBB3C41D4BD253099AE556C507924015B8C922747C864EF2C2835D340E25BE09979CAD65D5E53462ACCA78A9AFE3A6EB0790F39AC87C94F3856B2DD2C5D110E6811602261A9A923D3BB23ADC8B7")
	require.NoError(t, err)
	offset := uint32(72)

	witness := &types.Witness{
		State:          state,
		Proofs:         proofs,
		PreimageKey:    key,
		PreimageValue:  val,
		PreimageOffset: offset,
	}

	preStep := uint64(4700010)
	postStep := uint64(4700011)
	preState, err := hex.DecodeString("6C2FD13D20BB4F87E32B7864DB052632709D718656F812EEE355EDB5CD2D6D0F")
	require.NoError(t, err)
	postState, err := hex.DecodeString("AAB64A1E64EFF4DC96262BC877873D0FAF3DA02BB52391644BC2959DF32D6738")
	require.NoError(t, err)

	challenge := &types.Challenge{
		L: preStep,
		R: postStep,
		AssertedStateHashes: map[uint64][]byte{
			preStep:  preState,
			postStep: postState,
		},
	}

	stepedState, err := WitnessStep(witness, challenge)
	require.NoError(t, err)
	require.Equal(t, *(*[32]byte)(postState), sha256.Sum256(stepedState.EncodeWitness()))
}

// TODO: Use random not fixed value.
func TestWitnessMemorySet(t *testing.T) {
	s := rand.NewSource(time.Now().UnixNano())
	r := rand.New(s)

	m := NewMemory()
	for i := uint32(0x100000); i < 0x800000; i = i + 4 {
		m.SetMemory(i, r.Uint32())
	}
	addr := uint32(0x400000)
	proof := m.MerkleProof(addr)

	wm := WitnessMemory{
		initialRoot: m.MerkleRoot(),
		root:        m.MerkleRoot(),
		proofs: [2][MemProofSize]byte{
			{},
			proof,
		},
		pc: 0,
	}

	require.Equal(t, m.GetMemory(addr), wm.GetMemory(addr))

	val := r.Uint32()
	m.SetMemory(addr, val)
	wm.SetMemory(addr, val)

	require.NotEqual(t, m.MerkleRoot(), wm.initialRoot)
	require.Equal(t, m.MerkleRoot(), wm.root)
}
