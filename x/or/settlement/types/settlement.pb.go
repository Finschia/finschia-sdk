// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: finschia/or/settlement/v1/settlement.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the token module.
type Params struct {
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d997a6df5a7594b6, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Challenge defines token information.
// a.k.a Contract.sol#ChallengeData.
type Challenge struct {
	// Left bound of the binary search: challenger & defender agree on all steps
	// <= L.
	L []byte `protobuf:"bytes,1,opt,name=l,proto3" json:"l,omitempty"`
	// Right bound of the binary search: challenger & defender disagree on all
	// steps >= R.
	R []byte `protobuf:"bytes,2,opt,name=r,proto3" json:"r,omitempty"`
	// Maps step numbers to asserted state hashes for the challenger.
	AssertedState map[uint64][]byte `protobuf:"bytes,3,rep,name=asserted_state,json=assertedState,proto3" json:"asserted_state,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Maps step numbers to asserted state hashes for the defender.
	DefendedState map[uint64][]byte `protobuf:"bytes,4,rep,name=defended_state,json=defendedState,proto3" json:"defended_state,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Address of the challenger.
	Challenger string `protobuf:"bytes,5,opt,name=challenger,proto3" json:"challenger,omitempty"`
	// Block number preceding the challenged block.
	BlockNumberN int64 `protobuf:"varint,6,opt,name=block_number_n,json=blockNumberN,proto3" json:"block_number_n,omitempty"`
}

func (m *Challenge) Reset()         { *m = Challenge{} }
func (m *Challenge) String() string { return proto.CompactTextString(m) }
func (*Challenge) ProtoMessage()    {}
func (*Challenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_d997a6df5a7594b6, []int{1}
}
func (m *Challenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Challenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Challenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Challenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge.Merge(m, src)
}
func (m *Challenge) XXX_Size() int {
	return m.Size()
}
func (m *Challenge) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge proto.InternalMessageInfo

func (m *Challenge) GetL() []byte {
	if m != nil {
		return m.L
	}
	return nil
}

func (m *Challenge) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Challenge) GetAssertedState() map[uint64][]byte {
	if m != nil {
		return m.AssertedState
	}
	return nil
}

func (m *Challenge) GetDefendedState() map[uint64][]byte {
	if m != nil {
		return m.DefendedState
	}
	return nil
}

func (m *Challenge) GetChallenger() string {
	if m != nil {
		return m.Challenger
	}
	return ""
}

func (m *Challenge) GetBlockNumberN() int64 {
	if m != nil {
		return m.BlockNumberN
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "finschia.or.settlement.v1.Params")
	proto.RegisterType((*Challenge)(nil), "finschia.or.settlement.v1.Challenge")
	proto.RegisterMapType((map[uint64][]byte)(nil), "finschia.or.settlement.v1.Challenge.AssertedStateEntry")
	proto.RegisterMapType((map[uint64][]byte)(nil), "finschia.or.settlement.v1.Challenge.DefendedStateEntry")
}

func init() {
	proto.RegisterFile("finschia/or/settlement/v1/settlement.proto", fileDescriptor_d997a6df5a7594b6)
}

var fileDescriptor_d997a6df5a7594b6 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x6a, 0xea, 0x40,
	0x14, 0xc6, 0x1d, 0xa3, 0x72, 0x9d, 0xeb, 0x95, 0xcb, 0xe0, 0x22, 0xd7, 0x45, 0x08, 0x72, 0x17,
	0xa1, 0xd0, 0x04, 0x5b, 0x68, 0x4b, 0x57, 0xfd, 0xbf, 0x14, 0x49, 0x77, 0x5d, 0x54, 0x26, 0xc9,
	0x31, 0x8a, 0x93, 0x19, 0x99, 0x19, 0xa5, 0xbe, 0x45, 0x5f, 0xa5, 0x6f, 0xd1, 0xa5, 0xcb, 0x2e,
	0x8b, 0xbe, 0x48, 0x49, 0x34, 0x12, 0x2a, 0x5d, 0xb8, 0x3b, 0xdf, 0x37, 0xe7, 0xfb, 0xcd, 0xcc,
	0xe1, 0xe0, 0xa3, 0xe1, 0x98, 0xab, 0x70, 0x34, 0xa6, 0x9e, 0x90, 0x9e, 0x02, 0xad, 0x19, 0x24,
	0xc0, 0xb5, 0x37, 0xef, 0x16, 0x94, 0x3b, 0x95, 0x42, 0x0b, 0xf2, 0x2f, 0xef, 0x75, 0x85, 0x74,
	0x0b, 0xa7, 0xf3, 0x6e, 0xbb, 0x15, 0x8b, 0x58, 0x64, 0x5d, 0x5e, 0x5a, 0x6d, 0x02, 0x9d, 0x5f,
	0xb8, 0xd6, 0xa7, 0x92, 0x26, 0xaa, 0xf3, 0x66, 0xe0, 0xfa, 0xed, 0x88, 0x32, 0x06, 0x3c, 0x06,
	0xd2, 0xc0, 0x88, 0x99, 0xc8, 0x46, 0x4e, 0xc3, 0x47, 0x2c, 0x55, 0xd2, 0x2c, 0x6f, 0x94, 0x24,
	0xcf, 0xb8, 0x49, 0x95, 0x02, 0xa9, 0x21, 0x1a, 0x28, 0x4d, 0x35, 0x98, 0x86, 0x6d, 0x38, 0xbf,
	0x4f, 0xce, 0xdd, 0x1f, 0x6f, 0x77, 0x77, 0x64, 0xf7, 0x7a, 0x1b, 0x7d, 0x4c, 0x93, 0xf7, 0x5c,
	0xcb, 0x85, 0xff, 0x87, 0x16, 0xbd, 0x94, 0x1f, 0xc1, 0x10, 0x78, 0xb4, 0xe3, 0x57, 0x0e, 0xe0,
	0xdf, 0x6d, 0xa3, 0x45, 0x7e, 0x54, 0xf4, 0x88, 0x85, 0x71, 0x98, 0xb7, 0x4b, 0xb3, 0x6a, 0x23,
	0xa7, 0xee, 0x17, 0x1c, 0xf2, 0x1f, 0x37, 0x03, 0x26, 0xc2, 0xc9, 0x80, 0xcf, 0x92, 0x00, 0xe4,
	0x80, 0x9b, 0x35, 0x1b, 0x39, 0x86, 0xdf, 0xc8, 0xdc, 0x5e, 0x66, 0xf6, 0xda, 0x57, 0x98, 0xec,
	0x7f, 0x85, 0xfc, 0xc5, 0xc6, 0x04, 0x16, 0xd9, 0xe4, 0x2a, 0x7e, 0x5a, 0x92, 0x16, 0xae, 0xce,
	0x29, 0x9b, 0xc1, 0x76, 0x7e, 0x1b, 0x71, 0x59, 0xbe, 0x40, 0x29, 0x61, 0xff, 0xb1, 0x87, 0x10,
	0x6e, 0xfa, 0xef, 0x2b, 0x0b, 0x2d, 0x57, 0x16, 0xfa, 0x5c, 0x59, 0xe8, 0x75, 0x6d, 0x95, 0x96,
	0x6b, 0xab, 0xf4, 0xb1, 0xb6, 0x4a, 0x4f, 0x67, 0xf1, 0x58, 0x8f, 0x66, 0x81, 0x1b, 0x8a, 0xc4,
	0x7b, 0xc8, 0xf7, 0x27, 0x1f, 0xdf, 0xb1, 0x8a, 0x26, 0xde, 0xcb, 0xb7, 0x75, 0xd2, 0x8b, 0x29,
	0xa8, 0xa0, 0x96, 0xad, 0xc5, 0xe9, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0xd8, 0x95, 0x89,
	0x75, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Challenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Challenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumberN != 0 {
		i = encodeVarintSettlement(dAtA, i, uint64(m.BlockNumberN))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Challenger) > 0 {
		i -= len(m.Challenger)
		copy(dAtA[i:], m.Challenger)
		i = encodeVarintSettlement(dAtA, i, uint64(len(m.Challenger)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DefendedState) > 0 {
		for k := range m.DefendedState {
			v := m.DefendedState[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintSettlement(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSettlement(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSettlement(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AssertedState) > 0 {
		for k := range m.AssertedState {
			v := m.AssertedState[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintSettlement(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSettlement(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSettlement(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.R) > 0 {
		i -= len(m.R)
		copy(dAtA[i:], m.R)
		i = encodeVarintSettlement(dAtA, i, uint64(len(m.R)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.L) > 0 {
		i -= len(m.L)
		copy(dAtA[i:], m.L)
		i = encodeVarintSettlement(dAtA, i, uint64(len(m.L)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSettlement(dAtA []byte, offset int, v uint64) int {
	offset -= sovSettlement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Challenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.L)
	if l > 0 {
		n += 1 + l + sovSettlement(uint64(l))
	}
	l = len(m.R)
	if l > 0 {
		n += 1 + l + sovSettlement(uint64(l))
	}
	if len(m.AssertedState) > 0 {
		for k, v := range m.AssertedState {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovSettlement(uint64(len(v)))
			}
			mapEntrySize := 1 + sovSettlement(uint64(k)) + l
			n += mapEntrySize + 1 + sovSettlement(uint64(mapEntrySize))
		}
	}
	if len(m.DefendedState) > 0 {
		for k, v := range m.DefendedState {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovSettlement(uint64(len(v)))
			}
			mapEntrySize := 1 + sovSettlement(uint64(k)) + l
			n += mapEntrySize + 1 + sovSettlement(uint64(mapEntrySize))
		}
	}
	l = len(m.Challenger)
	if l > 0 {
		n += 1 + l + sovSettlement(uint64(l))
	}
	if m.BlockNumberN != 0 {
		n += 1 + sovSettlement(uint64(m.BlockNumberN))
	}
	return n
}

func sovSettlement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSettlement(x uint64) (n int) {
	return sovSettlement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettlement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSettlement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSettlement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Challenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettlement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSettlement
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L = append(m.L[:0], dAtA[iNdEx:postIndex]...)
			if m.L == nil {
				m.L = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSettlement
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.R = append(m.R[:0], dAtA[iNdEx:postIndex]...)
			if m.R == nil {
				m.R = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertedState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettlement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssertedState == nil {
				m.AssertedState = make(map[uint64][]byte)
			}
			var mapkey uint64
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSettlement
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSettlement
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSettlement
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthSettlement
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthSettlement
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSettlement(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSettlement
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AssertedState[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefendedState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettlement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefendedState == nil {
				m.DefendedState = make(map[uint64][]byte)
			}
			var mapkey uint64
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSettlement
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSettlement
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSettlement
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthSettlement
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthSettlement
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSettlement(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSettlement
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DefendedState[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettlement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettlement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumberN", wireType)
			}
			m.BlockNumberN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettlement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumberN |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSettlement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSettlement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSettlement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSettlement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettlement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettlement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSettlement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSettlement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSettlement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSettlement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSettlement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSettlement = fmt.Errorf("proto: unexpected end of group")
)
