// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: finschia/or/settlement/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgStartChallenge struct {
	From        string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To          string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	RollupName  string `protobuf:"bytes,3,opt,name=rollup_name,json=rollupName,proto3" json:"rollup_name,omitempty"`
	BlockHeight int64  `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	StepCount   uint64 `protobuf:"varint,5,opt,name=step_count,json=stepCount,proto3" json:"step_count,omitempty"`
}

func (m *MsgStartChallenge) Reset()         { *m = MsgStartChallenge{} }
func (m *MsgStartChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgStartChallenge) ProtoMessage()    {}
func (*MsgStartChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{0}
}
func (m *MsgStartChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartChallenge.Merge(m, src)
}
func (m *MsgStartChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartChallenge proto.InternalMessageInfo

func (m *MsgStartChallenge) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgStartChallenge) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MsgStartChallenge) GetRollupName() string {
	if m != nil {
		return m.RollupName
	}
	return ""
}

func (m *MsgStartChallenge) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgStartChallenge) GetStepCount() uint64 {
	if m != nil {
		return m.StepCount
	}
	return 0
}

type MsgStartChallengeResponse struct {
	ChallengeId string `protobuf:"bytes,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *MsgStartChallengeResponse) Reset()         { *m = MsgStartChallengeResponse{} }
func (m *MsgStartChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartChallengeResponse) ProtoMessage()    {}
func (*MsgStartChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{1}
}
func (m *MsgStartChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartChallengeResponse.Merge(m, src)
}
func (m *MsgStartChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartChallengeResponse proto.InternalMessageInfo

func (m *MsgStartChallengeResponse) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

type MsgNsectChallenge struct {
	From        string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ChallengeId string   `protobuf:"bytes,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	StateHashes [][]byte `protobuf:"bytes,3,rep,name=state_hashes,json=stateHashes,proto3" json:"state_hashes,omitempty"`
}

func (m *MsgNsectChallenge) Reset()         { *m = MsgNsectChallenge{} }
func (m *MsgNsectChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgNsectChallenge) ProtoMessage()    {}
func (*MsgNsectChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{2}
}
func (m *MsgNsectChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNsectChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNsectChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNsectChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNsectChallenge.Merge(m, src)
}
func (m *MsgNsectChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgNsectChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNsectChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNsectChallenge proto.InternalMessageInfo

func (m *MsgNsectChallenge) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgNsectChallenge) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *MsgNsectChallenge) GetStateHashes() [][]byte {
	if m != nil {
		return m.StateHashes
	}
	return nil
}

type MsgNsectChallengeResponse struct {
}

func (m *MsgNsectChallengeResponse) Reset()         { *m = MsgNsectChallengeResponse{} }
func (m *MsgNsectChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNsectChallengeResponse) ProtoMessage()    {}
func (*MsgNsectChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{3}
}
func (m *MsgNsectChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNsectChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNsectChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNsectChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNsectChallengeResponse.Merge(m, src)
}
func (m *MsgNsectChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNsectChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNsectChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNsectChallengeResponse proto.InternalMessageInfo

type MsgFinishChallenge struct {
	From        string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	ChallengeId string   `protobuf:"bytes,2,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	Witness     *Witness `protobuf:"bytes,3,opt,name=witness,proto3" json:"witness,omitempty"`
}

func (m *MsgFinishChallenge) Reset()         { *m = MsgFinishChallenge{} }
func (m *MsgFinishChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgFinishChallenge) ProtoMessage()    {}
func (*MsgFinishChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{4}
}
func (m *MsgFinishChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinishChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinishChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinishChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinishChallenge.Merge(m, src)
}
func (m *MsgFinishChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinishChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinishChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinishChallenge proto.InternalMessageInfo

func (m *MsgFinishChallenge) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgFinishChallenge) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *MsgFinishChallenge) GetWitness() *Witness {
	if m != nil {
		return m.Witness
	}
	return nil
}

type MsgFinishChallengeResponse struct {
}

func (m *MsgFinishChallengeResponse) Reset()         { *m = MsgFinishChallengeResponse{} }
func (m *MsgFinishChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFinishChallengeResponse) ProtoMessage()    {}
func (*MsgFinishChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{5}
}
func (m *MsgFinishChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinishChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinishChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinishChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinishChallengeResponse.Merge(m, src)
}
func (m *MsgFinishChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinishChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinishChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinishChallengeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgStartChallenge)(nil), "finschia.or.settlement.v1.MsgStartChallenge")
	proto.RegisterType((*MsgStartChallengeResponse)(nil), "finschia.or.settlement.v1.MsgStartChallengeResponse")
	proto.RegisterType((*MsgNsectChallenge)(nil), "finschia.or.settlement.v1.MsgNsectChallenge")
	proto.RegisterType((*MsgNsectChallengeResponse)(nil), "finschia.or.settlement.v1.MsgNsectChallengeResponse")
	proto.RegisterType((*MsgFinishChallenge)(nil), "finschia.or.settlement.v1.MsgFinishChallenge")
	proto.RegisterType((*MsgFinishChallengeResponse)(nil), "finschia.or.settlement.v1.MsgFinishChallengeResponse")
}

func init() {
	proto.RegisterFile("finschia/or/settlement/v1/tx.proto", fileDescriptor_3859f618de6eb745)
}

var fileDescriptor_3859f618de6eb745 = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x73, 0x76, 0x00, 0xf5, 0x75, 0x15, 0xc4, 0x4d, 0x6e, 0x00, 0x13, 0x3c, 0x45, 0x88,
	0xda, 0x6a, 0xf9, 0x33, 0x21, 0x06, 0x2a, 0x55, 0x65, 0x48, 0x85, 0xcc, 0x80, 0xc4, 0x62, 0x39,
	0xce, 0xd5, 0xb6, 0x6a, 0xdf, 0x59, 0x7e, 0xdf, 0xb4, 0xe5, 0x23, 0xb0, 0x31, 0xf3, 0x89, 0x18,
	0x3b, 0x32, 0xa2, 0x64, 0xe3, 0x53, 0xa0, 0x5c, 0xb9, 0x42, 0x1d, 0xda, 0x28, 0x62, 0x8b, 0x7e,
	0x79, 0xee, 0x7d, 0x9e, 0xf3, 0x73, 0x2f, 0xf8, 0x47, 0x85, 0xc4, 0x34, 0x2f, 0x92, 0x50, 0x35,
	0x21, 0x0a, 0xa2, 0x52, 0x54, 0x42, 0x52, 0x78, 0xb2, 0x13, 0xd2, 0x59, 0x50, 0x37, 0x8a, 0x14,
	0xdf, 0x32, 0x9a, 0x40, 0x35, 0xc1, 0x1f, 0x4d, 0x70, 0xb2, 0xd3, 0x7f, 0x72, 0xfd, 0xf1, 0xbf,
	0x84, 0x7a, 0x8c, 0xff, 0x95, 0xc1, 0xbd, 0x11, 0x66, 0xef, 0x29, 0x69, 0x68, 0x2f, 0x4f, 0xca,
	0x52, 0xc8, 0x4c, 0x70, 0x0e, 0xdd, 0xa3, 0x46, 0x55, 0x2e, 0x1b, 0xb0, 0xe1, 0x46, 0xa4, 0x7f,
	0xf3, 0x1e, 0x58, 0xa4, 0x5c, 0x4b, 0x13, 0x8b, 0x14, 0x7f, 0x04, 0x4e, 0xa3, 0xca, 0x72, 0x5a,
	0xc7, 0x32, 0xa9, 0x84, 0x6b, 0xeb, 0x3f, 0xe0, 0x02, 0x1d, 0x26, 0x95, 0xe0, 0x8f, 0x61, 0x73,
	0x5c, 0xaa, 0xf4, 0x38, 0xce, 0x45, 0x91, 0xe5, 0xe4, 0x76, 0x07, 0x6c, 0x68, 0x47, 0x8e, 0x66,
	0x07, 0x1a, 0xf1, 0x87, 0x00, 0x48, 0xa2, 0x8e, 0x53, 0x35, 0x95, 0xe4, 0xde, 0x1a, 0xb0, 0x61,
	0x37, 0xda, 0x58, 0x90, 0xbd, 0x05, 0xf0, 0x5f, 0xc3, 0xd6, 0x52, 0xb6, 0x48, 0x60, 0xad, 0x24,
	0xea, 0xf1, 0xa9, 0x81, 0x71, 0x31, 0xf9, 0x9d, 0xd5, 0xb9, 0x64, 0x6f, 0x27, 0x7e, 0xa5, 0xef,
	0x76, 0x88, 0x22, 0x5d, 0x71, 0xb7, 0xf6, 0x2c, 0x6b, 0x69, 0xd6, 0x42, 0x82, 0x94, 0x90, 0x88,
	0xf3, 0x04, 0x73, 0x81, 0xae, 0x3d, 0xb0, 0x87, 0x9b, 0x91, 0xa3, 0xd9, 0x81, 0x46, 0xfe, 0x7d,
	0x1d, 0xf7, 0xaa, 0x9d, 0x89, 0xeb, 0x7f, 0x66, 0xc0, 0x47, 0x98, 0xed, 0x17, 0xb2, 0xc0, 0xfc,
	0xbf, 0xd3, 0xbc, 0x82, 0x3b, 0xa7, 0x05, 0x49, 0x81, 0xa8, 0x3f, 0xbc, 0xb3, 0xeb, 0x07, 0xd7,
	0xbe, 0x87, 0xe0, 0xc3, 0x85, 0x32, 0x32, 0x47, 0xfc, 0x07, 0xd0, 0x5f, 0x8e, 0x62, 0x92, 0xee,
	0xfe, 0xb4, 0xc0, 0x1e, 0x61, 0xc6, 0x09, 0x7a, 0xad, 0x67, 0xf1, 0xf4, 0x06, 0x93, 0xa5, 0xa2,
	0xfa, 0xcf, 0xd7, 0x51, 0x5f, 0xd6, 0x4a, 0xd0, 0x6b, 0x15, 0xb6, 0xc2, 0xf5, 0xaa, 0x7a, 0x95,
	0xeb, 0xbf, 0xdb, 0xe1, 0xa7, 0x70, 0xb7, 0xdd, 0xcc, 0xf6, 0xcd, 0x83, 0x5a, 0xf2, 0xfe, 0x8b,
	0xb5, 0xe4, 0xc6, 0xf8, 0xcd, 0xbb, 0x6f, 0x33, 0x8f, 0x9d, 0xcf, 0x3c, 0xf6, 0x63, 0xe6, 0xb1,
	0x2f, 0x73, 0xaf, 0x73, 0x3e, 0xf7, 0x3a, 0xdf, 0xe7, 0x5e, 0xe7, 0xe3, 0xcb, 0xac, 0xa0, 0x7c,
	0x3a, 0x0e, 0x52, 0x55, 0x85, 0xfb, 0x66, 0xa1, 0x8d, 0xc7, 0x36, 0x4e, 0x8e, 0xc3, 0xb3, 0xd6,
	0x7e, 0xd3, 0xa7, 0x5a, 0xe0, 0xf8, 0xb6, 0x5e, 0xec, 0x67, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xdc, 0x45, 0x43, 0x69, 0x45, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	StartChallenge(ctx context.Context, in *MsgStartChallenge, opts ...grpc.CallOption) (*MsgStartChallengeResponse, error)
	NsectChallenge(ctx context.Context, in *MsgNsectChallenge, opts ...grpc.CallOption) (*MsgNsectChallengeResponse, error)
	FinishChallenge(ctx context.Context, in *MsgFinishChallenge, opts ...grpc.CallOption) (*MsgFinishChallengeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) StartChallenge(ctx context.Context, in *MsgStartChallenge, opts ...grpc.CallOption) (*MsgStartChallengeResponse, error) {
	out := new(MsgStartChallengeResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.settlement.v1.Msg/StartChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NsectChallenge(ctx context.Context, in *MsgNsectChallenge, opts ...grpc.CallOption) (*MsgNsectChallengeResponse, error) {
	out := new(MsgNsectChallengeResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.settlement.v1.Msg/NsectChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinishChallenge(ctx context.Context, in *MsgFinishChallenge, opts ...grpc.CallOption) (*MsgFinishChallengeResponse, error) {
	out := new(MsgFinishChallengeResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.settlement.v1.Msg/FinishChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	StartChallenge(context.Context, *MsgStartChallenge) (*MsgStartChallengeResponse, error)
	NsectChallenge(context.Context, *MsgNsectChallenge) (*MsgNsectChallengeResponse, error)
	FinishChallenge(context.Context, *MsgFinishChallenge) (*MsgFinishChallengeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) StartChallenge(ctx context.Context, req *MsgStartChallenge) (*MsgStartChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartChallenge not implemented")
}
func (*UnimplementedMsgServer) NsectChallenge(ctx context.Context, req *MsgNsectChallenge) (*MsgNsectChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NsectChallenge not implemented")
}
func (*UnimplementedMsgServer) FinishChallenge(ctx context.Context, req *MsgFinishChallenge) (*MsgFinishChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishChallenge not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_StartChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.settlement.v1.Msg/StartChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartChallenge(ctx, req.(*MsgStartChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NsectChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNsectChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NsectChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.settlement.v1.Msg/NsectChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NsectChallenge(ctx, req.(*MsgNsectChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinishChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinishChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinishChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.settlement.v1.Msg/FinishChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinishChallenge(ctx, req.(*MsgFinishChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "finschia.or.settlement.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartChallenge",
			Handler:    _Msg_StartChallenge_Handler,
		},
		{
			MethodName: "NsectChallenge",
			Handler:    _Msg_NsectChallenge_Handler,
		},
		{
			MethodName: "FinishChallenge",
			Handler:    _Msg_FinishChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finschia/or/settlement/v1/tx.proto",
}

func (m *MsgStartChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StepCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StepCount))
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RollupName) > 0 {
		i -= len(m.RollupName)
		copy(dAtA[i:], m.RollupName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RollupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNsectChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNsectChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNsectChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateHashes) > 0 {
		for iNdEx := len(m.StateHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StateHashes[iNdEx])
			copy(dAtA[i:], m.StateHashes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.StateHashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNsectChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNsectChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNsectChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFinishChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinishChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinishChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Witness != nil {
		{
			size, err := m.Witness.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinishChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinishChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinishChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgStartChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RollupName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	if m.StepCount != 0 {
		n += 1 + sovTx(uint64(m.StepCount))
	}
	return n
}

func (m *MsgStartChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNsectChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.StateHashes) > 0 {
		for _, b := range m.StateHashes {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgNsectChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFinishChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Witness != nil {
		l = m.Witness.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFinishChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgStartChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepCount", wireType)
			}
			m.StepCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StepCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNsectChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNsectChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNsectChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateHashes = append(m.StateHashes, make([]byte, postIndex-iNdEx))
			copy(m.StateHashes[len(m.StateHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNsectChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNsectChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNsectChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinishChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinishChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinishChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Witness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Witness == nil {
				m.Witness = &Witness{}
			}
			if err := m.Witness.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinishChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinishChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinishChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
