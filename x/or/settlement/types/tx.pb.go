// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: finschia/or/settlement/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgInitiateChallenge struct {
	BlockNumberN     int64  `protobuf:"varint,1,opt,name=block_number_n,json=blockNumberN,proto3" json:"block_number_n,omitempty"`
	BlockHeaderNp1   []byte `protobuf:"bytes,2,opt,name=block_header_np1,json=blockHeaderNp1,proto3" json:"block_header_np1,omitempty"`
	AssertionRoot    []byte `protobuf:"bytes,3,opt,name=assertion_root,json=assertionRoot,proto3" json:"assertion_root,omitempty"`
	FinalSystemState []byte `protobuf:"bytes,4,opt,name=final_system_state,json=finalSystemState,proto3" json:"final_system_state,omitempty"`
	StepCount        uint64 `protobuf:"varint,5,opt,name=step_count,json=stepCount,proto3" json:"step_count,omitempty"`
}

func (m *MsgInitiateChallenge) Reset()         { *m = MsgInitiateChallenge{} }
func (m *MsgInitiateChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateChallenge) ProtoMessage()    {}
func (*MsgInitiateChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{0}
}
func (m *MsgInitiateChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateChallenge.Merge(m, src)
}
func (m *MsgInitiateChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateChallenge proto.InternalMessageInfo

func (m *MsgInitiateChallenge) GetBlockNumberN() int64 {
	if m != nil {
		return m.BlockNumberN
	}
	return 0
}

func (m *MsgInitiateChallenge) GetBlockHeaderNp1() []byte {
	if m != nil {
		return m.BlockHeaderNp1
	}
	return nil
}

func (m *MsgInitiateChallenge) GetAssertionRoot() []byte {
	if m != nil {
		return m.AssertionRoot
	}
	return nil
}

func (m *MsgInitiateChallenge) GetFinalSystemState() []byte {
	if m != nil {
		return m.FinalSystemState
	}
	return nil
}

func (m *MsgInitiateChallenge) GetStepCount() uint64 {
	if m != nil {
		return m.StepCount
	}
	return 0
}

type MsgInitiateChallengeResponse struct {
	ChallengeId uint64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *MsgInitiateChallengeResponse) Reset()         { *m = MsgInitiateChallengeResponse{} }
func (m *MsgInitiateChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateChallengeResponse) ProtoMessage()    {}
func (*MsgInitiateChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{1}
}
func (m *MsgInitiateChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateChallengeResponse.Merge(m, src)
}
func (m *MsgInitiateChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateChallengeResponse proto.InternalMessageInfo

func (m *MsgInitiateChallengeResponse) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

type MsgProposeState struct {
	ChallengeId uint64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	StateHash   []byte `protobuf:"bytes,2,opt,name=state_hash,json=stateHash,proto3" json:"state_hash,omitempty"`
}

func (m *MsgProposeState) Reset()         { *m = MsgProposeState{} }
func (m *MsgProposeState) String() string { return proto.CompactTextString(m) }
func (*MsgProposeState) ProtoMessage()    {}
func (*MsgProposeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{2}
}
func (m *MsgProposeState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeState.Merge(m, src)
}
func (m *MsgProposeState) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeState) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeState.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeState proto.InternalMessageInfo

func (m *MsgProposeState) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *MsgProposeState) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

type MsgProposeStateResponse struct {
}

func (m *MsgProposeStateResponse) Reset()         { *m = MsgProposeStateResponse{} }
func (m *MsgProposeStateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProposeStateResponse) ProtoMessage()    {}
func (*MsgProposeStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{3}
}
func (m *MsgProposeStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeStateResponse.Merge(m, src)
}
func (m *MsgProposeStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeStateResponse proto.InternalMessageInfo

type MsgRespondState struct {
	ChallengeId uint64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
	StateHash   []byte `protobuf:"bytes,2,opt,name=state_hash,json=stateHash,proto3" json:"state_hash,omitempty"`
}

func (m *MsgRespondState) Reset()         { *m = MsgRespondState{} }
func (m *MsgRespondState) String() string { return proto.CompactTextString(m) }
func (*MsgRespondState) ProtoMessage()    {}
func (*MsgRespondState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{4}
}
func (m *MsgRespondState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRespondState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRespondState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRespondState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRespondState.Merge(m, src)
}
func (m *MsgRespondState) XXX_Size() int {
	return m.Size()
}
func (m *MsgRespondState) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRespondState.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRespondState proto.InternalMessageInfo

func (m *MsgRespondState) GetChallengeId() uint64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

func (m *MsgRespondState) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

type MsgRespondStateResponse struct {
}

func (m *MsgRespondStateResponse) Reset()         { *m = MsgRespondStateResponse{} }
func (m *MsgRespondStateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRespondStateResponse) ProtoMessage()    {}
func (*MsgRespondStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{5}
}
func (m *MsgRespondStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRespondStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRespondStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRespondStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRespondStateResponse.Merge(m, src)
}
func (m *MsgRespondStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRespondStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRespondStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRespondStateResponse proto.InternalMessageInfo

type MsgConfirmStateTransition struct {
	ChallengeId int64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *MsgConfirmStateTransition) Reset()         { *m = MsgConfirmStateTransition{} }
func (m *MsgConfirmStateTransition) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmStateTransition) ProtoMessage()    {}
func (*MsgConfirmStateTransition) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{6}
}
func (m *MsgConfirmStateTransition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmStateTransition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmStateTransition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmStateTransition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmStateTransition.Merge(m, src)
}
func (m *MsgConfirmStateTransition) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmStateTransition) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmStateTransition.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmStateTransition proto.InternalMessageInfo

func (m *MsgConfirmStateTransition) GetChallengeId() int64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

type MsgConfirmStateTransitionResponse struct {
}

func (m *MsgConfirmStateTransitionResponse) Reset()         { *m = MsgConfirmStateTransitionResponse{} }
func (m *MsgConfirmStateTransitionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConfirmStateTransitionResponse) ProtoMessage()    {}
func (*MsgConfirmStateTransitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{7}
}
func (m *MsgConfirmStateTransitionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConfirmStateTransitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConfirmStateTransitionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConfirmStateTransitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConfirmStateTransitionResponse.Merge(m, src)
}
func (m *MsgConfirmStateTransitionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConfirmStateTransitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConfirmStateTransitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConfirmStateTransitionResponse proto.InternalMessageInfo

type MsgDenyStateTransition struct {
	ChallengeId int64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *MsgDenyStateTransition) Reset()         { *m = MsgDenyStateTransition{} }
func (m *MsgDenyStateTransition) String() string { return proto.CompactTextString(m) }
func (*MsgDenyStateTransition) ProtoMessage()    {}
func (*MsgDenyStateTransition) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{8}
}
func (m *MsgDenyStateTransition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDenyStateTransition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDenyStateTransition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDenyStateTransition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDenyStateTransition.Merge(m, src)
}
func (m *MsgDenyStateTransition) XXX_Size() int {
	return m.Size()
}
func (m *MsgDenyStateTransition) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDenyStateTransition.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDenyStateTransition proto.InternalMessageInfo

func (m *MsgDenyStateTransition) GetChallengeId() int64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

type MsgDenyStateTransitionResponse struct {
}

func (m *MsgDenyStateTransitionResponse) Reset()         { *m = MsgDenyStateTransitionResponse{} }
func (m *MsgDenyStateTransitionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDenyStateTransitionResponse) ProtoMessage()    {}
func (*MsgDenyStateTransitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{9}
}
func (m *MsgDenyStateTransitionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDenyStateTransitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDenyStateTransitionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDenyStateTransitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDenyStateTransitionResponse.Merge(m, src)
}
func (m *MsgDenyStateTransitionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDenyStateTransitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDenyStateTransitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDenyStateTransitionResponse proto.InternalMessageInfo

type MsgAddTrieNode struct {
	ChallengeId int64 `protobuf:"varint,1,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *MsgAddTrieNode) Reset()         { *m = MsgAddTrieNode{} }
func (m *MsgAddTrieNode) String() string { return proto.CompactTextString(m) }
func (*MsgAddTrieNode) ProtoMessage()    {}
func (*MsgAddTrieNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{10}
}
func (m *MsgAddTrieNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTrieNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTrieNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTrieNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTrieNode.Merge(m, src)
}
func (m *MsgAddTrieNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTrieNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTrieNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTrieNode proto.InternalMessageInfo

func (m *MsgAddTrieNode) GetChallengeId() int64 {
	if m != nil {
		return m.ChallengeId
	}
	return 0
}

type MsgAddTrieNodeResponse struct {
}

func (m *MsgAddTrieNodeResponse) Reset()         { *m = MsgAddTrieNodeResponse{} }
func (m *MsgAddTrieNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddTrieNodeResponse) ProtoMessage()    {}
func (*MsgAddTrieNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3859f618de6eb745, []int{11}
}
func (m *MsgAddTrieNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddTrieNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddTrieNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddTrieNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddTrieNodeResponse.Merge(m, src)
}
func (m *MsgAddTrieNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddTrieNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddTrieNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddTrieNodeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgInitiateChallenge)(nil), "finschia.or.settlement.v1.MsgInitiateChallenge")
	proto.RegisterType((*MsgInitiateChallengeResponse)(nil), "finschia.or.settlement.v1.MsgInitiateChallengeResponse")
	proto.RegisterType((*MsgProposeState)(nil), "finschia.or.settlement.v1.MsgProposeState")
	proto.RegisterType((*MsgProposeStateResponse)(nil), "finschia.or.settlement.v1.MsgProposeStateResponse")
	proto.RegisterType((*MsgRespondState)(nil), "finschia.or.settlement.v1.MsgRespondState")
	proto.RegisterType((*MsgRespondStateResponse)(nil), "finschia.or.settlement.v1.MsgRespondStateResponse")
	proto.RegisterType((*MsgConfirmStateTransition)(nil), "finschia.or.settlement.v1.MsgConfirmStateTransition")
	proto.RegisterType((*MsgConfirmStateTransitionResponse)(nil), "finschia.or.settlement.v1.MsgConfirmStateTransitionResponse")
	proto.RegisterType((*MsgDenyStateTransition)(nil), "finschia.or.settlement.v1.MsgDenyStateTransition")
	proto.RegisterType((*MsgDenyStateTransitionResponse)(nil), "finschia.or.settlement.v1.MsgDenyStateTransitionResponse")
	proto.RegisterType((*MsgAddTrieNode)(nil), "finschia.or.settlement.v1.MsgAddTrieNode")
	proto.RegisterType((*MsgAddTrieNodeResponse)(nil), "finschia.or.settlement.v1.MsgAddTrieNodeResponse")
}

func init() {
	proto.RegisterFile("finschia/or/settlement/v1/tx.proto", fileDescriptor_3859f618de6eb745)
}

var fileDescriptor_3859f618de6eb745 = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xbf, 0xb4, 0x9f, 0xd4, 0xdb, 0x10, 0x8a, 0x41, 0xc5, 0x89, 0xc0, 0x4a, 0x03, 0x48,
	0x01, 0x81, 0x2d, 0xb7, 0x08, 0x84, 0x40, 0x48, 0x25, 0x08, 0xb5, 0x0b, 0x47, 0x95, 0xd3, 0x15,
	0x1b, 0xcb, 0x89, 0x27, 0xb6, 0x95, 0x64, 0xc6, 0xf2, 0x9d, 0x54, 0xcd, 0x82, 0x15, 0x5b, 0x16,
	0x3c, 0x16, 0xcb, 0x2e, 0x11, 0x2b, 0x94, 0x48, 0x3c, 0x07, 0xca, 0xb8, 0x36, 0x4e, 0x71, 0x7e,
	0x5a, 0xb1, 0xf4, 0x99, 0xf3, 0x73, 0x67, 0x7c, 0x46, 0x03, 0xb5, 0x6e, 0x40, 0xb1, 0xe3, 0x07,
	0x8e, 0xce, 0x22, 0x1d, 0x09, 0xe7, 0x7d, 0x32, 0x20, 0x94, 0xeb, 0xa7, 0x86, 0xce, 0xcf, 0xb4,
	0x30, 0x62, 0x9c, 0xc9, 0xe5, 0x84, 0xa3, 0xb1, 0x48, 0xfb, 0xc3, 0xd1, 0x4e, 0x8d, 0xda, 0x0f,
	0x09, 0xee, 0x98, 0xe8, 0x1d, 0xd1, 0x80, 0x07, 0x0e, 0x27, 0x0d, 0xdf, 0xe9, 0xf7, 0x09, 0xf5,
	0x88, 0xfc, 0x10, 0x4a, 0xed, 0x3e, 0xeb, 0xf4, 0x6c, 0x3a, 0x1c, 0xb4, 0x49, 0x64, 0x53, 0x45,
	0xaa, 0x4a, 0xf5, 0x82, 0x55, 0x14, 0x68, 0x53, 0x80, 0x4d, 0xb9, 0x0e, 0xdb, 0x31, 0xcb, 0x27,
	0x8e, 0x3b, 0x65, 0x85, 0x86, 0xf2, 0x5f, 0x55, 0xaa, 0x17, 0xad, 0x58, 0x7d, 0x28, 0xe0, 0x66,
	0x68, 0xc8, 0x8f, 0xa0, 0xe4, 0x20, 0x92, 0x88, 0x07, 0x8c, 0xda, 0x11, 0x63, 0x5c, 0x29, 0x08,
	0xde, 0x8d, 0x14, 0xb5, 0x18, 0xe3, 0xf2, 0x53, 0x90, 0xbb, 0x01, 0x75, 0xfa, 0x36, 0x8e, 0x90,
	0x93, 0x81, 0x8d, 0xdc, 0xe1, 0x44, 0x59, 0x17, 0xd4, 0x6d, 0xb1, 0xd2, 0x12, 0x0b, 0xad, 0x29,
	0x2e, 0xdf, 0x07, 0x40, 0x4e, 0x42, 0xbb, 0xc3, 0x86, 0x94, 0x2b, 0x1b, 0x55, 0xa9, 0xbe, 0x6e,
	0x6d, 0x4e, 0x91, 0xc6, 0x14, 0xa8, 0x1d, 0xc0, 0xbd, 0xbc, 0xbd, 0x59, 0x04, 0x43, 0x46, 0x91,
	0xc8, 0xbb, 0x50, 0xec, 0x24, 0xa0, 0x1d, 0xb8, 0x62, 0x87, 0xeb, 0xd6, 0x56, 0x8a, 0x1d, 0xb9,
	0xb5, 0x16, 0xdc, 0x34, 0xd1, 0x3b, 0x8e, 0x58, 0xc8, 0x90, 0xc4, 0xa1, 0xcb, 0x55, 0xf1, 0x5c,
	0x0e, 0x27, 0xb6, 0xef, 0xa0, 0x7f, 0x71, 0x20, 0x9b, 0x02, 0x39, 0x74, 0xd0, 0xaf, 0x95, 0xe1,
	0xee, 0x25, 0xd3, 0x64, 0xa4, 0x8b, 0xbc, 0xf8, 0xd3, 0xfd, 0xb7, 0x79, 0x59, 0xd3, 0x34, 0xef,
	0x2d, 0x94, 0x4d, 0xf4, 0x1a, 0x8c, 0x76, 0x83, 0x28, 0x3e, 0xd4, 0x93, 0xc8, 0xa1, 0x18, 0x4c,
	0x7f, 0x48, 0x6e, 0x72, 0x61, 0xf6, 0x7c, 0x1e, 0xc0, 0xee, 0x5c, 0x7d, 0x1a, 0xf2, 0x1a, 0x76,
	0x4c, 0xf4, 0xde, 0x13, 0x3a, 0xba, 0x46, 0x42, 0x15, 0xd4, 0x7c, 0x71, 0x6a, 0xbf, 0x0f, 0x25,
	0x13, 0xbd, 0x03, 0xd7, 0x3d, 0x89, 0x02, 0xd2, 0x64, 0x2e, 0x59, 0xc5, 0x56, 0x11, 0x33, 0x65,
	0x44, 0x89, 0xdd, 0xde, 0xaf, 0x0d, 0x28, 0x98, 0xe8, 0xc9, 0x9f, 0xe0, 0xd6, 0xdf, 0xd7, 0x42,
	0xd7, 0xe6, 0xde, 0x25, 0x2d, 0xaf, 0x6b, 0x95, 0x97, 0x57, 0x14, 0xa4, 0xe5, 0xa4, 0x50, 0x9c,
	0xa9, 0xdd, 0x93, 0xc5, 0x46, 0x59, 0x6e, 0x65, 0x6f, 0x75, 0x6e, 0x36, 0x6f, 0xa6, 0x76, 0x4b,
	0xf2, 0xb2, 0xdc, 0x65, 0x79, 0x79, 0xcd, 0x93, 0xbf, 0x48, 0xb0, 0x33, 0xa7, 0x77, 0xcf, 0x17,
	0xdb, 0xe5, 0xab, 0x2a, 0x6f, 0xae, 0xa3, 0x4a, 0xc7, 0xf9, 0x2c, 0xc1, 0xed, 0xbc, 0x86, 0x1a,
	0x8b, 0x5d, 0x73, 0x24, 0x95, 0x57, 0x57, 0x96, 0xa4, 0x53, 0xf4, 0x60, 0x2b, 0xdb, 0xe3, 0xc7,
	0x8b, 0x9d, 0x32, 0xd4, 0x8a, 0xb1, 0x32, 0x35, 0x09, 0x7b, 0x77, 0xfc, 0x6d, 0xac, 0x4a, 0xe7,
	0x63, 0x55, 0xfa, 0x39, 0x56, 0xa5, 0xaf, 0x13, 0x75, 0xed, 0x7c, 0xa2, 0xae, 0x7d, 0x9f, 0xa8,
	0x6b, 0x1f, 0x5f, 0x78, 0x01, 0xf7, 0x87, 0x6d, 0xad, 0xc3, 0x06, 0xfa, 0x87, 0xe4, 0x7d, 0x49,
	0xfc, 0x9f, 0xa1, 0xdb, 0xd3, 0xcf, 0x2e, 0x3d, 0x37, 0x7c, 0x14, 0x12, 0x6c, 0xff, 0x2f, 0xde,
	0x9b, 0xfd, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x2f, 0x5a, 0xb8, 0x95, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	InitiateChallenge(ctx context.Context, in *MsgInitiateChallenge, opts ...grpc.CallOption) (*MsgInitiateChallengeResponse, error)
	ProposeState(ctx context.Context, in *MsgProposeState, opts ...grpc.CallOption) (*MsgProposeStateResponse, error)
	RespondState(ctx context.Context, in *MsgRespondState, opts ...grpc.CallOption) (*MsgRespondStateResponse, error)
	ConfirmStateTransition(ctx context.Context, in *MsgConfirmStateTransition, opts ...grpc.CallOption) (*MsgConfirmStateTransitionResponse, error)
	DenyStateTransition(ctx context.Context, in *MsgDenyStateTransition, opts ...grpc.CallOption) (*MsgDenyStateTransitionResponse, error)
	AddTrieNode(ctx context.Context, in *MsgAddTrieNode, opts ...grpc.CallOption) (*MsgAddTrieNodeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) InitiateChallenge(ctx context.Context, in *MsgInitiateChallenge, opts ...grpc.CallOption) (*MsgInitiateChallengeResponse, error) {
	out := new(MsgInitiateChallengeResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.settlement.v1.Msg/InitiateChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProposeState(ctx context.Context, in *MsgProposeState, opts ...grpc.CallOption) (*MsgProposeStateResponse, error) {
	out := new(MsgProposeStateResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.settlement.v1.Msg/ProposeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RespondState(ctx context.Context, in *MsgRespondState, opts ...grpc.CallOption) (*MsgRespondStateResponse, error) {
	out := new(MsgRespondStateResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.settlement.v1.Msg/RespondState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConfirmStateTransition(ctx context.Context, in *MsgConfirmStateTransition, opts ...grpc.CallOption) (*MsgConfirmStateTransitionResponse, error) {
	out := new(MsgConfirmStateTransitionResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.settlement.v1.Msg/ConfirmStateTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DenyStateTransition(ctx context.Context, in *MsgDenyStateTransition, opts ...grpc.CallOption) (*MsgDenyStateTransitionResponse, error) {
	out := new(MsgDenyStateTransitionResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.settlement.v1.Msg/DenyStateTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddTrieNode(ctx context.Context, in *MsgAddTrieNode, opts ...grpc.CallOption) (*MsgAddTrieNodeResponse, error) {
	out := new(MsgAddTrieNodeResponse)
	err := c.cc.Invoke(ctx, "/finschia.or.settlement.v1.Msg/AddTrieNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	InitiateChallenge(context.Context, *MsgInitiateChallenge) (*MsgInitiateChallengeResponse, error)
	ProposeState(context.Context, *MsgProposeState) (*MsgProposeStateResponse, error)
	RespondState(context.Context, *MsgRespondState) (*MsgRespondStateResponse, error)
	ConfirmStateTransition(context.Context, *MsgConfirmStateTransition) (*MsgConfirmStateTransitionResponse, error)
	DenyStateTransition(context.Context, *MsgDenyStateTransition) (*MsgDenyStateTransitionResponse, error)
	AddTrieNode(context.Context, *MsgAddTrieNode) (*MsgAddTrieNodeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) InitiateChallenge(ctx context.Context, req *MsgInitiateChallenge) (*MsgInitiateChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateChallenge not implemented")
}
func (*UnimplementedMsgServer) ProposeState(ctx context.Context, req *MsgProposeState) (*MsgProposeStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeState not implemented")
}
func (*UnimplementedMsgServer) RespondState(ctx context.Context, req *MsgRespondState) (*MsgRespondStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondState not implemented")
}
func (*UnimplementedMsgServer) ConfirmStateTransition(ctx context.Context, req *MsgConfirmStateTransition) (*MsgConfirmStateTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmStateTransition not implemented")
}
func (*UnimplementedMsgServer) DenyStateTransition(ctx context.Context, req *MsgDenyStateTransition) (*MsgDenyStateTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyStateTransition not implemented")
}
func (*UnimplementedMsgServer) AddTrieNode(ctx context.Context, req *MsgAddTrieNode) (*MsgAddTrieNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrieNode not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_InitiateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitiateChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitiateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.settlement.v1.Msg/InitiateChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitiateChallenge(ctx, req.(*MsgInitiateChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProposeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProposeState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProposeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.settlement.v1.Msg/ProposeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProposeState(ctx, req.(*MsgProposeState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RespondState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRespondState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RespondState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.settlement.v1.Msg/RespondState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RespondState(ctx, req.(*MsgRespondState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConfirmStateTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConfirmStateTransition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConfirmStateTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.settlement.v1.Msg/ConfirmStateTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConfirmStateTransition(ctx, req.(*MsgConfirmStateTransition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DenyStateTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDenyStateTransition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DenyStateTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.settlement.v1.Msg/DenyStateTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DenyStateTransition(ctx, req.(*MsgDenyStateTransition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddTrieNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddTrieNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddTrieNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.or.settlement.v1.Msg/AddTrieNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddTrieNode(ctx, req.(*MsgAddTrieNode))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "finschia.or.settlement.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateChallenge",
			Handler:    _Msg_InitiateChallenge_Handler,
		},
		{
			MethodName: "ProposeState",
			Handler:    _Msg_ProposeState_Handler,
		},
		{
			MethodName: "RespondState",
			Handler:    _Msg_RespondState_Handler,
		},
		{
			MethodName: "ConfirmStateTransition",
			Handler:    _Msg_ConfirmStateTransition_Handler,
		},
		{
			MethodName: "DenyStateTransition",
			Handler:    _Msg_DenyStateTransition_Handler,
		},
		{
			MethodName: "AddTrieNode",
			Handler:    _Msg_AddTrieNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finschia/or/settlement/v1/tx.proto",
}

func (m *MsgInitiateChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StepCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StepCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.FinalSystemState) > 0 {
		i -= len(m.FinalSystemState)
		copy(dAtA[i:], m.FinalSystemState)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FinalSystemState)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AssertionRoot) > 0 {
		i -= len(m.AssertionRoot)
		copy(dAtA[i:], m.AssertionRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssertionRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BlockHeaderNp1) > 0 {
		i -= len(m.BlockHeaderNp1)
		copy(dAtA[i:], m.BlockHeaderNp1)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHeaderNp1)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockNumberN != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockNumberN))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitiateChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateHash) > 0 {
		i -= len(m.StateHash)
		copy(dAtA[i:], m.StateHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StateHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChallengeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRespondState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRespondState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRespondState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StateHash) > 0 {
		i -= len(m.StateHash)
		copy(dAtA[i:], m.StateHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StateHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChallengeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRespondStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRespondStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRespondStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConfirmStateTransition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmStateTransition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmStateTransition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgConfirmStateTransitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConfirmStateTransitionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConfirmStateTransitionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDenyStateTransition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDenyStateTransition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDenyStateTransition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDenyStateTransitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDenyStateTransitionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDenyStateTransitionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddTrieNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTrieNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTrieNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChallengeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddTrieNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddTrieNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddTrieNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgInitiateChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockNumberN != 0 {
		n += 1 + sovTx(uint64(m.BlockNumberN))
	}
	l = len(m.BlockHeaderNp1)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AssertionRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FinalSystemState)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StepCount != 0 {
		n += 1 + sovTx(uint64(m.StepCount))
	}
	return n
}

func (m *MsgInitiateChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeId != 0 {
		n += 1 + sovTx(uint64(m.ChallengeId))
	}
	return n
}

func (m *MsgProposeState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeId != 0 {
		n += 1 + sovTx(uint64(m.ChallengeId))
	}
	l = len(m.StateHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProposeStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRespondState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeId != 0 {
		n += 1 + sovTx(uint64(m.ChallengeId))
	}
	l = len(m.StateHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRespondStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConfirmStateTransition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeId != 0 {
		n += 1 + sovTx(uint64(m.ChallengeId))
	}
	return n
}

func (m *MsgConfirmStateTransitionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDenyStateTransition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeId != 0 {
		n += 1 + sovTx(uint64(m.ChallengeId))
	}
	return n
}

func (m *MsgDenyStateTransitionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddTrieNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChallengeId != 0 {
		n += 1 + sovTx(uint64(m.ChallengeId))
	}
	return n
}

func (m *MsgAddTrieNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgInitiateChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumberN", wireType)
			}
			m.BlockNumberN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumberN |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeaderNp1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeaderNp1 = append(m.BlockHeaderNp1[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHeaderNp1 == nil {
				m.BlockHeaderNp1 = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssertionRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssertionRoot = append(m.AssertionRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.AssertionRoot == nil {
				m.AssertionRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalSystemState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalSystemState = append(m.FinalSystemState[:0], dAtA[iNdEx:postIndex]...)
			if m.FinalSystemState == nil {
				m.FinalSystemState = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepCount", wireType)
			}
			m.StepCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StepCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitiateChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateHash = append(m.StateHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StateHash == nil {
				m.StateHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRespondState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRespondState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRespondState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateHash = append(m.StateHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StateHash == nil {
				m.StateHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRespondStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRespondStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRespondStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmStateTransition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmStateTransition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmStateTransition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConfirmStateTransitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConfirmStateTransitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConfirmStateTransitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDenyStateTransition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDenyStateTransition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDenyStateTransition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDenyStateTransitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDenyStateTransitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDenyStateTransitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddTrieNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTrieNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTrieNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			m.ChallengeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddTrieNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddTrieNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddTrieNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
