// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/line/lbm-sdk/x/distribution/types"
	mock "github.com/stretchr/testify/mock"
)

// MsgServer is an autogenerated mock type for the MsgServer type
type MsgServer struct {
	mock.Mock
}

// FundCommunityPool provides a mock function with given fields: _a0, _a1
func (_m *MsgServer) FundCommunityPool(_a0 context.Context, _a1 *types.MsgFundCommunityPool) (*types.MsgFundCommunityPoolResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.MsgFundCommunityPoolResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgFundCommunityPool) *types.MsgFundCommunityPoolResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgFundCommunityPoolResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgFundCommunityPool) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetWithdrawAddress provides a mock function with given fields: _a0, _a1
func (_m *MsgServer) SetWithdrawAddress(_a0 context.Context, _a1 *types.MsgSetWithdrawAddress) (*types.MsgSetWithdrawAddressResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.MsgSetWithdrawAddressResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgSetWithdrawAddress) *types.MsgSetWithdrawAddressResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgSetWithdrawAddressResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgSetWithdrawAddress) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawDelegatorReward provides a mock function with given fields: _a0, _a1
func (_m *MsgServer) WithdrawDelegatorReward(_a0 context.Context, _a1 *types.MsgWithdrawDelegatorReward) (*types.MsgWithdrawDelegatorRewardResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.MsgWithdrawDelegatorRewardResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgWithdrawDelegatorReward) *types.MsgWithdrawDelegatorRewardResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgWithdrawDelegatorRewardResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgWithdrawDelegatorReward) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawValidatorCommission provides a mock function with given fields: _a0, _a1
func (_m *MsgServer) WithdrawValidatorCommission(_a0 context.Context, _a1 *types.MsgWithdrawValidatorCommission) (*types.MsgWithdrawValidatorCommissionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *types.MsgWithdrawValidatorCommissionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.MsgWithdrawValidatorCommission) *types.MsgWithdrawValidatorCommissionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MsgWithdrawValidatorCommissionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *types.MsgWithdrawValidatorCommission) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMsgServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMsgServer creates a new instance of MsgServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMsgServer(t mockConstructorTestingTNewMsgServer) *MsgServer {
	mock := &MsgServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
