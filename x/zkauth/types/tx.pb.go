// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: finschia/zkauth/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/Finschia/finschia-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgExecution struct {
	// msgs is the msg of the bank or collection that the account wants to execute.
	Msgs []*types.Any `protobuf:"bytes,1,rep,name=msgs,proto3" json:"msgs,omitempty"`
	// ZkAuthSignature is the signature required for zkp verification.
	ZkAuthSignature ZKAuthSignature `protobuf:"bytes,2,opt,name=zk_auth_signature,json=zkAuthSignature,proto3" json:"zk_auth_signature"`
}

func (m *MsgExecution) Reset()         { *m = MsgExecution{} }
func (m *MsgExecution) String() string { return proto.CompactTextString(m) }
func (*MsgExecution) ProtoMessage()    {}
func (*MsgExecution) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa153348b02c6cc1, []int{0}
}
func (m *MsgExecution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecution.Merge(m, src)
}
func (m *MsgExecution) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecution) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecution.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecution proto.InternalMessageInfo

func (m *MsgExecution) GetMsgs() []*types.Any {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func (m *MsgExecution) GetZkAuthSignature() ZKAuthSignature {
	if m != nil {
		return m.ZkAuthSignature
	}
	return ZKAuthSignature{}
}

type MsgExecutionResponse struct {
	Results [][]byte `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (m *MsgExecutionResponse) Reset()         { *m = MsgExecutionResponse{} }
func (m *MsgExecutionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecutionResponse) ProtoMessage()    {}
func (*MsgExecutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa153348b02c6cc1, []int{1}
}
func (m *MsgExecutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecutionResponse.Merge(m, src)
}
func (m *MsgExecutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecutionResponse proto.InternalMessageInfo

func (m *MsgExecutionResponse) GetResults() [][]byte {
	if m != nil {
		return m.Results
	}
	return nil
}

type ZKAuthSignature struct {
	ZkAuthInputs   *ZKAuthInputs `protobuf:"bytes,1,opt,name=zk_auth_inputs,json=zkAuthInputs,proto3" json:"zk_auth_inputs,omitempty"`
	MaxBlockHeight int64         `protobuf:"varint,2,opt,name=max_block_height,json=maxBlockHeight,proto3" json:"max_block_height,omitempty"`
}

func (m *ZKAuthSignature) Reset()         { *m = ZKAuthSignature{} }
func (m *ZKAuthSignature) String() string { return proto.CompactTextString(m) }
func (*ZKAuthSignature) ProtoMessage()    {}
func (*ZKAuthSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa153348b02c6cc1, []int{2}
}
func (m *ZKAuthSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKAuthSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZKAuthSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZKAuthSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKAuthSignature.Merge(m, src)
}
func (m *ZKAuthSignature) XXX_Size() int {
	return m.Size()
}
func (m *ZKAuthSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKAuthSignature.DiscardUnknown(m)
}

var xxx_messageInfo_ZKAuthSignature proto.InternalMessageInfo

func (m *ZKAuthSignature) GetZkAuthInputs() *ZKAuthInputs {
	if m != nil {
		return m.ZkAuthInputs
	}
	return nil
}

func (m *ZKAuthSignature) GetMaxBlockHeight() int64 {
	if m != nil {
		return m.MaxBlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgExecution)(nil), "finschia.zkauth.v1beta1.MsgExecution")
	proto.RegisterType((*MsgExecutionResponse)(nil), "finschia.zkauth.v1beta1.MsgExecutionResponse")
	proto.RegisterType((*ZKAuthSignature)(nil), "finschia.zkauth.v1beta1.ZKAuthSignature")
}

func init() { proto.RegisterFile("finschia/zkauth/v1beta1/tx.proto", fileDescriptor_aa153348b02c6cc1) }

var fileDescriptor_aa153348b02c6cc1 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0x13, 0x3a, 0x62, 0x84, 0x5b, 0xcd, 0x40, 0x54, 0x89, 0x4e, 0x17, 0xa1, 0xaa, 0x40,
	0xca, 0xa6, 0x36, 0x53, 0xc4, 0x01, 0x1a, 0x09, 0x44, 0x55, 0x75, 0x13, 0x76, 0xdd, 0x44, 0x4e,
	0xea, 0x3a, 0x51, 0x9a, 0x38, 0xaa, 0x6d, 0x94, 0xf6, 0x04, 0x2c, 0xb9, 0x02, 0x77, 0xe0, 0x10,
	0x15, 0xab, 0x2e, 0x59, 0x21, 0xd4, 0x5e, 0x04, 0xc5, 0x8e, 0x45, 0x41, 0xaa, 0x98, 0x5d, 0xde,
	0x9f, 0xcf, 0xef, 0xff, 0x9f, 0xfd, 0xc0, 0x60, 0x95, 0x16, 0x3c, 0x4e, 0x52, 0x8c, 0x76, 0x19,
	0x96, 0x22, 0x41, 0x9f, 0xee, 0x23, 0x22, 0xf0, 0x3d, 0x12, 0x15, 0x2c, 0x37, 0x4c, 0x30, 0xe7,
	0xb9, 0x21, 0xa0, 0x26, 0x60, 0x43, 0xf4, 0xef, 0x62, 0xc6, 0x73, 0xc6, 0x43, 0x85, 0x21, 0x5d,
	0xe8, 0x33, 0xfd, 0x2e, 0x65, 0x94, 0x69, 0xbd, 0xfe, 0x6a, 0xd4, 0x3b, 0xca, 0x18, 0x5d, 0x13,
	0xa4, 0xaa, 0x48, 0xae, 0x10, 0x2e, 0xb6, 0xcd, 0xaf, 0x97, 0x97, 0x62, 0x34, 0x9e, 0x8a, 0x1a,
	0x7e, 0xb5, 0x41, 0x67, 0xce, 0xe9, 0xbb, 0x8a, 0xc4, 0x52, 0xa4, 0xac, 0x70, 0xde, 0x82, 0xab,
	0x9c, 0x53, 0xde, 0xb3, 0x07, 0x2d, 0xaf, 0x3d, 0xee, 0x42, 0x6d, 0x00, 0x8d, 0x01, 0x9c, 0x14,
	0x5b, 0xbf, 0xfd, 0xfd, 0xdb, 0xe8, 0x9a, 0x2f, 0x33, 0x38, 0xe7, 0x34, 0x50, 0xb8, 0xb3, 0x00,
	0xcf, 0x76, 0x59, 0x58, 0x37, 0x0e, 0x79, 0x4a, 0x0b, 0x2c, 0xe4, 0x86, 0xf4, 0x1e, 0x0d, 0x6c,
	0xaf, 0x3d, 0xf6, 0xe0, 0x85, 0x71, 0xe1, 0x62, 0x36, 0x91, 0x22, 0xf9, 0x68, 0x78, 0xff, 0x6a,
	0xff, 0xf3, 0x85, 0x15, 0xdc, 0xee, 0xb2, 0xbf, 0xe4, 0xe1, 0x6b, 0xd0, 0x3d, 0x8f, 0x18, 0x10,
	0x5e, 0xb2, 0x82, 0x13, 0xa7, 0x07, 0xae, 0x37, 0x84, 0xcb, 0xb5, 0xd0, 0x69, 0x3b, 0x81, 0x29,
	0x87, 0x9f, 0x6d, 0x70, 0xfb, 0x4f, 0x73, 0x67, 0x06, 0x6e, 0x4c, 0xc2, 0xb4, 0x28, 0xa5, 0x3a,
	0x54, 0xc7, 0x7b, 0xf5, 0x9f, 0x78, 0x53, 0x05, 0x07, 0x1d, 0x9d, 0x4a, 0x57, 0x8e, 0x07, 0x9e,
	0xe6, 0xb8, 0x0a, 0xa3, 0x35, 0x8b, 0xb3, 0x30, 0x21, 0x29, 0x4d, 0x84, 0x9a, 0xb6, 0x15, 0xdc,
	0xe4, 0xb8, 0xf2, 0x6b, 0xf9, 0x83, 0x52, 0xc7, 0x09, 0x68, 0xcd, 0x39, 0x75, 0x30, 0x78, 0xf2,
	0xe7, 0x8e, 0x2f, 0x5b, 0x9e, 0xcf, 0xd9, 0x1f, 0x3d, 0x08, 0x33, 0xd7, 0xe1, 0x4f, 0xf7, 0x47,
	0xd7, 0x3e, 0x1c, 0x5d, 0xfb, 0xd7, 0xd1, 0xb5, 0xbf, 0x9c, 0x5c, 0xeb, 0x70, 0x72, 0xad, 0x1f,
	0x27, 0xd7, 0x5a, 0x20, 0x9a, 0x8a, 0x44, 0x46, 0x30, 0x66, 0x39, 0x7a, 0x6f, 0xb6, 0xc2, 0xf4,
	0x1e, 0xf1, 0x65, 0x86, 0x2a, 0xb3, 0x24, 0x62, 0x5b, 0x12, 0x1e, 0x3d, 0x56, 0xcf, 0xfd, 0xe6,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x76, 0x55, 0xab, 0xe5, 0xcb, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Execution any msg from zkauth account
	Execution(ctx context.Context, in *MsgExecution, opts ...grpc.CallOption) (*MsgExecutionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Execution(ctx context.Context, in *MsgExecution, opts ...grpc.CallOption) (*MsgExecutionResponse, error) {
	out := new(MsgExecutionResponse)
	err := c.cc.Invoke(ctx, "/finschia.zkauth.v1beta1.Msg/Execution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Execution any msg from zkauth account
	Execution(context.Context, *MsgExecution) (*MsgExecutionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Execution(ctx context.Context, req *MsgExecution) (*MsgExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execution not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Execution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Execution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/finschia.zkauth.v1beta1.Msg/Execution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Execution(ctx, req.(*MsgExecution))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "finschia.zkauth.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execution",
			Handler:    _Msg_Execution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finschia/zkauth/v1beta1/tx.proto",
}

func (m *MsgExecution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ZkAuthSignature.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Results[iNdEx])
			copy(dAtA[i:], m.Results[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Results[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ZKAuthSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKAuthSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKAuthSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ZkAuthInputs != nil {
		{
			size, err := m.ZkAuthInputs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgExecution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.ZkAuthSignature.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgExecutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, b := range m.Results {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *ZKAuthSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ZkAuthInputs != nil {
		l = m.ZkAuthInputs.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.MaxBlockHeight))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgExecution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &types.Any{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkAuthSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZkAuthSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, make([]byte, postIndex-iNdEx))
			copy(m.Results[len(m.Results)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZKAuthSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKAuthSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKAuthSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZkAuthInputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZkAuthInputs == nil {
				m.ZkAuthInputs = &ZKAuthInputs{}
			}
			if err := m.ZkAuthInputs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBlockHeight", wireType)
			}
			m.MaxBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
