// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lbm/zkauth/v1/zkauth.proto

package types

import (
	fmt "fmt"
	_ "github.com/Finschia/finschia-sdk/crypto/keys/secp256k1"
	_ "github.com/Finschia/finschia-sdk/x/auth/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ZKAuthAccount is an Account generated by ZKAuth.
// It conforms to the BaseAccount interface, but pubkey is not present and returns nil.
type ZKAuthAccount struct {
	Address       string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AccountNumber uint64 `protobuf:"varint,2,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	Sequence      uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *ZKAuthAccount) Reset()         { *m = ZKAuthAccount{} }
func (m *ZKAuthAccount) String() string { return proto.CompactTextString(m) }
func (*ZKAuthAccount) ProtoMessage()    {}
func (*ZKAuthAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7e541318f950bcb, []int{0}
}
func (m *ZKAuthAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKAuthAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZKAuthAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZKAuthAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKAuthAccount.Merge(m, src)
}
func (m *ZKAuthAccount) XXX_Size() int {
	return m.Size()
}
func (m *ZKAuthAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKAuthAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ZKAuthAccount proto.InternalMessageInfo

// ZKAuthInputs is a parameter required for zkp verify.
// Contains the values needed to calculate "all inputs hash".
type ZKAuthInputs struct {
	ProofPoints      []byte `protobuf:"bytes,1,opt,name=proof_points,json=proofPoints,proto3" json:"proof_points,omitempty"`
	IssBase64Details *Claim `protobuf:"bytes,2,opt,name=iss_base64_details,json=issBase64Details,proto3" json:"iss_base64_details,omitempty"`
	HeaderBase64     string `protobuf:"bytes,3,opt,name=header_base64,json=headerBase64,proto3" json:"header_base64,omitempty"`
	AddressSeed      string `protobuf:"bytes,4,opt,name=address_seed,json=addressSeed,proto3" json:"address_seed,omitempty"`
}

func (m *ZKAuthInputs) Reset()         { *m = ZKAuthInputs{} }
func (m *ZKAuthInputs) String() string { return proto.CompactTextString(m) }
func (*ZKAuthInputs) ProtoMessage()    {}
func (*ZKAuthInputs) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7e541318f950bcb, []int{1}
}
func (m *ZKAuthInputs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZKAuthInputs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZKAuthInputs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZKAuthInputs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZKAuthInputs.Merge(m, src)
}
func (m *ZKAuthInputs) XXX_Size() int {
	return m.Size()
}
func (m *ZKAuthInputs) XXX_DiscardUnknown() {
	xxx_messageInfo_ZKAuthInputs.DiscardUnknown(m)
}

var xxx_messageInfo_ZKAuthInputs proto.InternalMessageInfo

func (m *ZKAuthInputs) GetProofPoints() []byte {
	if m != nil {
		return m.ProofPoints
	}
	return nil
}

func (m *ZKAuthInputs) GetIssBase64Details() *Claim {
	if m != nil {
		return m.IssBase64Details
	}
	return nil
}

func (m *ZKAuthInputs) GetHeaderBase64() string {
	if m != nil {
		return m.HeaderBase64
	}
	return ""
}

func (m *ZKAuthInputs) GetAddressSeed() string {
	if m != nil {
		return m.AddressSeed
	}
	return ""
}

type Claim struct {
	Value      string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	IndexMod_4 uint32 `protobuf:"varint,2,opt,name=index_mod_4,json=indexMod4,proto3" json:"index_mod_4,omitempty"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7e541318f950bcb, []int{2}
}
func (m *Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return m.Size()
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

func (m *Claim) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Claim) GetIndexMod_4() uint32 {
	if m != nil {
		return m.IndexMod_4
	}
	return 0
}

type JWTDetails struct {
	Kid    string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid,omitempty"`
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Iss    string `protobuf:"bytes,3,opt,name=iss,proto3" json:"iss,omitempty"`
}

func (m *JWTDetails) Reset()         { *m = JWTDetails{} }
func (m *JWTDetails) String() string { return proto.CompactTextString(m) }
func (*JWTDetails) ProtoMessage()    {}
func (*JWTDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7e541318f950bcb, []int{3}
}
func (m *JWTDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JWTDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JWTDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JWTDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTDetails.Merge(m, src)
}
func (m *JWTDetails) XXX_Size() int {
	return m.Size()
}
func (m *JWTDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTDetails.DiscardUnknown(m)
}

var xxx_messageInfo_JWTDetails proto.InternalMessageInfo

func (m *JWTDetails) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

func (m *JWTDetails) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func (m *JWTDetails) GetIss() string {
	if m != nil {
		return m.Iss
	}
	return ""
}

func init() {
	proto.RegisterType((*ZKAuthAccount)(nil), "lbm.zkauth.v1.ZKAuthAccount")
	proto.RegisterType((*ZKAuthInputs)(nil), "lbm.zkauth.v1.ZKAuthInputs")
	proto.RegisterType((*Claim)(nil), "lbm.zkauth.v1.Claim")
	proto.RegisterType((*JWTDetails)(nil), "lbm.zkauth.v1.JWTDetails")
}

func init() { proto.RegisterFile("lbm/zkauth/v1/zkauth.proto", fileDescriptor_e7e541318f950bcb) }

var fileDescriptor_e7e541318f950bcb = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x13, 0xf7, 0x8f, 0x76, 0xda, 0xc8, 0x32, 0x14, 0x89, 0x41, 0xb2, 0x6b, 0x44, 0xe8,
	0x65, 0x33, 0x74, 0xad, 0x7b, 0x10, 0x3c, 0x6c, 0x15, 0xb1, 0x8a, 0x22, 0x51, 0x10, 0xf6, 0x12,
	0x26, 0x99, 0xd9, 0x66, 0xc8, 0x9f, 0x89, 0x99, 0x49, 0xd9, 0xfa, 0x09, 0x3c, 0x7a, 0xf2, 0xbc,
	0x1f, 0xc2, 0xab, 0x77, 0x8f, 0xc5, 0x93, 0x47, 0x69, 0x2f, 0x7e, 0x0c, 0xc9, 0xcc, 0x54, 0xf1,
	0xf6, 0x3e, 0x4f, 0x9e, 0xbc, 0xef, 0xef, 0x7d, 0x19, 0xe0, 0x15, 0x49, 0x89, 0x3e, 0xe6, 0xb8,
	0x95, 0x19, 0x5a, 0x8c, 0x4d, 0x15, 0xd6, 0x0d, 0x97, 0x1c, 0x3a, 0x45, 0x52, 0x86, 0xc6, 0x59,
	0x8c, 0xbd, 0xdb, 0x29, 0x17, 0x25, 0x17, 0xb1, 0xfa, 0x88, 0xb4, 0xd0, 0x49, 0x2f, 0xd0, 0x0a,
	0xa5, 0xcd, 0xb2, 0x96, 0x1c, 0x09, 0x9a, 0xd6, 0x27, 0x0f, 0x4f, 0xf3, 0x31, 0xca, 0xe9, 0x72,
	0x9b, 0xf1, 0x4d, 0xc6, 0x8c, 0x4a, 0xa8, 0xc4, 0x63, 0xf4, 0x6f, 0x9a, 0x37, 0x9c, 0xf3, 0x39,
	0xd7, 0xbd, 0xbb, 0x4a, 0xbb, 0xc1, 0x17, 0x1b, 0x38, 0xe7, 0x2f, 0xcf, 0x5a, 0x99, 0x9d, 0xa5,
	0x29, 0x6f, 0x2b, 0x09, 0x5d, 0x70, 0x1d, 0x13, 0xd2, 0x50, 0x21, 0x5c, 0xfb, 0xc8, 0x1e, 0xf5,
	0xa2, 0xad, 0x84, 0xf7, 0xc1, 0x4d, 0xac, 0x43, 0x71, 0xd5, 0x96, 0x09, 0x6d, 0xdc, 0x6b, 0x47,
	0xf6, 0x68, 0x37, 0x72, 0x8c, 0xfb, 0x5a, 0x99, 0xd0, 0x03, 0x37, 0x04, 0xfd, 0xd0, 0xd2, 0x2a,
	0xa5, 0xee, 0x8e, 0x0a, 0xfc, 0xd5, 0x8f, 0x46, 0x9f, 0xae, 0x0e, 0xad, 0xdf, 0x57, 0x87, 0xd6,
	0x8f, 0xaf, 0xc7, 0x77, 0xcc, 0x8a, 0x66, 0x7f, 0x05, 0x1c, 0x1a, 0x8a, 0x59, 0xf0, 0xcd, 0x06,
	0x03, 0x0d, 0x36, 0xab, 0xea, 0x56, 0x0a, 0x78, 0x17, 0x0c, 0xea, 0x86, 0xf3, 0x8b, 0xb8, 0xe6,
	0xac, 0x92, 0x1a, 0x6e, 0x10, 0xf5, 0x95, 0xf7, 0x46, 0x59, 0x70, 0x0a, 0x20, 0x13, 0x22, 0x4e,
	0xb0, 0xa0, 0xa7, 0x93, 0x98, 0x50, 0x89, 0x59, 0x21, 0x14, 0x64, 0xff, 0x64, 0x18, 0xfe, 0x77,
	0xed, 0xf0, 0x49, 0x81, 0x59, 0x19, 0x1d, 0x30, 0x21, 0xa6, 0x2a, 0xfe, 0x54, 0xa7, 0xe1, 0x3d,
	0xe0, 0x64, 0x14, 0x13, 0xda, 0x98, 0x36, 0x6a, 0x85, 0x5e, 0x34, 0xd0, 0xa6, 0xce, 0x76, 0x2c,
	0xe6, 0x28, 0xb1, 0xa0, 0x94, 0xb8, 0xbb, 0x2a, 0xd3, 0x37, 0xde, 0x5b, 0x4a, 0x49, 0xf0, 0x18,
	0xec, 0xa9, 0x11, 0x70, 0x08, 0xf6, 0x16, 0xb8, 0x68, 0xa9, 0xb9, 0xa6, 0x16, 0xd0, 0x07, 0x7d,
	0x56, 0x11, 0x7a, 0x19, 0x97, 0x9c, 0xc4, 0x13, 0xc5, 0xe8, 0x44, 0x3d, 0x65, 0xbd, 0xe2, 0x64,
	0x12, 0x3c, 0x07, 0xe0, 0xc5, 0xfb, 0x77, 0x5b, 0xa8, 0x03, 0xb0, 0x93, 0x33, 0x62, 0x3a, 0x74,
	0x25, 0xbc, 0x05, 0xf6, 0x35, 0x91, 0xfa, 0xb5, 0x17, 0x19, 0xd5, 0x25, 0x99, 0x10, 0x06, 0xba,
	0x2b, 0xa7, 0xb3, 0xef, 0x6b, 0xdf, 0x5e, 0xad, 0x7d, 0xfb, 0xd7, 0xda, 0xb7, 0x3f, 0x6f, 0x7c,
	0x6b, 0xb5, 0xf1, 0xad, 0x9f, 0x1b, 0xdf, 0x3a, 0x47, 0x73, 0x26, 0xb3, 0x36, 0x09, 0x53, 0x5e,
	0xa2, 0x67, 0xac, 0x12, 0x69, 0xc6, 0x30, 0xba, 0x30, 0xc5, 0xb1, 0x20, 0x39, 0xba, 0xdc, 0x3e,
	0x5d, 0xb9, 0xac, 0xa9, 0x48, 0xf6, 0xd5, 0x9b, 0x79, 0xf0, 0x27, 0x00, 0x00, 0xff, 0xff, 0xbb,
	0x7c, 0xcb, 0xfc, 0xd5, 0x02, 0x00, 0x00,
}

func (m *ZKAuthAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKAuthAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKAuthAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintZkauth(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if m.AccountNumber != 0 {
		i = encodeVarintZkauth(dAtA, i, uint64(m.AccountNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintZkauth(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZKAuthInputs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZKAuthInputs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZKAuthInputs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AddressSeed) > 0 {
		i -= len(m.AddressSeed)
		copy(dAtA[i:], m.AddressSeed)
		i = encodeVarintZkauth(dAtA, i, uint64(len(m.AddressSeed)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HeaderBase64) > 0 {
		i -= len(m.HeaderBase64)
		copy(dAtA[i:], m.HeaderBase64)
		i = encodeVarintZkauth(dAtA, i, uint64(len(m.HeaderBase64)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IssBase64Details != nil {
		{
			size, err := m.IssBase64Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZkauth(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProofPoints) > 0 {
		i -= len(m.ProofPoints)
		copy(dAtA[i:], m.ProofPoints)
		i = encodeVarintZkauth(dAtA, i, uint64(len(m.ProofPoints)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IndexMod_4 != 0 {
		i = encodeVarintZkauth(dAtA, i, uint64(m.IndexMod_4))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintZkauth(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JWTDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWTDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWTDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Iss) > 0 {
		i -= len(m.Iss)
		copy(dAtA[i:], m.Iss)
		i = encodeVarintZkauth(dAtA, i, uint64(len(m.Iss)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Header) > 0 {
		i -= len(m.Header)
		copy(dAtA[i:], m.Header)
		i = encodeVarintZkauth(dAtA, i, uint64(len(m.Header)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kid) > 0 {
		i -= len(m.Kid)
		copy(dAtA[i:], m.Kid)
		i = encodeVarintZkauth(dAtA, i, uint64(len(m.Kid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintZkauth(dAtA []byte, offset int, v uint64) int {
	offset -= sovZkauth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ZKAuthAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovZkauth(uint64(l))
	}
	if m.AccountNumber != 0 {
		n += 1 + sovZkauth(uint64(m.AccountNumber))
	}
	if m.Sequence != 0 {
		n += 1 + sovZkauth(uint64(m.Sequence))
	}
	return n
}

func (m *ZKAuthInputs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProofPoints)
	if l > 0 {
		n += 1 + l + sovZkauth(uint64(l))
	}
	if m.IssBase64Details != nil {
		l = m.IssBase64Details.Size()
		n += 1 + l + sovZkauth(uint64(l))
	}
	l = len(m.HeaderBase64)
	if l > 0 {
		n += 1 + l + sovZkauth(uint64(l))
	}
	l = len(m.AddressSeed)
	if l > 0 {
		n += 1 + l + sovZkauth(uint64(l))
	}
	return n
}

func (m *Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovZkauth(uint64(l))
	}
	if m.IndexMod_4 != 0 {
		n += 1 + sovZkauth(uint64(m.IndexMod_4))
	}
	return n
}

func (m *JWTDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovZkauth(uint64(l))
	}
	l = len(m.Header)
	if l > 0 {
		n += 1 + l + sovZkauth(uint64(l))
	}
	l = len(m.Iss)
	if l > 0 {
		n += 1 + l + sovZkauth(uint64(l))
	}
	return n
}

func sovZkauth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZkauth(x uint64) (n int) {
	return sovZkauth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ZKAuthAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZkauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKAuthAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKAuthAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			m.AccountNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZkauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZkauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZKAuthInputs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZkauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZKAuthInputs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZKAuthInputs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofPoints", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZkauth
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZkauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofPoints = append(m.ProofPoints[:0], dAtA[iNdEx:postIndex]...)
			if m.ProofPoints == nil {
				m.ProofPoints = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssBase64Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZkauth
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZkauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssBase64Details == nil {
				m.IssBase64Details = &Claim{}
			}
			if err := m.IssBase64Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderBase64", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderBase64 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressSeed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressSeed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZkauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZkauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZkauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexMod_4", wireType)
			}
			m.IndexMod_4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexMod_4 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZkauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZkauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JWTDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZkauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JWTDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JWTDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Header = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZkauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZkauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iss = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZkauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZkauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZkauth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZkauth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZkauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZkauth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZkauth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZkauth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZkauth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZkauth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZkauth = fmt.Errorf("proto: unexpected end of group")
)
