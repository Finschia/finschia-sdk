// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: finschia/zkauth/v1beta1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// List of providers available with ZKAuth.
type OidcProvider int32

const (
	Google OidcProvider = 0
)

var OidcProvider_name = map[int32]string{
	0: "OIDC_PROVIDER_GOOGLE",
}

var OidcProvider_value = map[string]int32{
	"OIDC_PROVIDER_GOOGLE": 0,
}

func (x OidcProvider) String() string {
	return proto.EnumName(OidcProvider_name, int32(x))
}

func (OidcProvider) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_90880446cdf3ffc9, []int{0}
}

type Params struct {
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_90880446cdf3ffc9, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Struct that contains info for a JWK.
// The JWK is used to verify the JWT token.
type JWK struct {
	// Key type parameter, https://datatracker.ietf.org/doc/html/rfc7517#section-4.1
	Kty string `protobuf:"bytes,1,opt,name=kty,proto3" json:"kty,omitempty"`
	// RSA public exponent, https://datatracker.ietf.org/doc/html/rfc7517#section-9.3
	E string `protobuf:"bytes,2,opt,name=e,proto3" json:"e,omitempty"`
	// RSA modulus, https://datatracker.ietf.org/doc/html/rfc7517#section-9.3
	N string `protobuf:"bytes,3,opt,name=n,proto3" json:"n,omitempty"`
	// Algorithm parameter, https://datatracker.ietf.org/doc/html/rfc7517#section-4.4
	Alg string `protobuf:"bytes,4,opt,name=alg,proto3" json:"alg,omitempty"`
}

func (m *JWK) Reset()         { *m = JWK{} }
func (m *JWK) String() string { return proto.CompactTextString(m) }
func (*JWK) ProtoMessage()    {}
func (*JWK) Descriptor() ([]byte, []int) {
	return fileDescriptor_90880446cdf3ffc9, []int{1}
}
func (m *JWK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JWK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JWK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JWK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWK.Merge(m, src)
}
func (m *JWK) XXX_Size() int {
	return m.Size()
}
func (m *JWK) XXX_DiscardUnknown() {
	xxx_messageInfo_JWK.DiscardUnknown(m)
}

var xxx_messageInfo_JWK proto.InternalMessageInfo

func (m *JWK) GetKty() string {
	if m != nil {
		return m.Kty
	}
	return ""
}

func (m *JWK) GetE() string {
	if m != nil {
		return m.E
	}
	return ""
}

func (m *JWK) GetN() string {
	if m != nil {
		return m.N
	}
	return ""
}

func (m *JWK) GetAlg() string {
	if m != nil {
		return m.Alg
	}
	return ""
}

type ProviderConfig struct {
	// For example, if Google, iss is https://accounts.google.com and jwk_endpoint is https://www.googleapis.com/oauth2/v3/certs
	Iss         string `protobuf:"bytes,1,opt,name=iss,proto3" json:"iss,omitempty"`
	JwkEndpoint string `protobuf:"bytes,2,opt,name=jwk_endpoint,json=jwkEndpoint,proto3" json:"jwk_endpoint,omitempty"`
	// FetchIntervals is the interval at which the node fetches the oauth_pub_key.
	FetchIntervals uint64 `protobuf:"varint,3,opt,name=fetch_intervals,json=fetchIntervals,proto3" json:"fetch_intervals,omitempty"`
}

func (m *ProviderConfig) Reset()         { *m = ProviderConfig{} }
func (m *ProviderConfig) String() string { return proto.CompactTextString(m) }
func (*ProviderConfig) ProtoMessage()    {}
func (*ProviderConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_90880446cdf3ffc9, []int{2}
}
func (m *ProviderConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProviderConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProviderConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProviderConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderConfig.Merge(m, src)
}
func (m *ProviderConfig) XXX_Size() int {
	return m.Size()
}
func (m *ProviderConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderConfig proto.InternalMessageInfo

func (m *ProviderConfig) GetIss() string {
	if m != nil {
		return m.Iss
	}
	return ""
}

func (m *ProviderConfig) GetJwkEndpoint() string {
	if m != nil {
		return m.JwkEndpoint
	}
	return ""
}

func (m *ProviderConfig) GetFetchIntervals() uint64 {
	if m != nil {
		return m.FetchIntervals
	}
	return 0
}

// In protobuf, it is not possible to define a message for the key in the map, so get the JWK as follows.
// Save the list of kids for iss.
// Save the JWK as a map for the saved kid.
type JwkIdList struct {
	Iss string   `protobuf:"bytes,1,opt,name=iss,proto3" json:"iss,omitempty"`
	Kid []string `protobuf:"bytes,2,rep,name=kid,proto3" json:"kid,omitempty"`
}

func (m *JwkIdList) Reset()         { *m = JwkIdList{} }
func (m *JwkIdList) String() string { return proto.CompactTextString(m) }
func (*JwkIdList) ProtoMessage()    {}
func (*JwkIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_90880446cdf3ffc9, []int{3}
}
func (m *JwkIdList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JwkIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JwkIdList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JwkIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JwkIdList.Merge(m, src)
}
func (m *JwkIdList) XXX_Size() int {
	return m.Size()
}
func (m *JwkIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_JwkIdList.DiscardUnknown(m)
}

var xxx_messageInfo_JwkIdList proto.InternalMessageInfo

func (m *JwkIdList) GetIss() string {
	if m != nil {
		return m.Iss
	}
	return ""
}

func (m *JwkIdList) GetKid() []string {
	if m != nil {
		return m.Kid
	}
	return nil
}

type VerifyParams struct {
	// key is kid
	OidcProviderJwks   map[string]*JWK `protobuf:"bytes,1,rep,name=oidc_provider_jwks,json=oidcProviderJwks,proto3" json:"oidc_provider_jwks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SupportedProviders []OidcProvider  `protobuf:"varint,2,rep,packed,name=supported_providers,json=supportedProviders,proto3,enum=finschia.zkauth.v1beta1.OidcProvider" json:"supported_providers,omitempty"`
}

func (m *VerifyParams) Reset()         { *m = VerifyParams{} }
func (m *VerifyParams) String() string { return proto.CompactTextString(m) }
func (*VerifyParams) ProtoMessage()    {}
func (*VerifyParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_90880446cdf3ffc9, []int{4}
}
func (m *VerifyParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyParams.Merge(m, src)
}
func (m *VerifyParams) XXX_Size() int {
	return m.Size()
}
func (m *VerifyParams) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyParams.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyParams proto.InternalMessageInfo

func (m *VerifyParams) GetOidcProviderJwks() map[string]*JWK {
	if m != nil {
		return m.OidcProviderJwks
	}
	return nil
}

func (m *VerifyParams) GetSupportedProviders() []OidcProvider {
	if m != nil {
		return m.SupportedProviders
	}
	return nil
}

func init() {
	proto.RegisterEnum("finschia.zkauth.v1beta1.OidcProvider", OidcProvider_name, OidcProvider_value)
	proto.RegisterType((*Params)(nil), "finschia.zkauth.v1beta1.Params")
	proto.RegisterType((*JWK)(nil), "finschia.zkauth.v1beta1.JWK")
	proto.RegisterType((*ProviderConfig)(nil), "finschia.zkauth.v1beta1.ProviderConfig")
	proto.RegisterType((*JwkIdList)(nil), "finschia.zkauth.v1beta1.JwkIdList")
	proto.RegisterType((*VerifyParams)(nil), "finschia.zkauth.v1beta1.VerifyParams")
	proto.RegisterMapType((map[string]*JWK)(nil), "finschia.zkauth.v1beta1.VerifyParams.OidcProviderJwksEntry")
}

func init() {
	proto.RegisterFile("finschia/zkauth/v1beta1/params.proto", fileDescriptor_90880446cdf3ffc9)
}

var fileDescriptor_90880446cdf3ffc9 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x8a, 0xd3, 0x40,
	0x1c, 0xc6, 0x93, 0xa6, 0x16, 0x76, 0x5a, 0x6a, 0x19, 0x57, 0x0c, 0x45, 0x62, 0x0d, 0x2b, 0x2e,
	0x82, 0x09, 0x5b, 0x2f, 0x52, 0x6f, 0xee, 0xc6, 0x92, 0xee, 0x42, 0x4a, 0x0e, 0x5d, 0xf0, 0x12,
	0xa6, 0xc9, 0x34, 0x9d, 0x26, 0x9b, 0x09, 0x99, 0x69, 0x63, 0x7c, 0x02, 0xf1, 0xe4, 0xd1, 0x8b,
	0x20, 0xf8, 0x0a, 0x3e, 0x84, 0xc7, 0x3d, 0x7a, 0x94, 0xf6, 0x45, 0x24, 0x49, 0xb3, 0x16, 0x69,
	0x6f, 0x33, 0x1f, 0xbf, 0x7c, 0xdf, 0xff, 0xcb, 0xfc, 0xc1, 0xc9, 0x8c, 0x44, 0xcc, 0x9d, 0x13,
	0xa4, 0x7f, 0x0c, 0xd0, 0x92, 0xcf, 0xf5, 0xd5, 0xd9, 0x14, 0x73, 0x74, 0xa6, 0xc7, 0x28, 0x41,
	0x37, 0x4c, 0x8b, 0x13, 0xca, 0x29, 0x7c, 0x54, 0x51, 0x5a, 0x49, 0x69, 0x5b, 0xaa, 0x7b, 0xec,
	0x53, 0x9f, 0x16, 0x8c, 0x9e, 0x9f, 0x4a, 0x5c, 0x6d, 0x83, 0xc6, 0xb8, 0xf8, 0x7c, 0x50, 0xff,
	0xfa, 0xfd, 0x89, 0xa0, 0x1a, 0x40, 0x1a, 0x5d, 0x5f, 0xc2, 0x0e, 0x90, 0x02, 0x9e, 0xc9, 0x62,
	0x4f, 0x3c, 0x3d, 0xb2, 0xf3, 0x23, 0x6c, 0x01, 0x11, 0xcb, 0xb5, 0xe2, 0x2e, 0xe2, 0xfc, 0x16,
	0xc9, 0x52, 0x79, 0x8b, 0x72, 0x1a, 0x85, 0xbe, 0x5c, 0x2f, 0x69, 0x14, 0xfa, 0x6a, 0x04, 0xda,
	0xe3, 0x84, 0xae, 0x88, 0x87, 0x93, 0x73, 0x1a, 0xcd, 0x88, 0x9f, 0x33, 0x84, 0xb1, 0xca, 0x91,
	0x30, 0x06, 0x9f, 0x82, 0xd6, 0x22, 0x0d, 0x1c, 0x1c, 0x79, 0x31, 0x25, 0x11, 0xdf, 0x9a, 0x37,
	0x17, 0x69, 0x60, 0x6c, 0x25, 0xf8, 0x1c, 0xdc, 0x9f, 0x61, 0xee, 0xce, 0x1d, 0x12, 0x71, 0x9c,
	0xac, 0x50, 0xc8, 0x8a, 0xd0, 0xba, 0xdd, 0x2e, 0x64, 0xb3, 0x52, 0x55, 0x1d, 0x1c, 0x8d, 0xd2,
	0xc0, 0xf4, 0xae, 0x08, 0xe3, 0x7b, 0xa2, 0xf2, 0x3a, 0xc4, 0x93, 0x6b, 0x3d, 0xa9, 0xa8, 0x43,
	0x3c, 0xf5, 0x67, 0x0d, 0xb4, 0x26, 0x38, 0x21, 0xb3, 0xac, 0xac, 0x0f, 0x09, 0x80, 0x94, 0x78,
	0xae, 0x13, 0x6f, 0xc7, 0x76, 0x16, 0x69, 0x90, 0x7b, 0x48, 0xa7, 0xcd, 0xfe, 0x1b, 0xed, 0xc0,
	0x4f, 0xd5, 0x76, 0x2d, 0x34, 0x8b, 0x78, 0x6e, 0xd5, 0x7a, 0x94, 0x06, 0xcc, 0x88, 0x78, 0x92,
	0xd9, 0x1d, 0xfa, 0x9f, 0x0c, 0x27, 0xe0, 0x01, 0x5b, 0xc6, 0x31, 0x4d, 0x38, 0xf6, 0xee, 0xf2,
	0x58, 0x31, 0x5d, 0xbb, 0xff, 0xec, 0x60, 0xd6, 0xae, 0xbd, 0x0d, 0xef, 0x1c, 0x2a, 0x89, 0x75,
	0x11, 0x78, 0xb8, 0x77, 0x84, 0xa2, 0x3e, 0xfe, 0xf7, 0x9a, 0x38, 0x83, 0x7d, 0x70, 0x6f, 0x85,
	0xc2, 0x65, 0xf9, 0xa2, 0xcd, 0xfe, 0xe3, 0x83, 0xa1, 0xa3, 0xeb, 0x4b, 0xbb, 0x44, 0x07, 0xb5,
	0xd7, 0xe2, 0x8b, 0x01, 0x68, 0xed, 0x46, 0xc0, 0x13, 0x70, 0x6c, 0x99, 0x17, 0xe7, 0xce, 0xd8,
	0xb6, 0x26, 0xe6, 0x85, 0x61, 0x3b, 0x43, 0xcb, 0x1a, 0x5e, 0x19, 0x1d, 0xa1, 0x0b, 0x3e, 0x7f,
	0xeb, 0x35, 0x86, 0x94, 0xfa, 0x21, 0xee, 0xd6, 0x3f, 0xfd, 0x50, 0x84, 0xb7, 0xe6, 0xaf, 0xb5,
	0x22, 0xde, 0xae, 0x15, 0xf1, 0xcf, 0x5a, 0x11, 0xbf, 0x6c, 0x14, 0xe1, 0x76, 0xa3, 0x08, 0xbf,
	0x37, 0x8a, 0xf0, 0x5e, 0xf7, 0x09, 0x9f, 0x2f, 0xa7, 0x9a, 0x4b, 0x6f, 0xf4, 0x77, 0xd5, 0x92,
	0x57, 0x13, 0xbd, 0x64, 0x5e, 0xa0, 0x7f, 0xa8, 0x76, 0x9e, 0x67, 0x31, 0x66, 0xd3, 0x46, 0xb1,
	0xbc, 0xaf, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x48, 0x74, 0xc8, 0x8e, 0x13, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *JWK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Alg) > 0 {
		i -= len(m.Alg)
		copy(dAtA[i:], m.Alg)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Alg)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.N) > 0 {
		i -= len(m.N)
		copy(dAtA[i:], m.N)
		i = encodeVarintParams(dAtA, i, uint64(len(m.N)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.E) > 0 {
		i -= len(m.E)
		copy(dAtA[i:], m.E)
		i = encodeVarintParams(dAtA, i, uint64(len(m.E)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Kty) > 0 {
		i -= len(m.Kty)
		copy(dAtA[i:], m.Kty)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Kty)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProviderConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProviderConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProviderConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FetchIntervals != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.FetchIntervals))
		i--
		dAtA[i] = 0x18
	}
	if len(m.JwkEndpoint) > 0 {
		i -= len(m.JwkEndpoint)
		copy(dAtA[i:], m.JwkEndpoint)
		i = encodeVarintParams(dAtA, i, uint64(len(m.JwkEndpoint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Iss) > 0 {
		i -= len(m.Iss)
		copy(dAtA[i:], m.Iss)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Iss)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JwkIdList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JwkIdList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JwkIdList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kid) > 0 {
		for iNdEx := len(m.Kid) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Kid[iNdEx])
			copy(dAtA[i:], m.Kid[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.Kid[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Iss) > 0 {
		i -= len(m.Iss)
		copy(dAtA[i:], m.Iss)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Iss)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupportedProviders) > 0 {
		dAtA2 := make([]byte, len(m.SupportedProviders)*10)
		var j1 int
		for _, num := range m.SupportedProviders {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintParams(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OidcProviderJwks) > 0 {
		for k := range m.OidcProviderJwks {
			v := m.OidcProviderJwks[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintParams(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParams(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParams(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *JWK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kty)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.E)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.N)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Alg)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *ProviderConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Iss)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.JwkEndpoint)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.FetchIntervals != 0 {
		n += 1 + sovParams(uint64(m.FetchIntervals))
	}
	return n
}

func (m *JwkIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Iss)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.Kid) > 0 {
		for _, s := range m.Kid {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *VerifyParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OidcProviderJwks) > 0 {
		for k, v := range m.OidcProviderJwks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovParams(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovParams(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovParams(uint64(mapEntrySize))
		}
	}
	if len(m.SupportedProviders) > 0 {
		l = 0
		for _, e := range m.SupportedProviders {
			l += sovParams(uint64(e))
		}
		n += 1 + sovParams(uint64(l)) + l
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JWK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JWK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JWK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.N = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProviderConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProviderConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProviderConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iss = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwkEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwkEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FetchIntervals", wireType)
			}
			m.FetchIntervals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FetchIntervals |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JwkIdList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JwkIdList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JwkIdList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iss", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iss = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = append(m.Kid, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OidcProviderJwks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OidcProviderJwks == nil {
				m.OidcProviderJwks = make(map[string]*JWK)
			}
			var mapkey string
			var mapvalue *JWK
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthParams
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthParams
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &JWK{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParams(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParams
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.OidcProviderJwks[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v OidcProvider
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= OidcProvider(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SupportedProviders = append(m.SupportedProviders, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthParams
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthParams
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SupportedProviders) == 0 {
					m.SupportedProviders = make([]OidcProvider, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v OidcProvider
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= OidcProvider(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SupportedProviders = append(m.SupportedProviders, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedProviders", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
