// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lbm/fbridge/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type NextSeqSendRequest struct {
}

func (m *NextSeqSendRequest) Reset()         { *m = NextSeqSendRequest{} }
func (m *NextSeqSendRequest) String() string { return proto.CompactTextString(m) }
func (*NextSeqSendRequest) ProtoMessage()    {}
func (*NextSeqSendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{2}
}
func (m *NextSeqSendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextSeqSendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextSeqSendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextSeqSendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextSeqSendRequest.Merge(m, src)
}
func (m *NextSeqSendRequest) XXX_Size() int {
	return m.Size()
}
func (m *NextSeqSendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NextSeqSendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NextSeqSendRequest proto.InternalMessageInfo

type NextSeqSendResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *NextSeqSendResponse) Reset()         { *m = NextSeqSendResponse{} }
func (m *NextSeqSendResponse) String() string { return proto.CompactTextString(m) }
func (*NextSeqSendResponse) ProtoMessage()    {}
func (*NextSeqSendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{3}
}
func (m *NextSeqSendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextSeqSendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextSeqSendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextSeqSendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextSeqSendResponse.Merge(m, src)
}
func (m *NextSeqSendResponse) XXX_Size() int {
	return m.Size()
}
func (m *NextSeqSendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NextSeqSendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NextSeqSendResponse proto.InternalMessageInfo

func (m *NextSeqSendResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type GreatestSeqByOperatorRequest struct {
	// the address of the operator
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *GreatestSeqByOperatorRequest) Reset()         { *m = GreatestSeqByOperatorRequest{} }
func (m *GreatestSeqByOperatorRequest) String() string { return proto.CompactTextString(m) }
func (*GreatestSeqByOperatorRequest) ProtoMessage()    {}
func (*GreatestSeqByOperatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{4}
}
func (m *GreatestSeqByOperatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GreatestSeqByOperatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GreatestSeqByOperatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GreatestSeqByOperatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreatestSeqByOperatorRequest.Merge(m, src)
}
func (m *GreatestSeqByOperatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *GreatestSeqByOperatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GreatestSeqByOperatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GreatestSeqByOperatorRequest proto.InternalMessageInfo

func (m *GreatestSeqByOperatorRequest) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type GreatestSeqByOperatorResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *GreatestSeqByOperatorResponse) Reset()         { *m = GreatestSeqByOperatorResponse{} }
func (m *GreatestSeqByOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*GreatestSeqByOperatorResponse) ProtoMessage()    {}
func (*GreatestSeqByOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{5}
}
func (m *GreatestSeqByOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GreatestSeqByOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GreatestSeqByOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GreatestSeqByOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreatestSeqByOperatorResponse.Merge(m, src)
}
func (m *GreatestSeqByOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *GreatestSeqByOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GreatestSeqByOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GreatestSeqByOperatorResponse proto.InternalMessageInfo

func (m *GreatestSeqByOperatorResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type GreatestConsecutiveConfirmedSeqRequest struct {
}

func (m *GreatestConsecutiveConfirmedSeqRequest) Reset() {
	*m = GreatestConsecutiveConfirmedSeqRequest{}
}
func (m *GreatestConsecutiveConfirmedSeqRequest) String() string { return proto.CompactTextString(m) }
func (*GreatestConsecutiveConfirmedSeqRequest) ProtoMessage()    {}
func (*GreatestConsecutiveConfirmedSeqRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{6}
}
func (m *GreatestConsecutiveConfirmedSeqRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GreatestConsecutiveConfirmedSeqRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GreatestConsecutiveConfirmedSeqRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GreatestConsecutiveConfirmedSeqRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreatestConsecutiveConfirmedSeqRequest.Merge(m, src)
}
func (m *GreatestConsecutiveConfirmedSeqRequest) XXX_Size() int {
	return m.Size()
}
func (m *GreatestConsecutiveConfirmedSeqRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GreatestConsecutiveConfirmedSeqRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GreatestConsecutiveConfirmedSeqRequest proto.InternalMessageInfo

type GreatestConsecutiveConfirmedSeqResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *GreatestConsecutiveConfirmedSeqResponse) Reset() {
	*m = GreatestConsecutiveConfirmedSeqResponse{}
}
func (m *GreatestConsecutiveConfirmedSeqResponse) String() string { return proto.CompactTextString(m) }
func (*GreatestConsecutiveConfirmedSeqResponse) ProtoMessage()    {}
func (*GreatestConsecutiveConfirmedSeqResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{7}
}
func (m *GreatestConsecutiveConfirmedSeqResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GreatestConsecutiveConfirmedSeqResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GreatestConsecutiveConfirmedSeqResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GreatestConsecutiveConfirmedSeqResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreatestConsecutiveConfirmedSeqResponse.Merge(m, src)
}
func (m *GreatestConsecutiveConfirmedSeqResponse) XXX_Size() int {
	return m.Size()
}
func (m *GreatestConsecutiveConfirmedSeqResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GreatestConsecutiveConfirmedSeqResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GreatestConsecutiveConfirmedSeqResponse proto.InternalMessageInfo

func (m *GreatestConsecutiveConfirmedSeqResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type SubmittedProvisionRequest struct {
	// the address of the operator
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// the sequence number of the bridge request
	Seq uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *SubmittedProvisionRequest) Reset()         { *m = SubmittedProvisionRequest{} }
func (m *SubmittedProvisionRequest) String() string { return proto.CompactTextString(m) }
func (*SubmittedProvisionRequest) ProtoMessage()    {}
func (*SubmittedProvisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{8}
}
func (m *SubmittedProvisionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmittedProvisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmittedProvisionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmittedProvisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmittedProvisionRequest.Merge(m, src)
}
func (m *SubmittedProvisionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmittedProvisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmittedProvisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmittedProvisionRequest proto.InternalMessageInfo

func (m *SubmittedProvisionRequest) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *SubmittedProvisionRequest) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type SubmittedProvisionResponse struct {
	Data   ProvisionData   `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Status ProvisionStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status"`
}

func (m *SubmittedProvisionResponse) Reset()         { *m = SubmittedProvisionResponse{} }
func (m *SubmittedProvisionResponse) String() string { return proto.CompactTextString(m) }
func (*SubmittedProvisionResponse) ProtoMessage()    {}
func (*SubmittedProvisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{9}
}
func (m *SubmittedProvisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmittedProvisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmittedProvisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmittedProvisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmittedProvisionResponse.Merge(m, src)
}
func (m *SubmittedProvisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmittedProvisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmittedProvisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmittedProvisionResponse proto.InternalMessageInfo

func (m *SubmittedProvisionResponse) GetData() ProvisionData {
	if m != nil {
		return m.Data
	}
	return ProvisionData{}
}

func (m *SubmittedProvisionResponse) GetStatus() ProvisionStatus {
	if m != nil {
		return m.Status
	}
	return ProvisionStatus{}
}

type NeededSubmissionSeqsRequest struct {
	// the address of the operator
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// range specifies the size of the range to search
	Range uint64 `protobuf:"varint,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (m *NeededSubmissionSeqsRequest) Reset()         { *m = NeededSubmissionSeqsRequest{} }
func (m *NeededSubmissionSeqsRequest) String() string { return proto.CompactTextString(m) }
func (*NeededSubmissionSeqsRequest) ProtoMessage()    {}
func (*NeededSubmissionSeqsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{10}
}
func (m *NeededSubmissionSeqsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NeededSubmissionSeqsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NeededSubmissionSeqsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NeededSubmissionSeqsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NeededSubmissionSeqsRequest.Merge(m, src)
}
func (m *NeededSubmissionSeqsRequest) XXX_Size() int {
	return m.Size()
}
func (m *NeededSubmissionSeqsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NeededSubmissionSeqsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NeededSubmissionSeqsRequest proto.InternalMessageInfo

func (m *NeededSubmissionSeqsRequest) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *NeededSubmissionSeqsRequest) GetRange() uint64 {
	if m != nil {
		return m.Range
	}
	return 0
}

type NeededSubmissionSeqsResponse struct {
	Seqs []uint64 `protobuf:"varint,1,rep,packed,name=seqs,proto3" json:"seqs,omitempty"`
}

func (m *NeededSubmissionSeqsResponse) Reset()         { *m = NeededSubmissionSeqsResponse{} }
func (m *NeededSubmissionSeqsResponse) String() string { return proto.CompactTextString(m) }
func (*NeededSubmissionSeqsResponse) ProtoMessage()    {}
func (*NeededSubmissionSeqsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{11}
}
func (m *NeededSubmissionSeqsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NeededSubmissionSeqsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NeededSubmissionSeqsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NeededSubmissionSeqsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NeededSubmissionSeqsResponse.Merge(m, src)
}
func (m *NeededSubmissionSeqsResponse) XXX_Size() int {
	return m.Size()
}
func (m *NeededSubmissionSeqsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NeededSubmissionSeqsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NeededSubmissionSeqsResponse proto.InternalMessageInfo

func (m *NeededSubmissionSeqsResponse) GetSeqs() []uint64 {
	if m != nil {
		return m.Seqs
	}
	return nil
}

type ConfirmedProvisionRequest struct {
	// the sequence number of the bridge request
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *ConfirmedProvisionRequest) Reset()         { *m = ConfirmedProvisionRequest{} }
func (m *ConfirmedProvisionRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmedProvisionRequest) ProtoMessage()    {}
func (*ConfirmedProvisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{12}
}
func (m *ConfirmedProvisionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmedProvisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmedProvisionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmedProvisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmedProvisionRequest.Merge(m, src)
}
func (m *ConfirmedProvisionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmedProvisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmedProvisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmedProvisionRequest proto.InternalMessageInfo

func (m *ConfirmedProvisionRequest) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type ConfirmedProvisionResponse struct {
	Data   ProvisionData   `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Status ProvisionStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status"`
}

func (m *ConfirmedProvisionResponse) Reset()         { *m = ConfirmedProvisionResponse{} }
func (m *ConfirmedProvisionResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmedProvisionResponse) ProtoMessage()    {}
func (*ConfirmedProvisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{13}
}
func (m *ConfirmedProvisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmedProvisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmedProvisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmedProvisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmedProvisionResponse.Merge(m, src)
}
func (m *ConfirmedProvisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmedProvisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmedProvisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmedProvisionResponse proto.InternalMessageInfo

func (m *ConfirmedProvisionResponse) GetData() ProvisionData {
	if m != nil {
		return m.Data
	}
	return ProvisionData{}
}

func (m *ConfirmedProvisionResponse) GetStatus() ProvisionStatus {
	if m != nil {
		return m.Status
	}
	return ProvisionStatus{}
}

type CommitmentsRequest struct {
	// the sequence number of the bridge request
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *CommitmentsRequest) Reset()         { *m = CommitmentsRequest{} }
func (m *CommitmentsRequest) String() string { return proto.CompactTextString(m) }
func (*CommitmentsRequest) ProtoMessage()    {}
func (*CommitmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{14}
}
func (m *CommitmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentsRequest.Merge(m, src)
}
func (m *CommitmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentsRequest proto.InternalMessageInfo

func (m *CommitmentsRequest) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type CommitmentsResponse struct {
	Commitments []string `protobuf:"bytes,1,rep,name=commitments,proto3" json:"commitments,omitempty"`
}

func (m *CommitmentsResponse) Reset()         { *m = CommitmentsResponse{} }
func (m *CommitmentsResponse) String() string { return proto.CompactTextString(m) }
func (*CommitmentsResponse) ProtoMessage()    {}
func (*CommitmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{15}
}
func (m *CommitmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentsResponse.Merge(m, src)
}
func (m *CommitmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentsResponse proto.InternalMessageInfo

func (m *CommitmentsResponse) GetCommitments() []string {
	if m != nil {
		return m.Commitments
	}
	return nil
}

type GuardiansRequest struct {
}

func (m *GuardiansRequest) Reset()         { *m = GuardiansRequest{} }
func (m *GuardiansRequest) String() string { return proto.CompactTextString(m) }
func (*GuardiansRequest) ProtoMessage()    {}
func (*GuardiansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{16}
}
func (m *GuardiansRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuardiansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuardiansRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuardiansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardiansRequest.Merge(m, src)
}
func (m *GuardiansRequest) XXX_Size() int {
	return m.Size()
}
func (m *GuardiansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardiansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GuardiansRequest proto.InternalMessageInfo

type GuardiansResponse struct {
	Guardians []string `protobuf:"bytes,1,rep,name=guardians,proto3" json:"guardians,omitempty"`
}

func (m *GuardiansResponse) Reset()         { *m = GuardiansResponse{} }
func (m *GuardiansResponse) String() string { return proto.CompactTextString(m) }
func (*GuardiansResponse) ProtoMessage()    {}
func (*GuardiansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{17}
}
func (m *GuardiansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuardiansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuardiansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuardiansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardiansResponse.Merge(m, src)
}
func (m *GuardiansResponse) XXX_Size() int {
	return m.Size()
}
func (m *GuardiansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardiansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GuardiansResponse proto.InternalMessageInfo

func (m *GuardiansResponse) GetGuardians() []string {
	if m != nil {
		return m.Guardians
	}
	return nil
}

type OperatorsRequest struct {
}

func (m *OperatorsRequest) Reset()         { *m = OperatorsRequest{} }
func (m *OperatorsRequest) String() string { return proto.CompactTextString(m) }
func (*OperatorsRequest) ProtoMessage()    {}
func (*OperatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{18}
}
func (m *OperatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorsRequest.Merge(m, src)
}
func (m *OperatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *OperatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorsRequest proto.InternalMessageInfo

type OperatorsResponse struct {
	Operators []string `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators,omitempty"`
}

func (m *OperatorsResponse) Reset()         { *m = OperatorsResponse{} }
func (m *OperatorsResponse) String() string { return proto.CompactTextString(m) }
func (*OperatorsResponse) ProtoMessage()    {}
func (*OperatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{19}
}
func (m *OperatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorsResponse.Merge(m, src)
}
func (m *OperatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *OperatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorsResponse proto.InternalMessageInfo

func (m *OperatorsResponse) GetOperators() []string {
	if m != nil {
		return m.Operators
	}
	return nil
}

type JudgesRequest struct {
}

func (m *JudgesRequest) Reset()         { *m = JudgesRequest{} }
func (m *JudgesRequest) String() string { return proto.CompactTextString(m) }
func (*JudgesRequest) ProtoMessage()    {}
func (*JudgesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{20}
}
func (m *JudgesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JudgesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JudgesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JudgesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgesRequest.Merge(m, src)
}
func (m *JudgesRequest) XXX_Size() int {
	return m.Size()
}
func (m *JudgesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JudgesRequest proto.InternalMessageInfo

type JudgesResponse struct {
	Judges []string `protobuf:"bytes,1,rep,name=judges,proto3" json:"judges,omitempty"`
}

func (m *JudgesResponse) Reset()         { *m = JudgesResponse{} }
func (m *JudgesResponse) String() string { return proto.CompactTextString(m) }
func (*JudgesResponse) ProtoMessage()    {}
func (*JudgesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{21}
}
func (m *JudgesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JudgesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JudgesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JudgesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JudgesResponse.Merge(m, src)
}
func (m *JudgesResponse) XXX_Size() int {
	return m.Size()
}
func (m *JudgesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JudgesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JudgesResponse proto.InternalMessageInfo

func (m *JudgesResponse) GetJudges() []string {
	if m != nil {
		return m.Judges
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "lbm.fbridge.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "lbm.fbridge.v1.QueryParamsResponse")
	proto.RegisterType((*NextSeqSendRequest)(nil), "lbm.fbridge.v1.NextSeqSendRequest")
	proto.RegisterType((*NextSeqSendResponse)(nil), "lbm.fbridge.v1.NextSeqSendResponse")
	proto.RegisterType((*GreatestSeqByOperatorRequest)(nil), "lbm.fbridge.v1.GreatestSeqByOperatorRequest")
	proto.RegisterType((*GreatestSeqByOperatorResponse)(nil), "lbm.fbridge.v1.GreatestSeqByOperatorResponse")
	proto.RegisterType((*GreatestConsecutiveConfirmedSeqRequest)(nil), "lbm.fbridge.v1.GreatestConsecutiveConfirmedSeqRequest")
	proto.RegisterType((*GreatestConsecutiveConfirmedSeqResponse)(nil), "lbm.fbridge.v1.GreatestConsecutiveConfirmedSeqResponse")
	proto.RegisterType((*SubmittedProvisionRequest)(nil), "lbm.fbridge.v1.SubmittedProvisionRequest")
	proto.RegisterType((*SubmittedProvisionResponse)(nil), "lbm.fbridge.v1.SubmittedProvisionResponse")
	proto.RegisterType((*NeededSubmissionSeqsRequest)(nil), "lbm.fbridge.v1.NeededSubmissionSeqsRequest")
	proto.RegisterType((*NeededSubmissionSeqsResponse)(nil), "lbm.fbridge.v1.NeededSubmissionSeqsResponse")
	proto.RegisterType((*ConfirmedProvisionRequest)(nil), "lbm.fbridge.v1.ConfirmedProvisionRequest")
	proto.RegisterType((*ConfirmedProvisionResponse)(nil), "lbm.fbridge.v1.ConfirmedProvisionResponse")
	proto.RegisterType((*CommitmentsRequest)(nil), "lbm.fbridge.v1.CommitmentsRequest")
	proto.RegisterType((*CommitmentsResponse)(nil), "lbm.fbridge.v1.CommitmentsResponse")
	proto.RegisterType((*GuardiansRequest)(nil), "lbm.fbridge.v1.GuardiansRequest")
	proto.RegisterType((*GuardiansResponse)(nil), "lbm.fbridge.v1.GuardiansResponse")
	proto.RegisterType((*OperatorsRequest)(nil), "lbm.fbridge.v1.OperatorsRequest")
	proto.RegisterType((*OperatorsResponse)(nil), "lbm.fbridge.v1.OperatorsResponse")
	proto.RegisterType((*JudgesRequest)(nil), "lbm.fbridge.v1.JudgesRequest")
	proto.RegisterType((*JudgesResponse)(nil), "lbm.fbridge.v1.JudgesResponse")
}

func init() { proto.RegisterFile("lbm/fbridge/v1/query.proto", fileDescriptor_5e7780f9db9d346e) }

var fileDescriptor_5e7780f9db9d346e = []byte{
	// 943 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0x5e, 0xb7, 0x69, 0x44, 0x5e, 0xa0, 0x94, 0xd9, 0x65, 0xd5, 0x75, 0x53, 0x67, 0xe3, 0xa2,
	0xdd, 0xb4, 0x74, 0xe3, 0x26, 0x54, 0x5d, 0x89, 0xd2, 0xcb, 0x06, 0x51, 0x51, 0xa4, 0xb6, 0x24,
	0x37, 0x2e, 0xd1, 0x24, 0x9e, 0x75, 0x0d, 0x6b, 0x4f, 0xec, 0x19, 0x47, 0xbb, 0x2a, 0x3d, 0xc0,
	0x2f, 0x40, 0xa2, 0xbf, 0x01, 0x89, 0x3f, 0x80, 0xc4, 0x95, 0x53, 0x8f, 0x2b, 0x71, 0xe1, 0x84,
	0xd0, 0x2e, 0x3f, 0x04, 0x79, 0x3c, 0x76, 0x12, 0x4f, 0x9c, 0x0d, 0xa7, 0xde, 0xc6, 0xcf, 0xef,
	0x7d, 0xdf, 0xf7, 0xde, 0xcb, 0x7c, 0x0e, 0xe8, 0x47, 0x43, 0xcf, 0x3a, 0x1c, 0x86, 0xae, 0xed,
	0x10, 0x6b, 0xd2, 0xb6, 0x82, 0x88, 0x84, 0x27, 0xad, 0x71, 0x48, 0x39, 0x45, 0x57, 0x8f, 0x86,
	0x5e, 0x4b, 0xbe, 0x6b, 0x4d, 0xda, 0x7a, 0xcd, 0xa1, 0xd4, 0x39, 0x22, 0x16, 0x1e, 0xbb, 0x16,
	0xf6, 0x7d, 0xca, 0x31, 0x77, 0xa9, 0xcf, 0x92, 0x6c, 0x7d, 0xc3, 0xa1, 0x0e, 0x15, 0x47, 0x2b,
	0x3e, 0xc9, 0x68, 0x2d, 0x87, 0x9f, 0xc2, 0x89, 0xb7, 0xe6, 0x06, 0xa0, 0xaf, 0x63, 0xc2, 0xe7,
	0x38, 0xc4, 0x1e, 0xeb, 0x91, 0x20, 0x22, 0x8c, 0x9b, 0x5f, 0xc1, 0xfa, 0x5c, 0x94, 0x8d, 0xa9,
	0xcf, 0x08, 0xba, 0x0f, 0xe5, 0xb1, 0x88, 0x5c, 0xd7, 0xb6, 0xb5, 0x66, 0xb5, 0xb3, 0xd9, 0x9a,
	0xd7, 0xd7, 0x4a, 0xf2, 0x0f, 0x4a, 0x6f, 0xfe, 0xae, 0xaf, 0xf5, 0x64, 0x6e, 0x4c, 0xf1, 0x94,
	0x1c, 0xf3, 0x3e, 0x09, 0xfa, 0xc4, 0xb7, 0x53, 0x8a, 0x5d, 0x58, 0x9f, 0x8b, 0x4a, 0x8a, 0x6b,
	0x70, 0x99, 0x91, 0x40, 0xe0, 0x97, 0x7a, 0xf1, 0xd1, 0xfc, 0x14, 0x6a, 0x8f, 0x43, 0x82, 0x39,
	0x61, 0x71, 0xf2, 0xc1, 0xc9, 0xb3, 0x31, 0x09, 0x31, 0xa7, 0xa1, 0x04, 0x42, 0x3a, 0xbc, 0x43,
	0x65, 0x48, 0x94, 0x55, 0x7a, 0xd9, 0xb3, 0xd9, 0x86, 0x9b, 0x05, 0xb5, 0x85, 0x74, 0x4d, 0xd8,
	0x49, 0x4b, 0xba, 0x71, 0xca, 0x28, 0xe2, 0xee, 0x84, 0x74, 0xa9, 0x7f, 0xe8, 0x86, 0x1e, 0xb1,
	0xfb, 0x24, 0x48, 0x3b, 0x78, 0x08, 0xbb, 0x17, 0x66, 0x16, 0xd2, 0x7c, 0x09, 0x5b, 0xfd, 0x68,
	0xe8, 0xb9, 0x9c, 0x13, 0xfb, 0x79, 0x48, 0x27, 0x2e, 0x73, 0xa9, 0xbf, 0x42, 0x4b, 0x29, 0xd4,
	0xa5, 0x29, 0xd4, 0x6b, 0x0d, 0xf4, 0x45, 0x58, 0x92, 0x7b, 0x1f, 0x4a, 0x36, 0xe6, 0x58, 0xae,
	0xec, 0xa6, 0xb2, 0xb2, 0xb4, 0xe0, 0x73, 0xcc, 0xb1, 0xdc, 0x9c, 0x28, 0x40, 0x8f, 0xa0, 0xcc,
	0x38, 0xe6, 0x11, 0x13, 0x64, 0xd5, 0x4e, 0xbd, 0xb0, 0xb4, 0x2f, 0xd2, 0xd2, 0xb5, 0x27, 0x45,
	0xe6, 0x33, 0xb8, 0xf1, 0x94, 0x10, 0x9b, 0xd8, 0x42, 0x1b, 0x13, 0x79, 0x24, 0x60, 0xab, 0xf4,
	0xb8, 0x01, 0x57, 0x42, 0xec, 0x3b, 0x44, 0x76, 0x99, 0x3c, 0x98, 0x1d, 0xa8, 0x2d, 0x06, 0x94,
	0x8d, 0x22, 0x28, 0x31, 0x12, 0xc4, 0xbf, 0xcd, 0xcb, 0xcd, 0x52, 0x4f, 0x9c, 0xcd, 0x3d, 0xd8,
	0xca, 0x16, 0xa2, 0x8c, 0x59, 0xdd, 0x4a, 0x3c, 0xca, 0x45, 0xf9, 0x6f, 0x79, 0x94, 0x3b, 0x80,
	0xba, 0xd4, 0xf3, 0x5c, 0xee, 0x11, 0x9f, 0xb3, 0x62, 0xf9, 0xfb, 0xb0, 0x3e, 0x97, 0x27, 0x65,
	0x6f, 0x43, 0x75, 0x34, 0x0d, 0x8b, 0xf9, 0x54, 0x7a, 0xb3, 0x21, 0x13, 0xc1, 0xb5, 0xc7, 0x11,
	0x0e, 0x6d, 0x17, 0xfb, 0x99, 0x07, 0xb4, 0xe1, 0x83, 0x99, 0x98, 0x84, 0xaa, 0x41, 0xc5, 0x49,
	0x83, 0x12, 0x68, 0x1a, 0x88, 0x61, 0xd2, 0x1b, 0x36, 0x0b, 0x33, 0x13, 0x9b, 0xc2, 0xa4, 0xcb,
	0xce, 0x60, 0xb2, 0x80, 0xf9, 0x3e, 0xbc, 0xf7, 0x24, 0xb2, 0x1d, 0x92, 0x61, 0x34, 0xe1, 0x6a,
	0x1a, 0x90, 0x00, 0x9b, 0x50, 0xfe, 0x56, 0x44, 0x64, 0xb5, 0x7c, 0xea, 0xfc, 0xfe, 0x2e, 0x5c,
	0x11, 0xce, 0x85, 0x02, 0x28, 0x27, 0x6e, 0x84, 0xcc, 0xfc, 0xb0, 0x55, 0xc3, 0xd3, 0x6f, 0x2d,
	0xcd, 0x49, 0x48, 0x4d, 0xe3, 0xc7, 0x3f, 0xff, 0xfd, 0xf9, 0xd2, 0x75, 0xb4, 0x69, 0xe5, 0x2c,
	0x35, 0x31, 0x3a, 0xf4, 0x3d, 0x54, 0x67, 0x2c, 0x4d, 0xe5, 0x55, 0x5d, 0x50, 0xe5, 0x5d, 0xe0,
	0x89, 0xe6, 0x47, 0x82, 0xd7, 0x40, 0xb5, 0x3c, 0xaf, 0x4f, 0x8e, 0x39, 0x23, 0xc1, 0x80, 0xc5,
	0x74, 0xbf, 0x68, 0xf0, 0xe1, 0x42, 0xb3, 0x43, 0x77, 0xf3, 0x24, 0xcb, 0xfc, 0x54, 0xdf, 0x5b,
	0x31, 0x5b, 0x8a, 0xbb, 0x27, 0xc4, 0xdd, 0x41, 0xcd, 0xbc, 0xb8, 0x6c, 0x9f, 0xd6, 0xcb, 0xf4,
	0xf8, 0xca, 0x62, 0x24, 0x40, 0x7f, 0x68, 0x50, 0xbf, 0xc0, 0x38, 0xd1, 0x83, 0x22, 0x11, 0xcb,
	0x3d, 0x59, 0xdf, 0xff, 0xdf, 0x75, 0xb2, 0x8d, 0x96, 0x68, 0xa3, 0x89, 0x76, 0xf2, 0x6d, 0x38,
	0x12, 0x60, 0x30, 0x4a, 0xcb, 0x06, 0x71, 0x13, 0xbf, 0x6a, 0x80, 0x54, 0xd3, 0x45, 0xb7, 0xf3,
	0xfc, 0x85, 0x26, 0xaf, 0xdf, 0x59, 0x25, 0x55, 0xaa, 0xfb, 0x4c, 0xa8, 0x7b, 0x80, 0xee, 0xaf,
	0x34, 0xe4, 0x71, 0x5a, 0x6f, 0xbd, 0x64, 0x24, 0x78, 0x85, 0x5e, 0x6b, 0xb1, 0x7f, 0xe4, 0x5d,
	0x4d, 0xd5, 0x5a, 0xe8, 0x94, 0xaa, 0xd6, 0x62, 0x93, 0x34, 0x77, 0x85, 0xd6, 0x06, 0xaa, 0x2b,
	0xb7, 0x24, 0x27, 0xeb, 0x37, 0x0d, 0x36, 0x16, 0x19, 0x3a, 0xfa, 0x58, 0xbd, 0x14, 0x85, 0xdf,
	0x11, 0xfd, 0xee, 0x6a, 0xc9, 0x52, 0x5c, 0x57, 0x88, 0x7b, 0x84, 0x1e, 0xae, 0x34, 0x48, 0x5f,
	0x40, 0x0d, 0x58, 0x86, 0x15, 0xaf, 0x9e, 0xa1, 0x1f, 0x34, 0xa8, 0xce, 0xf8, 0xac, 0x7a, 0xd1,
	0x55, 0xb3, 0x56, 0x2f, 0xfa, 0x02, 0xa3, 0x36, 0x6f, 0x0b, 0x75, 0xb7, 0x50, 0x23, 0xaf, 0x6e,
	0xc6, 0xab, 0xe5, 0xf0, 0x18, 0x54, 0x32, 0x77, 0x46, 0xdb, 0xca, 0xaf, 0x3e, 0x67, 0xe6, 0x7a,
	0x63, 0x49, 0x86, 0x24, 0x6f, 0x08, 0xf2, 0x1b, 0x68, 0x4b, 0xb9, 0x01, 0x19, 0x0f, 0x83, 0x4a,
	0xe6, 0xe5, 0x2a, 0x69, 0xde, 0xfa, 0x55, 0x52, 0xe5, 0x43, 0x50, 0x4c, 0x9a, 0xed, 0x03, 0x39,
	0x50, 0x4e, 0xcc, 0x1f, 0x29, 0x1f, 0xdc, 0xb9, 0xaf, 0x84, 0x6e, 0x14, 0xbd, 0xbe, 0xc8, 0xbe,
	0x93, 0x6f, 0xc7, 0xc1, 0x93, 0x37, 0x67, 0x86, 0x76, 0x7a, 0x66, 0x68, 0xff, 0x9c, 0x19, 0xda,
	0x4f, 0xe7, 0xc6, 0xda, 0xe9, 0xb9, 0xb1, 0xf6, 0xd7, 0xb9, 0xb1, 0xf6, 0xcd, 0x3d, 0xc7, 0xe5,
	0x2f, 0xa2, 0x61, 0x6b, 0x44, 0x3d, 0xeb, 0x0b, 0xd7, 0x67, 0xa3, 0x17, 0x2e, 0xb6, 0x0e, 0xe5,
	0x61, 0x8f, 0xd9, 0xdf, 0x59, 0xc7, 0x19, 0x1e, 0x3f, 0x19, 0x13, 0x36, 0x2c, 0x8b, 0x7f, 0xd7,
	0x9f, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0x20, 0x1a, 0xcc, 0x0b, 0xdd, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of x/fbridge module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// NextSeqSend to be used when the next bridge request is made
	NextSeqSend(ctx context.Context, in *NextSeqSendRequest, opts ...grpc.CallOption) (*NextSeqSendResponse, error)
	// Get a greatest sequence number confirmed by a particular operator
	GreatestSeqByOperator(ctx context.Context, in *GreatestSeqByOperatorRequest, opts ...grpc.CallOption) (*GreatestSeqByOperatorResponse, error)
	// Get a greatest consecutive sequence number confirmed by n-of-m operators
	GreatestConsecutiveConfirmedSeq(ctx context.Context, in *GreatestConsecutiveConfirmedSeqRequest, opts ...grpc.CallOption) (*GreatestConsecutiveConfirmedSeqResponse, error)
	// Get a provision submitted by a particular operator
	SubmittedProvision(ctx context.Context, in *SubmittedProvisionRequest, opts ...grpc.CallOption) (*SubmittedProvisionResponse, error)
	// Get a particular sequence of confirmed provisions
	ConfirmedProvision(ctx context.Context, in *ConfirmedProvisionRequest, opts ...grpc.CallOption) (*ConfirmedProvisionResponse, error)
	// Get a list of sequence numbers that need to be submitted by a particular operator
	// The search scope is [greatest_consecutive_seq_by_operator, min(greatest_consecutive_seq_by_operator + range,
	// greatest_seq_by_operator)] greatest_consecutive_seq_by_operator can be replaced with greatest_consecutive_seq if
	// the operator is newly added
	NeededSubmissionSeqs(ctx context.Context, in *NeededSubmissionSeqsRequest, opts ...grpc.CallOption) (*NeededSubmissionSeqsResponse, error)
	// Get commitments of a specific sequence number
	Commitments(ctx context.Context, in *CommitmentsRequest, opts ...grpc.CallOption) (*CommitmentsResponse, error)
	// Get a list of Guardians registered on the bridge
	Guardians(ctx context.Context, in *GuardiansRequest, opts ...grpc.CallOption) (*GuardiansResponse, error)
	// Get a list of Operators registered on the bridge
	Operators(ctx context.Context, in *OperatorsRequest, opts ...grpc.CallOption) (*OperatorsResponse, error)
	// Get a list of Judges registered on the bridge
	Judges(ctx context.Context, in *JudgesRequest, opts ...grpc.CallOption) (*JudgesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextSeqSend(ctx context.Context, in *NextSeqSendRequest, opts ...grpc.CallOption) (*NextSeqSendResponse, error) {
	out := new(NextSeqSendResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/NextSeqSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GreatestSeqByOperator(ctx context.Context, in *GreatestSeqByOperatorRequest, opts ...grpc.CallOption) (*GreatestSeqByOperatorResponse, error) {
	out := new(GreatestSeqByOperatorResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/GreatestSeqByOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GreatestConsecutiveConfirmedSeq(ctx context.Context, in *GreatestConsecutiveConfirmedSeqRequest, opts ...grpc.CallOption) (*GreatestConsecutiveConfirmedSeqResponse, error) {
	out := new(GreatestConsecutiveConfirmedSeqResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/GreatestConsecutiveConfirmedSeq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubmittedProvision(ctx context.Context, in *SubmittedProvisionRequest, opts ...grpc.CallOption) (*SubmittedProvisionResponse, error) {
	out := new(SubmittedProvisionResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/SubmittedProvision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConfirmedProvision(ctx context.Context, in *ConfirmedProvisionRequest, opts ...grpc.CallOption) (*ConfirmedProvisionResponse, error) {
	out := new(ConfirmedProvisionResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/ConfirmedProvision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NeededSubmissionSeqs(ctx context.Context, in *NeededSubmissionSeqsRequest, opts ...grpc.CallOption) (*NeededSubmissionSeqsResponse, error) {
	out := new(NeededSubmissionSeqsResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/NeededSubmissionSeqs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Commitments(ctx context.Context, in *CommitmentsRequest, opts ...grpc.CallOption) (*CommitmentsResponse, error) {
	out := new(CommitmentsResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/Commitments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Guardians(ctx context.Context, in *GuardiansRequest, opts ...grpc.CallOption) (*GuardiansResponse, error) {
	out := new(GuardiansResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/Guardians", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Operators(ctx context.Context, in *OperatorsRequest, opts ...grpc.CallOption) (*OperatorsResponse, error) {
	out := new(OperatorsResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/Operators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Judges(ctx context.Context, in *JudgesRequest, opts ...grpc.CallOption) (*JudgesResponse, error) {
	out := new(JudgesResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/Judges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of x/fbridge module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// NextSeqSend to be used when the next bridge request is made
	NextSeqSend(context.Context, *NextSeqSendRequest) (*NextSeqSendResponse, error)
	// Get a greatest sequence number confirmed by a particular operator
	GreatestSeqByOperator(context.Context, *GreatestSeqByOperatorRequest) (*GreatestSeqByOperatorResponse, error)
	// Get a greatest consecutive sequence number confirmed by n-of-m operators
	GreatestConsecutiveConfirmedSeq(context.Context, *GreatestConsecutiveConfirmedSeqRequest) (*GreatestConsecutiveConfirmedSeqResponse, error)
	// Get a provision submitted by a particular operator
	SubmittedProvision(context.Context, *SubmittedProvisionRequest) (*SubmittedProvisionResponse, error)
	// Get a particular sequence of confirmed provisions
	ConfirmedProvision(context.Context, *ConfirmedProvisionRequest) (*ConfirmedProvisionResponse, error)
	// Get a list of sequence numbers that need to be submitted by a particular operator
	// The search scope is [greatest_consecutive_seq_by_operator, min(greatest_consecutive_seq_by_operator + range,
	// greatest_seq_by_operator)] greatest_consecutive_seq_by_operator can be replaced with greatest_consecutive_seq if
	// the operator is newly added
	NeededSubmissionSeqs(context.Context, *NeededSubmissionSeqsRequest) (*NeededSubmissionSeqsResponse, error)
	// Get commitments of a specific sequence number
	Commitments(context.Context, *CommitmentsRequest) (*CommitmentsResponse, error)
	// Get a list of Guardians registered on the bridge
	Guardians(context.Context, *GuardiansRequest) (*GuardiansResponse, error)
	// Get a list of Operators registered on the bridge
	Operators(context.Context, *OperatorsRequest) (*OperatorsResponse, error)
	// Get a list of Judges registered on the bridge
	Judges(context.Context, *JudgesRequest) (*JudgesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) NextSeqSend(ctx context.Context, req *NextSeqSendRequest) (*NextSeqSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextSeqSend not implemented")
}
func (*UnimplementedQueryServer) GreatestSeqByOperator(ctx context.Context, req *GreatestSeqByOperatorRequest) (*GreatestSeqByOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreatestSeqByOperator not implemented")
}
func (*UnimplementedQueryServer) GreatestConsecutiveConfirmedSeq(ctx context.Context, req *GreatestConsecutiveConfirmedSeqRequest) (*GreatestConsecutiveConfirmedSeqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreatestConsecutiveConfirmedSeq not implemented")
}
func (*UnimplementedQueryServer) SubmittedProvision(ctx context.Context, req *SubmittedProvisionRequest) (*SubmittedProvisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmittedProvision not implemented")
}
func (*UnimplementedQueryServer) ConfirmedProvision(ctx context.Context, req *ConfirmedProvisionRequest) (*ConfirmedProvisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmedProvision not implemented")
}
func (*UnimplementedQueryServer) NeededSubmissionSeqs(ctx context.Context, req *NeededSubmissionSeqsRequest) (*NeededSubmissionSeqsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NeededSubmissionSeqs not implemented")
}
func (*UnimplementedQueryServer) Commitments(ctx context.Context, req *CommitmentsRequest) (*CommitmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commitments not implemented")
}
func (*UnimplementedQueryServer) Guardians(ctx context.Context, req *GuardiansRequest) (*GuardiansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guardians not implemented")
}
func (*UnimplementedQueryServer) Operators(ctx context.Context, req *OperatorsRequest) (*OperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Operators not implemented")
}
func (*UnimplementedQueryServer) Judges(ctx context.Context, req *JudgesRequest) (*JudgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Judges not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextSeqSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextSeqSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextSeqSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/NextSeqSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextSeqSend(ctx, req.(*NextSeqSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GreatestSeqByOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreatestSeqByOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GreatestSeqByOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/GreatestSeqByOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GreatestSeqByOperator(ctx, req.(*GreatestSeqByOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GreatestConsecutiveConfirmedSeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreatestConsecutiveConfirmedSeqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GreatestConsecutiveConfirmedSeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/GreatestConsecutiveConfirmedSeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GreatestConsecutiveConfirmedSeq(ctx, req.(*GreatestConsecutiveConfirmedSeqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubmittedProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmittedProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubmittedProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/SubmittedProvision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubmittedProvision(ctx, req.(*SubmittedProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConfirmedProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmedProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConfirmedProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/ConfirmedProvision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConfirmedProvision(ctx, req.(*ConfirmedProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NeededSubmissionSeqs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NeededSubmissionSeqsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NeededSubmissionSeqs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/NeededSubmissionSeqs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NeededSubmissionSeqs(ctx, req.(*NeededSubmissionSeqsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Commitments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Commitments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/Commitments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Commitments(ctx, req.(*CommitmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Guardians_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuardiansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Guardians(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/Guardians",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Guardians(ctx, req.(*GuardiansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Operators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Operators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/Operators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Operators(ctx, req.(*OperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Judges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JudgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Judges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/Judges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Judges(ctx, req.(*JudgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lbm.fbridge.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "NextSeqSend",
			Handler:    _Query_NextSeqSend_Handler,
		},
		{
			MethodName: "GreatestSeqByOperator",
			Handler:    _Query_GreatestSeqByOperator_Handler,
		},
		{
			MethodName: "GreatestConsecutiveConfirmedSeq",
			Handler:    _Query_GreatestConsecutiveConfirmedSeq_Handler,
		},
		{
			MethodName: "SubmittedProvision",
			Handler:    _Query_SubmittedProvision_Handler,
		},
		{
			MethodName: "ConfirmedProvision",
			Handler:    _Query_ConfirmedProvision_Handler,
		},
		{
			MethodName: "NeededSubmissionSeqs",
			Handler:    _Query_NeededSubmissionSeqs_Handler,
		},
		{
			MethodName: "Commitments",
			Handler:    _Query_Commitments_Handler,
		},
		{
			MethodName: "Guardians",
			Handler:    _Query_Guardians_Handler,
		},
		{
			MethodName: "Operators",
			Handler:    _Query_Operators_Handler,
		},
		{
			MethodName: "Judges",
			Handler:    _Query_Judges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbm/fbridge/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NextSeqSendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextSeqSendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextSeqSendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NextSeqSendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextSeqSendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextSeqSendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GreatestSeqByOperatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreatestSeqByOperatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GreatestSeqByOperatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GreatestSeqByOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreatestSeqByOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GreatestSeqByOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GreatestConsecutiveConfirmedSeqRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreatestConsecutiveConfirmedSeqRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GreatestConsecutiveConfirmedSeqRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GreatestConsecutiveConfirmedSeqResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreatestConsecutiveConfirmedSeqResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GreatestConsecutiveConfirmedSeqResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmittedProvisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmittedProvisionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmittedProvisionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmittedProvisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmittedProvisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmittedProvisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NeededSubmissionSeqsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeededSubmissionSeqsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NeededSubmissionSeqsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Range != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Range))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NeededSubmissionSeqsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeededSubmissionSeqsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NeededSubmissionSeqsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seqs) > 0 {
		dAtA5 := make([]byte, len(m.Seqs)*10)
		var j4 int
		for _, num := range m.Seqs {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintQuery(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmedProvisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmedProvisionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmedProvisionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmedProvisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmedProvisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmedProvisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommitmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitments) > 0 {
		for iNdEx := len(m.Commitments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Commitments[iNdEx])
			copy(dAtA[i:], m.Commitments[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Commitments[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GuardiansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuardiansRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuardiansRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GuardiansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuardiansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuardiansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Guardians) > 0 {
		for iNdEx := len(m.Guardians) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Guardians[iNdEx])
			copy(dAtA[i:], m.Guardians[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Guardians[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OperatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operators) > 0 {
		for iNdEx := len(m.Operators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Operators[iNdEx])
			copy(dAtA[i:], m.Operators[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Operators[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JudgesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JudgesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JudgesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *JudgesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JudgesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JudgesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Judges) > 0 {
		for iNdEx := len(m.Judges) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Judges[iNdEx])
			copy(dAtA[i:], m.Judges[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Judges[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *NextSeqSendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NextSeqSendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovQuery(uint64(m.Seq))
	}
	return n
}

func (m *GreatestSeqByOperatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GreatestSeqByOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovQuery(uint64(m.Seq))
	}
	return n
}

func (m *GreatestConsecutiveConfirmedSeqRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GreatestConsecutiveConfirmedSeqResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovQuery(uint64(m.Seq))
	}
	return n
}

func (m *SubmittedProvisionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovQuery(uint64(m.Seq))
	}
	return n
}

func (m *SubmittedProvisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Data.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *NeededSubmissionSeqsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Range != 0 {
		n += 1 + sovQuery(uint64(m.Range))
	}
	return n
}

func (m *NeededSubmissionSeqsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Seqs) > 0 {
		l = 0
		for _, e := range m.Seqs {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *ConfirmedProvisionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovQuery(uint64(m.Seq))
	}
	return n
}

func (m *ConfirmedProvisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Data.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *CommitmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovQuery(uint64(m.Seq))
	}
	return n
}

func (m *CommitmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commitments) > 0 {
		for _, s := range m.Commitments {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *GuardiansRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GuardiansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Guardians) > 0 {
		for _, s := range m.Guardians {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *OperatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OperatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Operators) > 0 {
		for _, s := range m.Operators {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *JudgesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *JudgesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Judges) > 0 {
		for _, s := range m.Judges {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextSeqSendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextSeqSendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextSeqSendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextSeqSendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextSeqSendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextSeqSendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreatestSeqByOperatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreatestSeqByOperatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreatestSeqByOperatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreatestSeqByOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreatestSeqByOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreatestSeqByOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreatestConsecutiveConfirmedSeqRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreatestConsecutiveConfirmedSeqRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreatestConsecutiveConfirmedSeqRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreatestConsecutiveConfirmedSeqResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreatestConsecutiveConfirmedSeqResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreatestConsecutiveConfirmedSeqResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmittedProvisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmittedProvisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmittedProvisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmittedProvisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmittedProvisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmittedProvisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeededSubmissionSeqsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeededSubmissionSeqsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeededSubmissionSeqsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			m.Range = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Range |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeededSubmissionSeqsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeededSubmissionSeqsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeededSubmissionSeqsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Seqs = append(m.Seqs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Seqs) == 0 {
					m.Seqs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Seqs = append(m.Seqs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmedProvisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmedProvisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmedProvisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmedProvisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmedProvisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmedProvisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitments = append(m.Commitments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuardiansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuardiansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuardiansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuardiansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuardiansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuardiansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guardians", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guardians = append(m.Guardians, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operators = append(m.Operators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JudgesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JudgesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JudgesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JudgesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JudgesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JudgesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Judges", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Judges = append(m.Judges, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
