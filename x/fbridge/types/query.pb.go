// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lbm/fbridge/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type GreatestSeqByOperatorRequest struct {
	// the address of the operator
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *GreatestSeqByOperatorRequest) Reset()         { *m = GreatestSeqByOperatorRequest{} }
func (m *GreatestSeqByOperatorRequest) String() string { return proto.CompactTextString(m) }
func (*GreatestSeqByOperatorRequest) ProtoMessage()    {}
func (*GreatestSeqByOperatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{2}
}
func (m *GreatestSeqByOperatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GreatestSeqByOperatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GreatestSeqByOperatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GreatestSeqByOperatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreatestSeqByOperatorRequest.Merge(m, src)
}
func (m *GreatestSeqByOperatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *GreatestSeqByOperatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GreatestSeqByOperatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GreatestSeqByOperatorRequest proto.InternalMessageInfo

func (m *GreatestSeqByOperatorRequest) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type GreatestSeqByOperatorResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *GreatestSeqByOperatorResponse) Reset()         { *m = GreatestSeqByOperatorResponse{} }
func (m *GreatestSeqByOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*GreatestSeqByOperatorResponse) ProtoMessage()    {}
func (*GreatestSeqByOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{3}
}
func (m *GreatestSeqByOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GreatestSeqByOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GreatestSeqByOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GreatestSeqByOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreatestSeqByOperatorResponse.Merge(m, src)
}
func (m *GreatestSeqByOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *GreatestSeqByOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GreatestSeqByOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GreatestSeqByOperatorResponse proto.InternalMessageInfo

func (m *GreatestSeqByOperatorResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type NextSeqToConfirmRequest struct {
}

func (m *NextSeqToConfirmRequest) Reset()         { *m = NextSeqToConfirmRequest{} }
func (m *NextSeqToConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*NextSeqToConfirmRequest) ProtoMessage()    {}
func (*NextSeqToConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{4}
}
func (m *NextSeqToConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextSeqToConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextSeqToConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextSeqToConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextSeqToConfirmRequest.Merge(m, src)
}
func (m *NextSeqToConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *NextSeqToConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NextSeqToConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NextSeqToConfirmRequest proto.InternalMessageInfo

type NextSeqToConfirmResponse struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *NextSeqToConfirmResponse) Reset()         { *m = NextSeqToConfirmResponse{} }
func (m *NextSeqToConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*NextSeqToConfirmResponse) ProtoMessage()    {}
func (*NextSeqToConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{5}
}
func (m *NextSeqToConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextSeqToConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextSeqToConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextSeqToConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextSeqToConfirmResponse.Merge(m, src)
}
func (m *NextSeqToConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *NextSeqToConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NextSeqToConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NextSeqToConfirmResponse proto.InternalMessageInfo

func (m *NextSeqToConfirmResponse) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type SubmittedProvisionRequest struct {
	// the address of the operator
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// the sequence number of the bridge request
	Seq uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *SubmittedProvisionRequest) Reset()         { *m = SubmittedProvisionRequest{} }
func (m *SubmittedProvisionRequest) String() string { return proto.CompactTextString(m) }
func (*SubmittedProvisionRequest) ProtoMessage()    {}
func (*SubmittedProvisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{6}
}
func (m *SubmittedProvisionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmittedProvisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmittedProvisionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmittedProvisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmittedProvisionRequest.Merge(m, src)
}
func (m *SubmittedProvisionRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmittedProvisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmittedProvisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmittedProvisionRequest proto.InternalMessageInfo

func (m *SubmittedProvisionRequest) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *SubmittedProvisionRequest) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type SubmittedProvisionResponse struct {
	Data   ProvisionData   `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Status ProvisionStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status"`
}

func (m *SubmittedProvisionResponse) Reset()         { *m = SubmittedProvisionResponse{} }
func (m *SubmittedProvisionResponse) String() string { return proto.CompactTextString(m) }
func (*SubmittedProvisionResponse) ProtoMessage()    {}
func (*SubmittedProvisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{7}
}
func (m *SubmittedProvisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmittedProvisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmittedProvisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmittedProvisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmittedProvisionResponse.Merge(m, src)
}
func (m *SubmittedProvisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmittedProvisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmittedProvisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmittedProvisionResponse proto.InternalMessageInfo

func (m *SubmittedProvisionResponse) GetData() ProvisionData {
	if m != nil {
		return m.Data
	}
	return ProvisionData{}
}

func (m *SubmittedProvisionResponse) GetStatus() ProvisionStatus {
	if m != nil {
		return m.Status
	}
	return ProvisionStatus{}
}

type ConfirmedProvisionRequest struct {
	// the sequence number of the bridge request
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *ConfirmedProvisionRequest) Reset()         { *m = ConfirmedProvisionRequest{} }
func (m *ConfirmedProvisionRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmedProvisionRequest) ProtoMessage()    {}
func (*ConfirmedProvisionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{8}
}
func (m *ConfirmedProvisionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmedProvisionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmedProvisionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmedProvisionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmedProvisionRequest.Merge(m, src)
}
func (m *ConfirmedProvisionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmedProvisionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmedProvisionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmedProvisionRequest proto.InternalMessageInfo

func (m *ConfirmedProvisionRequest) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type ConfirmedProvisionResponse struct {
	Data   ProvisionData   `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
	Status ProvisionStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status"`
}

func (m *ConfirmedProvisionResponse) Reset()         { *m = ConfirmedProvisionResponse{} }
func (m *ConfirmedProvisionResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmedProvisionResponse) ProtoMessage()    {}
func (*ConfirmedProvisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{9}
}
func (m *ConfirmedProvisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmedProvisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmedProvisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmedProvisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmedProvisionResponse.Merge(m, src)
}
func (m *ConfirmedProvisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmedProvisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmedProvisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmedProvisionResponse proto.InternalMessageInfo

func (m *ConfirmedProvisionResponse) GetData() ProvisionData {
	if m != nil {
		return m.Data
	}
	return ProvisionData{}
}

func (m *ConfirmedProvisionResponse) GetStatus() ProvisionStatus {
	if m != nil {
		return m.Status
	}
	return ProvisionStatus{}
}

type CommitmentsRequest struct {
	// the sequence number of the bridge request
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (m *CommitmentsRequest) Reset()         { *m = CommitmentsRequest{} }
func (m *CommitmentsRequest) String() string { return proto.CompactTextString(m) }
func (*CommitmentsRequest) ProtoMessage()    {}
func (*CommitmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{10}
}
func (m *CommitmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentsRequest.Merge(m, src)
}
func (m *CommitmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentsRequest proto.InternalMessageInfo

func (m *CommitmentsRequest) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type CommitmentsResponse struct {
	Commitments []string `protobuf:"bytes,1,rep,name=commitments,proto3" json:"commitments,omitempty"`
}

func (m *CommitmentsResponse) Reset()         { *m = CommitmentsResponse{} }
func (m *CommitmentsResponse) String() string { return proto.CompactTextString(m) }
func (*CommitmentsResponse) ProtoMessage()    {}
func (*CommitmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e7780f9db9d346e, []int{11}
}
func (m *CommitmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentsResponse.Merge(m, src)
}
func (m *CommitmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CommitmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentsResponse proto.InternalMessageInfo

func (m *CommitmentsResponse) GetCommitments() []string {
	if m != nil {
		return m.Commitments
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "lbm.fbridge.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "lbm.fbridge.v1.QueryParamsResponse")
	proto.RegisterType((*GreatestSeqByOperatorRequest)(nil), "lbm.fbridge.v1.GreatestSeqByOperatorRequest")
	proto.RegisterType((*GreatestSeqByOperatorResponse)(nil), "lbm.fbridge.v1.GreatestSeqByOperatorResponse")
	proto.RegisterType((*NextSeqToConfirmRequest)(nil), "lbm.fbridge.v1.NextSeqToConfirmRequest")
	proto.RegisterType((*NextSeqToConfirmResponse)(nil), "lbm.fbridge.v1.NextSeqToConfirmResponse")
	proto.RegisterType((*SubmittedProvisionRequest)(nil), "lbm.fbridge.v1.SubmittedProvisionRequest")
	proto.RegisterType((*SubmittedProvisionResponse)(nil), "lbm.fbridge.v1.SubmittedProvisionResponse")
	proto.RegisterType((*ConfirmedProvisionRequest)(nil), "lbm.fbridge.v1.ConfirmedProvisionRequest")
	proto.RegisterType((*ConfirmedProvisionResponse)(nil), "lbm.fbridge.v1.ConfirmedProvisionResponse")
	proto.RegisterType((*CommitmentsRequest)(nil), "lbm.fbridge.v1.CommitmentsRequest")
	proto.RegisterType((*CommitmentsResponse)(nil), "lbm.fbridge.v1.CommitmentsResponse")
}

func init() { proto.RegisterFile("lbm/fbridge/v1/query.proto", fileDescriptor_5e7780f9db9d346e) }

var fileDescriptor_5e7780f9db9d346e = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x95, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0xc7, 0xb7, 0x80, 0xab, 0xbc, 0x4d, 0x0c, 0x19, 0x10, 0x97, 0x06, 0x0a, 0x96, 0xa8, 0x20,
	0xb0, 0x75, 0x01, 0x25, 0xf1, 0xc7, 0x05, 0x8c, 0x46, 0x4d, 0x14, 0x17, 0x4f, 0x5e, 0x36, 0xd3,
	0xdd, 0xa1, 0x34, 0xd2, 0x4e, 0xdb, 0x99, 0x25, 0x6c, 0x08, 0x07, 0xfd, 0x0b, 0x8c, 0x72, 0xf6,
	0xee, 0xd1, 0xff, 0x82, 0x23, 0x89, 0x17, 0x4f, 0xc6, 0x80, 0x7f, 0x88, 0xe9, 0x74, 0x0a, 0xcb,
	0x74, 0x8b, 0x7b, 0xf3, 0xf6, 0xf6, 0xcd, 0xf7, 0xbd, 0xf7, 0x99, 0xb7, 0xf3, 0x4d, 0x41, 0xdf,
	0xb6, 0x3d, 0x6b, 0xd3, 0x8e, 0xdc, 0xa6, 0x43, 0xac, 0x9d, 0xaa, 0x15, 0xb6, 0x48, 0xd4, 0xae,
	0x04, 0x11, 0xe5, 0x14, 0x5d, 0xdd, 0xb6, 0xbd, 0x8a, 0x3c, 0xab, 0xec, 0x54, 0xf5, 0x71, 0x87,
	0x52, 0x67, 0x9b, 0x58, 0x38, 0x70, 0x2d, 0xec, 0xfb, 0x94, 0x63, 0xee, 0x52, 0x9f, 0x25, 0x6a,
	0x7d, 0xc4, 0xa1, 0x0e, 0x15, 0xa1, 0x15, 0x47, 0x32, 0x3b, 0xae, 0xf4, 0x4f, 0xdb, 0x89, 0x53,
	0x73, 0x04, 0xd0, 0x9b, 0x78, 0xe0, 0x3a, 0x8e, 0xb0, 0xc7, 0x6a, 0x24, 0x6c, 0x11, 0xc6, 0xcd,
	0x97, 0x30, 0x7c, 0x2e, 0xcb, 0x02, 0xea, 0x33, 0x82, 0x96, 0xa1, 0x18, 0x88, 0x4c, 0x59, 0x9b,
	0xd2, 0x66, 0x4a, 0x8b, 0xa3, 0x95, 0xf3, 0x7c, 0x95, 0x44, 0xbf, 0x3a, 0x70, 0xf8, 0x6b, 0xb2,
	0x50, 0x93, 0x5a, 0xf3, 0x01, 0x8c, 0x3f, 0x8b, 0x08, 0xe6, 0x84, 0xf1, 0x0d, 0x12, 0xae, 0xb6,
	0x5f, 0x07, 0x24, 0xc2, 0x9c, 0x46, 0x72, 0x18, 0xd2, 0xe1, 0x0a, 0x95, 0x29, 0xd1, 0x77, 0xb0,
	0x76, 0xfa, 0xdb, 0xac, 0xc2, 0x44, 0x4e, 0xad, 0x44, 0x1a, 0x82, 0x7e, 0x46, 0x42, 0x51, 0x37,
	0x50, 0x8b, 0x43, 0x73, 0x0c, 0xae, 0xbf, 0x22, 0xbb, 0xb1, 0xfc, 0x2d, 0x5d, 0xa3, 0xfe, 0xa6,
	0x1b, 0x79, 0xe9, 0xb5, 0xe6, 0xa1, 0x9c, 0x3d, 0xca, 0x6d, 0xf4, 0x1c, 0xc6, 0x36, 0x5a, 0xb6,
	0xe7, 0x72, 0x4e, 0x9a, 0xeb, 0x11, 0xdd, 0x71, 0x99, 0x4b, 0xfd, 0x1e, 0xa0, 0xd3, 0x56, 0x7d,
	0x67, 0xad, 0x0e, 0x34, 0xd0, 0xbb, 0xf5, 0x92, 0xb3, 0x57, 0x60, 0xa0, 0x89, 0x39, 0x96, 0x5b,
	0x9d, 0xc8, 0x6c, 0x35, 0x2d, 0x78, 0x82, 0x39, 0x96, 0xcb, 0x15, 0x05, 0xe8, 0x31, 0x14, 0x19,
	0xc7, 0xbc, 0xc5, 0xc4, 0xb0, 0xd2, 0xe2, 0x64, 0x6e, 0xe9, 0x86, 0x90, 0xa5, 0xff, 0x4c, 0x52,
	0x64, 0x2e, 0xc0, 0x98, 0x5c, 0x43, 0x97, 0x1b, 0x66, 0x17, 0x12, 0xdf, 0xa2, 0x9b, 0xfe, 0x3f,
	0xdf, 0xe2, 0x16, 0xa0, 0x35, 0xea, 0x79, 0x2e, 0xf7, 0x88, 0xcf, 0x59, 0x3e, 0xfe, 0x0a, 0x0c,
	0x9f, 0xd3, 0x49, 0xec, 0x29, 0x28, 0x35, 0xce, 0xd2, 0x65, 0x6d, 0xaa, 0x7f, 0x66, 0xb0, 0xd6,
	0x99, 0x5a, 0x3c, 0xb8, 0x0c, 0x97, 0x84, 0x1d, 0x50, 0x08, 0xc5, 0xe4, 0x89, 0x23, 0x53, 0x65,
	0xcc, 0xba, 0x48, 0x9f, 0xbe, 0x50, 0x93, 0x8c, 0x37, 0x8d, 0x8f, 0x3f, 0xfe, 0x7c, 0xe9, 0x2b,
	0xa3, 0x51, 0x4b, 0xf1, 0x69, 0xe2, 0x1e, 0xf4, 0x5d, 0x83, 0x6b, 0x5d, 0x2d, 0x80, 0xe6, 0xd5,
	0xf6, 0x17, 0xb9, 0x4c, 0x5f, 0xe8, 0x51, 0x2d, 0xb1, 0x1e, 0x0a, 0xac, 0x7b, 0x68, 0x49, 0xc5,
	0x72, 0x64, 0x59, 0x9d, 0x91, 0xb0, 0x6e, 0xb7, 0xeb, 0xe9, 0xab, 0xb7, 0xf6, 0xd2, 0x68, 0x1f,
	0x7d, 0xd6, 0x60, 0x48, 0x35, 0x1a, 0xba, 0xad, 0x02, 0xe4, 0xb8, 0x54, 0x9f, 0xf9, 0xb7, 0x50,
	0x42, 0xce, 0x09, 0xc8, 0x9b, 0x68, 0x5a, 0x85, 0xf4, 0xc9, 0x6e, 0x02, 0xc8, 0x69, 0xbd, 0x21,
	0xe7, 0x7f, 0xd3, 0x00, 0x65, 0x3d, 0x88, 0x66, 0xd5, 0x69, 0xb9, 0x9e, 0xd7, 0xef, 0xf4, 0x22,
	0x95, 0x68, 0x8f, 0x04, 0xda, 0x7d, 0xb4, 0xac, 0xa2, 0xb1, 0xb4, 0xa6, 0x1e, 0xa4, 0x45, 0x1d,
	0xab, 0xb3, 0xf6, 0x18, 0x09, 0xf7, 0xd1, 0x57, 0x2d, 0x7e, 0xd3, 0xaa, 0xd3, 0xb2, 0xac, 0xb9,
	0xee, 0xcd, 0xb2, 0xe6, 0x1b, 0xd7, 0xac, 0x0a, 0xd6, 0x39, 0x34, 0xab, 0xb2, 0x36, 0xd2, 0x9a,
	0x4e, 0x56, 0x01, 0xf8, 0x41, 0x83, 0x52, 0x87, 0x99, 0xb2, 0x76, 0xc8, 0x3a, 0x32, 0x6b, 0x87,
	0x2e, 0x6e, 0x34, 0x67, 0x05, 0xcb, 0x34, 0xba, 0x91, 0x65, 0x39, 0x15, 0x27, 0x0c, 0xab, 0x2f,
	0x0e, 0x8f, 0x0d, 0xed, 0xe8, 0xd8, 0xd0, 0x7e, 0x1f, 0x1b, 0xda, 0xa7, 0x13, 0xa3, 0x70, 0x74,
	0x62, 0x14, 0x7e, 0x9e, 0x18, 0x85, 0x77, 0x77, 0x1d, 0x97, 0x6f, 0xb5, 0xec, 0x4a, 0x83, 0x7a,
	0xd6, 0x53, 0xd7, 0x67, 0x8d, 0x2d, 0x17, 0x5b, 0x9b, 0x32, 0x58, 0x60, 0xcd, 0xf7, 0xd6, 0xee,
	0x69, 0x6b, 0xde, 0x0e, 0x08, 0xb3, 0x8b, 0xe2, 0x6b, 0xb8, 0xf4, 0x37, 0x00, 0x00, 0xff, 0xff,
	0xca, 0xda, 0x4f, 0xed, 0x8d, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of x/fbridge module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Get a greatest sequence number to be confirmed by a particular operator
	GreatestSeqByOperator(ctx context.Context, in *GreatestSeqByOperatorRequest, opts ...grpc.CallOption) (*GreatestSeqByOperatorResponse, error)
	// Get a next sequence number to be confirmed by n-of-m operators
	NextSeqToConfirm(ctx context.Context, in *NextSeqToConfirmRequest, opts ...grpc.CallOption) (*NextSeqToConfirmResponse, error)
	// Get a provision submitted by a particular operator
	SubmittedProvision(ctx context.Context, in *SubmittedProvisionRequest, opts ...grpc.CallOption) (*SubmittedProvisionResponse, error)
	// Get a specific confirmed provision
	ConfirmedProvision(ctx context.Context, in *ConfirmedProvisionRequest, opts ...grpc.CallOption) (*ConfirmedProvisionResponse, error)
	// Get commitments of a specific sequence number
	Commitments(ctx context.Context, in *CommitmentsRequest, opts ...grpc.CallOption) (*CommitmentsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GreatestSeqByOperator(ctx context.Context, in *GreatestSeqByOperatorRequest, opts ...grpc.CallOption) (*GreatestSeqByOperatorResponse, error) {
	out := new(GreatestSeqByOperatorResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/GreatestSeqByOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextSeqToConfirm(ctx context.Context, in *NextSeqToConfirmRequest, opts ...grpc.CallOption) (*NextSeqToConfirmResponse, error) {
	out := new(NextSeqToConfirmResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/NextSeqToConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubmittedProvision(ctx context.Context, in *SubmittedProvisionRequest, opts ...grpc.CallOption) (*SubmittedProvisionResponse, error) {
	out := new(SubmittedProvisionResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/SubmittedProvision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConfirmedProvision(ctx context.Context, in *ConfirmedProvisionRequest, opts ...grpc.CallOption) (*ConfirmedProvisionResponse, error) {
	out := new(ConfirmedProvisionResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/ConfirmedProvision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Commitments(ctx context.Context, in *CommitmentsRequest, opts ...grpc.CallOption) (*CommitmentsResponse, error) {
	out := new(CommitmentsResponse)
	err := c.cc.Invoke(ctx, "/lbm.fbridge.v1.Query/Commitments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of x/fbridge module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Get a greatest sequence number to be confirmed by a particular operator
	GreatestSeqByOperator(context.Context, *GreatestSeqByOperatorRequest) (*GreatestSeqByOperatorResponse, error)
	// Get a next sequence number to be confirmed by n-of-m operators
	NextSeqToConfirm(context.Context, *NextSeqToConfirmRequest) (*NextSeqToConfirmResponse, error)
	// Get a provision submitted by a particular operator
	SubmittedProvision(context.Context, *SubmittedProvisionRequest) (*SubmittedProvisionResponse, error)
	// Get a specific confirmed provision
	ConfirmedProvision(context.Context, *ConfirmedProvisionRequest) (*ConfirmedProvisionResponse, error)
	// Get commitments of a specific sequence number
	Commitments(context.Context, *CommitmentsRequest) (*CommitmentsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GreatestSeqByOperator(ctx context.Context, req *GreatestSeqByOperatorRequest) (*GreatestSeqByOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreatestSeqByOperator not implemented")
}
func (*UnimplementedQueryServer) NextSeqToConfirm(ctx context.Context, req *NextSeqToConfirmRequest) (*NextSeqToConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextSeqToConfirm not implemented")
}
func (*UnimplementedQueryServer) SubmittedProvision(ctx context.Context, req *SubmittedProvisionRequest) (*SubmittedProvisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmittedProvision not implemented")
}
func (*UnimplementedQueryServer) ConfirmedProvision(ctx context.Context, req *ConfirmedProvisionRequest) (*ConfirmedProvisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmedProvision not implemented")
}
func (*UnimplementedQueryServer) Commitments(ctx context.Context, req *CommitmentsRequest) (*CommitmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commitments not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GreatestSeqByOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreatestSeqByOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GreatestSeqByOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/GreatestSeqByOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GreatestSeqByOperator(ctx, req.(*GreatestSeqByOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextSeqToConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextSeqToConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextSeqToConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/NextSeqToConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextSeqToConfirm(ctx, req.(*NextSeqToConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubmittedProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmittedProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubmittedProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/SubmittedProvision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubmittedProvision(ctx, req.(*SubmittedProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConfirmedProvision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmedProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConfirmedProvision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/ConfirmedProvision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConfirmedProvision(ctx, req.(*ConfirmedProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Commitments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Commitments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbm.fbridge.v1.Query/Commitments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Commitments(ctx, req.(*CommitmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lbm.fbridge.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GreatestSeqByOperator",
			Handler:    _Query_GreatestSeqByOperator_Handler,
		},
		{
			MethodName: "NextSeqToConfirm",
			Handler:    _Query_NextSeqToConfirm_Handler,
		},
		{
			MethodName: "SubmittedProvision",
			Handler:    _Query_SubmittedProvision_Handler,
		},
		{
			MethodName: "ConfirmedProvision",
			Handler:    _Query_ConfirmedProvision_Handler,
		},
		{
			MethodName: "Commitments",
			Handler:    _Query_Commitments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lbm/fbridge/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GreatestSeqByOperatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreatestSeqByOperatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GreatestSeqByOperatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GreatestSeqByOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GreatestSeqByOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GreatestSeqByOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NextSeqToConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextSeqToConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextSeqToConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NextSeqToConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextSeqToConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextSeqToConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmittedProvisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmittedProvisionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmittedProvisionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmittedProvisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmittedProvisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmittedProvisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConfirmedProvisionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmedProvisionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmedProvisionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmedProvisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmedProvisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmedProvisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CommitmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seq != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitmentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitments) > 0 {
		for iNdEx := len(m.Commitments) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Commitments[iNdEx])
			copy(dAtA[i:], m.Commitments[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Commitments[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *GreatestSeqByOperatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *GreatestSeqByOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovQuery(uint64(m.Seq))
	}
	return n
}

func (m *NextSeqToConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NextSeqToConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovQuery(uint64(m.Seq))
	}
	return n
}

func (m *SubmittedProvisionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovQuery(uint64(m.Seq))
	}
	return n
}

func (m *SubmittedProvisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Data.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *ConfirmedProvisionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovQuery(uint64(m.Seq))
	}
	return n
}

func (m *ConfirmedProvisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Data.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *CommitmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovQuery(uint64(m.Seq))
	}
	return n
}

func (m *CommitmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commitments) > 0 {
		for _, s := range m.Commitments {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreatestSeqByOperatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreatestSeqByOperatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreatestSeqByOperatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GreatestSeqByOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GreatestSeqByOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GreatestSeqByOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextSeqToConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextSeqToConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextSeqToConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextSeqToConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextSeqToConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextSeqToConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmittedProvisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmittedProvisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmittedProvisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmittedProvisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmittedProvisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmittedProvisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmedProvisionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmedProvisionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmedProvisionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmedProvisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmedProvisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmedProvisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitments = append(m.Commitments, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
