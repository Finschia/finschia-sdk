// Code generated by MockGen. DO NOT EDIT.
// Source: x/collection/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
)

// MockClassKeeper is a mock of ClassKeeper interface.
type MockClassKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockClassKeeperMockRecorder
}

// MockClassKeeperMockRecorder is the mock recorder for MockClassKeeper.
type MockClassKeeperMockRecorder struct {
	mock *MockClassKeeper
}

// NewMockClassKeeper creates a new mock instance.
func NewMockClassKeeper(ctrl *gomock.Controller) *MockClassKeeper {
	mock := &MockClassKeeper{ctrl: ctrl}
	mock.recorder = &MockClassKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassKeeper) EXPECT() *MockClassKeeperMockRecorder {
	return m.recorder
}

// HasID mocks base method.
func (m *MockClassKeeper) HasID(ctx types.Context, id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasID", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasID indicates an expected call of HasID.
func (mr *MockClassKeeperMockRecorder) HasID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasID", reflect.TypeOf((*MockClassKeeper)(nil).HasID), ctx, id)
}

// NewID mocks base method.
func (m *MockClassKeeper) NewID(ctx types.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewID", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// NewID indicates an expected call of NewID.
func (mr *MockClassKeeperMockRecorder) NewID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewID", reflect.TypeOf((*MockClassKeeper)(nil).NewID), ctx)
}
