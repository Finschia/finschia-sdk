// Code generated by MockGen. DO NOT EDIT.
// Source: x/stakingplus/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/cosmos/cosmos-sdk/x/staking/types"
	gomock "github.com/golang/mock/gomock"
)

// MockFoundationKeeper is a mock of FoundationKeeper interface.
type MockFoundationKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockFoundationKeeperMockRecorder
}

// MockFoundationKeeperMockRecorder is the mock recorder for MockFoundationKeeper.
type MockFoundationKeeperMockRecorder struct {
	mock *MockFoundationKeeper
}

// NewMockFoundationKeeper creates a new mock instance.
func NewMockFoundationKeeper(ctrl *gomock.Controller) *MockFoundationKeeper {
	mock := &MockFoundationKeeper{ctrl: ctrl}
	mock.recorder = &MockFoundationKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFoundationKeeper) EXPECT() *MockFoundationKeeperMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockFoundationKeeper) Accept(ctx types.Context, grantee types.AccAddress, msg types.Msg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", ctx, grantee, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept.
func (mr *MockFoundationKeeperMockRecorder) Accept(ctx, grantee, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockFoundationKeeper)(nil).Accept), ctx, grantee, msg)
}

// MockStakingMsgServer is a mock of StakingMsgServer interface.
type MockStakingMsgServer struct {
	ctrl     *gomock.Controller
	recorder *MockStakingMsgServerMockRecorder
}

// MockStakingMsgServerMockRecorder is the mock recorder for MockStakingMsgServer.
type MockStakingMsgServerMockRecorder struct {
	mock *MockStakingMsgServer
}

// NewMockStakingMsgServer creates a new mock instance.
func NewMockStakingMsgServer(ctrl *gomock.Controller) *MockStakingMsgServer {
	mock := &MockStakingMsgServer{ctrl: ctrl}
	mock.recorder = &MockStakingMsgServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingMsgServer) EXPECT() *MockStakingMsgServerMockRecorder {
	return m.recorder
}

// BeginRedelegate mocks base method.
func (m *MockStakingMsgServer) BeginRedelegate(arg0 context.Context, arg1 *types0.MsgBeginRedelegate) (*types0.MsgBeginRedelegateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginRedelegate", arg0, arg1)
	ret0, _ := ret[0].(*types0.MsgBeginRedelegateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginRedelegate indicates an expected call of BeginRedelegate.
func (mr *MockStakingMsgServerMockRecorder) BeginRedelegate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginRedelegate", reflect.TypeOf((*MockStakingMsgServer)(nil).BeginRedelegate), arg0, arg1)
}

// CancelUnbondingDelegation mocks base method.
func (m *MockStakingMsgServer) CancelUnbondingDelegation(arg0 context.Context, arg1 *types0.MsgCancelUnbondingDelegation) (*types0.MsgCancelUnbondingDelegationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelUnbondingDelegation", arg0, arg1)
	ret0, _ := ret[0].(*types0.MsgCancelUnbondingDelegationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelUnbondingDelegation indicates an expected call of CancelUnbondingDelegation.
func (mr *MockStakingMsgServerMockRecorder) CancelUnbondingDelegation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelUnbondingDelegation", reflect.TypeOf((*MockStakingMsgServer)(nil).CancelUnbondingDelegation), arg0, arg1)
}

// CreateValidator mocks base method.
func (m *MockStakingMsgServer) CreateValidator(arg0 context.Context, arg1 *types0.MsgCreateValidator) (*types0.MsgCreateValidatorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateValidator", arg0, arg1)
	ret0, _ := ret[0].(*types0.MsgCreateValidatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateValidator indicates an expected call of CreateValidator.
func (mr *MockStakingMsgServerMockRecorder) CreateValidator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateValidator", reflect.TypeOf((*MockStakingMsgServer)(nil).CreateValidator), arg0, arg1)
}

// Delegate mocks base method.
func (m *MockStakingMsgServer) Delegate(arg0 context.Context, arg1 *types0.MsgDelegate) (*types0.MsgDelegateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delegate", arg0, arg1)
	ret0, _ := ret[0].(*types0.MsgDelegateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delegate indicates an expected call of Delegate.
func (mr *MockStakingMsgServerMockRecorder) Delegate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delegate", reflect.TypeOf((*MockStakingMsgServer)(nil).Delegate), arg0, arg1)
}

// EditValidator mocks base method.
func (m *MockStakingMsgServer) EditValidator(arg0 context.Context, arg1 *types0.MsgEditValidator) (*types0.MsgEditValidatorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditValidator", arg0, arg1)
	ret0, _ := ret[0].(*types0.MsgEditValidatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditValidator indicates an expected call of EditValidator.
func (mr *MockStakingMsgServerMockRecorder) EditValidator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditValidator", reflect.TypeOf((*MockStakingMsgServer)(nil).EditValidator), arg0, arg1)
}

// Undelegate mocks base method.
func (m *MockStakingMsgServer) Undelegate(arg0 context.Context, arg1 *types0.MsgUndelegate) (*types0.MsgUndelegateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Undelegate", arg0, arg1)
	ret0, _ := ret[0].(*types0.MsgUndelegateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Undelegate indicates an expected call of Undelegate.
func (mr *MockStakingMsgServerMockRecorder) Undelegate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undelegate", reflect.TypeOf((*MockStakingMsgServer)(nil).Undelegate), arg0, arg1)
}

// UpdateParams mocks base method.
func (m *MockStakingMsgServer) UpdateParams(arg0 context.Context, arg1 *types0.MsgUpdateParams) (*types0.MsgUpdateParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateParams", arg0, arg1)
	ret0, _ := ret[0].(*types0.MsgUpdateParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateParams indicates an expected call of UpdateParams.
func (mr *MockStakingMsgServerMockRecorder) UpdateParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateParams", reflect.TypeOf((*MockStakingMsgServer)(nil).UpdateParams), arg0, arg1)
}
