// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lbm/fswap/v1/fswap.proto

package types

import (
	fmt "fmt"
	github_com_Finschia_finschia_sdk_types "github.com/Finschia/finschia-sdk/types"
	types "github.com/Finschia/finschia-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FswapInit struct {
	FromDenom           string                                     `protobuf:"bytes,1,opt,name=from_denom,json=fromDenom,proto3" json:"from_denom,omitempty"`
	ToDenom             string                                     `protobuf:"bytes,2,opt,name=to_denom,json=toDenom,proto3" json:"to_denom,omitempty"`
	AmountCapForToDenom github_com_Finschia_finschia_sdk_types.Int `protobuf:"bytes,3,opt,name=amount_cap_for_to_denom,json=amountCapForToDenom,proto3,customtype=github.com/Finschia/finschia-sdk/types.Int" json:"amount_cap_for_to_denom"`
	SwapMultiple        github_com_Finschia_finschia_sdk_types.Int `protobuf:"bytes,4,opt,name=swap_multiple,json=swapMultiple,proto3,customtype=github.com/Finschia/finschia-sdk/types.Int" json:"swap_multiple"`
}

func (m *FswapInit) Reset()      { *m = FswapInit{} }
func (*FswapInit) ProtoMessage() {}
func (*FswapInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ca60eaf37a2b67, []int{0}
}
func (m *FswapInit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FswapInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FswapInit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FswapInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FswapInit.Merge(m, src)
}
func (m *FswapInit) XXX_Size() int {
	return m.Size()
}
func (m *FswapInit) XXX_DiscardUnknown() {
	xxx_messageInfo_FswapInit.DiscardUnknown(m)
}

var xxx_messageInfo_FswapInit proto.InternalMessageInfo

func (m *FswapInit) GetFromDenom() string {
	if m != nil {
		return m.FromDenom
	}
	return ""
}

func (m *FswapInit) GetToDenom() string {
	if m != nil {
		return m.ToDenom
	}
	return ""
}

// From cosmos-sdk 0.46.0 they deprecated this way, but currently finschia-sdk based on 0.45.10
type FswapInitProposal struct {
	Title       string    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	FswapInit   FswapInit `protobuf:"bytes,3,opt,name=fswap_init,json=fswapInit,proto3" json:"fswap_init"`
}

func (m *FswapInitProposal) Reset()      { *m = FswapInitProposal{} }
func (*FswapInitProposal) ProtoMessage() {}
func (*FswapInitProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ca60eaf37a2b67, []int{1}
}
func (m *FswapInitProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FswapInitProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FswapInitProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FswapInitProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FswapInitProposal.Merge(m, src)
}
func (m *FswapInitProposal) XXX_Size() int {
	return m.Size()
}
func (m *FswapInitProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_FswapInitProposal.DiscardUnknown(m)
}

var xxx_messageInfo_FswapInitProposal proto.InternalMessageInfo

func (m *FswapInitProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *FswapInitProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FswapInitProposal) GetFswapInit() FswapInit {
	if m != nil {
		return m.FswapInit
	}
	return FswapInit{}
}

type Swapped struct {
	OldCoinAmount types.Coin `protobuf:"bytes,1,opt,name=old_coin_amount,json=oldCoinAmount,proto3,castrepeated=github.com/Finschia/finschia-sdk/types.Coin" json:"old_coin_amount"`
	NewCoinAmount types.Coin `protobuf:"bytes,2,opt,name=new_coin_amount,json=newCoinAmount,proto3,castrepeated=github.com/Finschia/finschia-sdk/types.Coin" json:"new_coin_amount"`
}

func (m *Swapped) Reset()      { *m = Swapped{} }
func (*Swapped) ProtoMessage() {}
func (*Swapped) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ca60eaf37a2b67, []int{2}
}
func (m *Swapped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Swapped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Swapped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Swapped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Swapped.Merge(m, src)
}
func (m *Swapped) XXX_Size() int {
	return m.Size()
}
func (m *Swapped) XXX_DiscardUnknown() {
	xxx_messageInfo_Swapped.DiscardUnknown(m)
}

var xxx_messageInfo_Swapped proto.InternalMessageInfo

func (m *Swapped) GetOldCoinAmount() types.Coin {
	if m != nil {
		return m.OldCoinAmount
	}
	return types.Coin{}
}

func (m *Swapped) GetNewCoinAmount() types.Coin {
	if m != nil {
		return m.NewCoinAmount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*FswapInit)(nil), "lbm.fswap.v1.FswapInit")
	proto.RegisterType((*FswapInitProposal)(nil), "lbm.fswap.v1.FswapInitProposal")
	proto.RegisterType((*Swapped)(nil), "lbm.fswap.v1.Swapped")
}

func init() { proto.RegisterFile("lbm/fswap/v1/fswap.proto", fileDescriptor_42ca60eaf37a2b67) }

var fileDescriptor_42ca60eaf37a2b67 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x31, 0x6f, 0xd3, 0x40,
	0x18, 0xb5, 0x43, 0xa0, 0xcd, 0xa5, 0x15, 0xc2, 0x54, 0x6a, 0x5a, 0x09, 0xbb, 0xea, 0x84, 0x40,
	0xdc, 0x29, 0xe9, 0x56, 0xb1, 0x90, 0xa2, 0x88, 0x0e, 0x48, 0x28, 0x20, 0x21, 0xb1, 0x58, 0x67,
	0xfb, 0x9c, 0x9c, 0xb0, 0xef, 0x3b, 0xf9, 0x2e, 0x31, 0xfc, 0x0b, 0x04, 0x0b, 0x63, 0x67, 0x7e,
	0x49, 0xc7, 0x8e, 0x88, 0xa1, 0xa0, 0x64, 0xe1, 0x5f, 0x80, 0xce, 0x77, 0x84, 0x30, 0x81, 0x90,
	0xba, 0x7d, 0x79, 0xef, 0xcb, 0x7b, 0x9f, 0xdf, 0xb3, 0x51, 0xaf, 0x48, 0x4a, 0x92, 0xab, 0x9a,
	0x4a, 0x32, 0xef, 0xdb, 0x01, 0xcb, 0x0a, 0x34, 0x04, 0x5b, 0x45, 0x52, 0x62, 0x0b, 0xcc, 0xfb,
	0xfb, 0x3b, 0x13, 0x98, 0x40, 0x43, 0x10, 0x33, 0xd9, 0x9d, 0xfd, 0x30, 0x05, 0x55, 0x82, 0x22,
	0x09, 0x55, 0x8c, 0xcc, 0xfb, 0x09, 0xd3, 0xb4, 0x4f, 0x52, 0xe0, 0xc2, 0xf2, 0x87, 0xef, 0x5b,
	0xa8, 0x33, 0x32, 0x12, 0xa7, 0x82, 0xeb, 0xe0, 0x0e, 0x42, 0x79, 0x05, 0x65, 0x9c, 0x31, 0x01,
	0x65, 0xcf, 0x3f, 0xf0, 0xef, 0x76, 0xc6, 0x1d, 0x83, 0x3c, 0x36, 0x40, 0xb0, 0x87, 0x36, 0x35,
	0x38, 0xb2, 0xd5, 0x90, 0x1b, 0x1a, 0x2c, 0x35, 0x45, 0xbb, 0xb4, 0x84, 0x99, 0xd0, 0x71, 0x4a,
	0x65, 0x9c, 0x43, 0x15, 0xaf, 0x36, 0xaf, 0x99, 0xcd, 0xe1, 0xe0, 0xfc, 0x32, 0xf2, 0xbe, 0x5c,
	0x46, 0xf7, 0x26, 0x5c, 0x4f, 0x67, 0x09, 0x4e, 0xa1, 0x24, 0x23, 0x2e, 0x54, 0x3a, 0xe5, 0x94,
	0xe4, 0x6e, 0x78, 0xa0, 0xb2, 0xd7, 0x44, 0xbf, 0x95, 0x4c, 0xe1, 0x53, 0xa1, 0xc7, 0xb7, 0xad,
	0xe4, 0x09, 0x95, 0x23, 0xa8, 0x5e, 0x38, 0xa7, 0x97, 0x68, 0xdb, 0xdc, 0x1b, 0x97, 0xb3, 0x42,
	0x73, 0x59, 0xb0, 0x5e, 0xfb, 0xbf, 0xf5, 0xb7, 0x8c, 0xd0, 0x53, 0xa7, 0x73, 0xbc, 0xf9, 0xf1,
	0x2c, 0xf2, 0xbe, 0x9f, 0x45, 0xfe, 0xe1, 0x07, 0x1f, 0xdd, 0x5a, 0x85, 0xf2, 0xac, 0x02, 0x09,
	0x8a, 0x16, 0xc1, 0x0e, 0xba, 0xae, 0xb9, 0x2e, 0x98, 0xcb, 0xc5, 0xfe, 0x08, 0x0e, 0x50, 0x37,
	0x63, 0x2a, 0xad, 0xb8, 0xd4, 0x1c, 0x84, 0x8b, 0x65, 0x1d, 0x0a, 0x1e, 0x22, 0xd4, 0x94, 0x14,
	0x73, 0xc1, 0x75, 0x93, 0x46, 0x77, 0xb0, 0x8b, 0xd7, 0xbb, 0xc3, 0x2b, 0xb3, 0x61, 0xdb, 0x3c,
	0xc6, 0xb8, 0x93, 0xff, 0x02, 0xd6, 0xae, 0xfa, 0xe1, 0xa3, 0x8d, 0xe7, 0x35, 0x95, 0x92, 0x65,
	0xc1, 0x1c, 0xdd, 0x84, 0x22, 0x8b, 0x4d, 0x91, 0xb1, 0x0d, 0xa9, 0xb9, 0xaa, 0x3b, 0xd8, 0xc3,
	0xb6, 0x70, 0x6c, 0x0a, 0xc7, 0xae, 0x70, 0x7c, 0x02, 0x5c, 0x0c, 0x8f, 0x8c, 0xf4, 0xa7, 0xaf,
	0xd1, 0xfd, 0x7f, 0x4c, 0xc8, 0xfc, 0x69, 0xbc, 0x0d, 0x45, 0x66, 0x86, 0x47, 0x8d, 0x89, 0xf1,
	0x15, 0xac, 0xfe, 0xc3, 0xb7, 0x75, 0x35, 0xbe, 0x82, 0xd5, 0xbf, 0x7d, 0x8f, 0xdb, 0x26, 0x85,
	0xe1, 0x93, 0xf3, 0x45, 0xe8, 0x5f, 0x2c, 0x42, 0xff, 0xdb, 0x22, 0xf4, 0xdf, 0x2d, 0x43, 0xef,
	0x62, 0x19, 0x7a, 0x9f, 0x97, 0xa1, 0xf7, 0x0a, 0xff, 0x55, 0xfb, 0x8d, 0xfb, 0x86, 0x1a, 0x8f,
	0xe4, 0x46, 0xf3, 0xf6, 0x1f, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xe3, 0x53, 0x7f, 0x5d,
	0x03, 0x00, 0x00,
}

func (this *FswapInit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FswapInit)
	if !ok {
		that2, ok := that.(FswapInit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FromDenom != that1.FromDenom {
		return false
	}
	if this.ToDenom != that1.ToDenom {
		return false
	}
	if !this.AmountCapForToDenom.Equal(that1.AmountCapForToDenom) {
		return false
	}
	if !this.SwapMultiple.Equal(that1.SwapMultiple) {
		return false
	}
	return true
}
func (this *FswapInitProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FswapInitProposal)
	if !ok {
		that2, ok := that.(FswapInitProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.FswapInit.Equal(&that1.FswapInit) {
		return false
	}
	return true
}
func (m *FswapInit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FswapInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FswapInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SwapMultiple.Size()
		i -= size
		if _, err := m.SwapMultiple.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AmountCapForToDenom.Size()
		i -= size
		if _, err := m.AmountCapForToDenom.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ToDenom) > 0 {
		i -= len(m.ToDenom)
		copy(dAtA[i:], m.ToDenom)
		i = encodeVarintFswap(dAtA, i, uint64(len(m.ToDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromDenom) > 0 {
		i -= len(m.FromDenom)
		copy(dAtA[i:], m.FromDenom)
		i = encodeVarintFswap(dAtA, i, uint64(len(m.FromDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FswapInitProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FswapInitProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FswapInitProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FswapInit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFswap(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintFswap(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Swapped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Swapped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Swapped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NewCoinAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.OldCoinAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFswap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintFswap(dAtA []byte, offset int, v uint64) int {
	offset -= sovFswap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FswapInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromDenom)
	if l > 0 {
		n += 1 + l + sovFswap(uint64(l))
	}
	l = len(m.ToDenom)
	if l > 0 {
		n += 1 + l + sovFswap(uint64(l))
	}
	l = m.AmountCapForToDenom.Size()
	n += 1 + l + sovFswap(uint64(l))
	l = m.SwapMultiple.Size()
	n += 1 + l + sovFswap(uint64(l))
	return n
}

func (m *FswapInitProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovFswap(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFswap(uint64(l))
	}
	l = m.FswapInit.Size()
	n += 1 + l + sovFswap(uint64(l))
	return n
}

func (m *Swapped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OldCoinAmount.Size()
	n += 1 + l + sovFswap(uint64(l))
	l = m.NewCoinAmount.Size()
	n += 1 + l + sovFswap(uint64(l))
	return n
}

func sovFswap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFswap(x uint64) (n int) {
	return sovFswap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FswapInit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFswap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FswapInit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FswapInit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountCapForToDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountCapForToDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapMultiple", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapMultiple.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFswap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFswap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FswapInitProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFswap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FswapInitProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FswapInitProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FswapInit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFswap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FswapInit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFswap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFswap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Swapped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFswap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Swapped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Swapped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldCoinAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFswap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OldCoinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCoinAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFswap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewCoinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFswap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFswap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFswap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFswap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFswap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFswap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFswap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFswap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFswap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFswap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFswap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFswap = fmt.Errorf("proto: unexpected end of group")
)
