// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package abci

import (
	fmt "fmt"
	types1 "github.com/Finschia/finschia-sdk/api/ostracon/types"
	abci "github.com/Finschia/finschia-sdk/api/tendermint/abci"
	types "github.com/Finschia/finschia-sdk/api/tendermint/types"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Request                      protoreflect.MessageDescriptor
	fd_Request_echo                 protoreflect.FieldDescriptor
	fd_Request_flush                protoreflect.FieldDescriptor
	fd_Request_info                 protoreflect.FieldDescriptor
	fd_Request_set_option           protoreflect.FieldDescriptor
	fd_Request_init_chain           protoreflect.FieldDescriptor
	fd_Request_query                protoreflect.FieldDescriptor
	fd_Request_begin_block          protoreflect.FieldDescriptor
	fd_Request_check_tx             protoreflect.FieldDescriptor
	fd_Request_deliver_tx           protoreflect.FieldDescriptor
	fd_Request_end_block            protoreflect.FieldDescriptor
	fd_Request_commit               protoreflect.FieldDescriptor
	fd_Request_list_snapshots       protoreflect.FieldDescriptor
	fd_Request_offer_snapshot       protoreflect.FieldDescriptor
	fd_Request_load_snapshot_chunk  protoreflect.FieldDescriptor
	fd_Request_apply_snapshot_chunk protoreflect.FieldDescriptor
	fd_Request_begin_recheck_tx     protoreflect.FieldDescriptor
	fd_Request_end_recheck_tx       protoreflect.FieldDescriptor
)

func init() {
	file_ostracon_abci_types_proto_init()
	md_Request = File_ostracon_abci_types_proto.Messages().ByName("Request")
	fd_Request_echo = md_Request.Fields().ByName("echo")
	fd_Request_flush = md_Request.Fields().ByName("flush")
	fd_Request_info = md_Request.Fields().ByName("info")
	fd_Request_set_option = md_Request.Fields().ByName("set_option")
	fd_Request_init_chain = md_Request.Fields().ByName("init_chain")
	fd_Request_query = md_Request.Fields().ByName("query")
	fd_Request_begin_block = md_Request.Fields().ByName("begin_block")
	fd_Request_check_tx = md_Request.Fields().ByName("check_tx")
	fd_Request_deliver_tx = md_Request.Fields().ByName("deliver_tx")
	fd_Request_end_block = md_Request.Fields().ByName("end_block")
	fd_Request_commit = md_Request.Fields().ByName("commit")
	fd_Request_list_snapshots = md_Request.Fields().ByName("list_snapshots")
	fd_Request_offer_snapshot = md_Request.Fields().ByName("offer_snapshot")
	fd_Request_load_snapshot_chunk = md_Request.Fields().ByName("load_snapshot_chunk")
	fd_Request_apply_snapshot_chunk = md_Request.Fields().ByName("apply_snapshot_chunk")
	fd_Request_begin_recheck_tx = md_Request.Fields().ByName("begin_recheck_tx")
	fd_Request_end_recheck_tx = md_Request.Fields().ByName("end_recheck_tx")
}

var _ protoreflect.Message = (*fastReflection_Request)(nil)

type fastReflection_Request Request

func (x *Request) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Request)(x)
}

func (x *Request) slowProtoReflect() protoreflect.Message {
	mi := &file_ostracon_abci_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Request_messageType fastReflection_Request_messageType
var _ protoreflect.MessageType = fastReflection_Request_messageType{}

type fastReflection_Request_messageType struct{}

func (x fastReflection_Request_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Request)(nil)
}
func (x fastReflection_Request_messageType) New() protoreflect.Message {
	return new(fastReflection_Request)
}
func (x fastReflection_Request_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Request
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Request) Descriptor() protoreflect.MessageDescriptor {
	return md_Request
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Request) Type() protoreflect.MessageType {
	return _fastReflection_Request_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Request) New() protoreflect.Message {
	return new(fastReflection_Request)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Request) Interface() protoreflect.ProtoMessage {
	return (*Request)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Request) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Value != nil {
		switch o := x.Value.(type) {
		case *Request_Echo:
			v := o.Echo
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_echo, value) {
				return
			}
		case *Request_Flush:
			v := o.Flush
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_flush, value) {
				return
			}
		case *Request_Info:
			v := o.Info
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_info, value) {
				return
			}
		case *Request_SetOption:
			v := o.SetOption
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_set_option, value) {
				return
			}
		case *Request_InitChain:
			v := o.InitChain
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_init_chain, value) {
				return
			}
		case *Request_Query:
			v := o.Query
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_query, value) {
				return
			}
		case *Request_BeginBlock:
			v := o.BeginBlock
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_begin_block, value) {
				return
			}
		case *Request_CheckTx:
			v := o.CheckTx
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_check_tx, value) {
				return
			}
		case *Request_DeliverTx:
			v := o.DeliverTx
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_deliver_tx, value) {
				return
			}
		case *Request_EndBlock:
			v := o.EndBlock
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_end_block, value) {
				return
			}
		case *Request_Commit:
			v := o.Commit
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_commit, value) {
				return
			}
		case *Request_ListSnapshots:
			v := o.ListSnapshots
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_list_snapshots, value) {
				return
			}
		case *Request_OfferSnapshot:
			v := o.OfferSnapshot
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_offer_snapshot, value) {
				return
			}
		case *Request_LoadSnapshotChunk:
			v := o.LoadSnapshotChunk
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_load_snapshot_chunk, value) {
				return
			}
		case *Request_ApplySnapshotChunk:
			v := o.ApplySnapshotChunk
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_apply_snapshot_chunk, value) {
				return
			}
		case *Request_BeginRecheckTx:
			v := o.BeginRecheckTx
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_begin_recheck_tx, value) {
				return
			}
		case *Request_EndRecheckTx:
			v := o.EndRecheckTx
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Request_end_recheck_tx, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Request) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ostracon.abci.Request.echo":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_Echo); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.flush":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_Flush); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.info":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_Info); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.set_option":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_SetOption); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.init_chain":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_InitChain); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.query":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_Query); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.begin_block":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_BeginBlock); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.check_tx":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_CheckTx); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.deliver_tx":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_DeliverTx); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.end_block":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_EndBlock); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.commit":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_Commit); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.list_snapshots":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_ListSnapshots); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.offer_snapshot":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_OfferSnapshot); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.load_snapshot_chunk":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_LoadSnapshotChunk); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.apply_snapshot_chunk":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_ApplySnapshotChunk); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.begin_recheck_tx":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_BeginRecheckTx); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Request.end_recheck_tx":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Request_EndRecheckTx); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Request"))
		}
		panic(fmt.Errorf("message ostracon.abci.Request does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Request) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ostracon.abci.Request.echo":
		x.Value = nil
	case "ostracon.abci.Request.flush":
		x.Value = nil
	case "ostracon.abci.Request.info":
		x.Value = nil
	case "ostracon.abci.Request.set_option":
		x.Value = nil
	case "ostracon.abci.Request.init_chain":
		x.Value = nil
	case "ostracon.abci.Request.query":
		x.Value = nil
	case "ostracon.abci.Request.begin_block":
		x.Value = nil
	case "ostracon.abci.Request.check_tx":
		x.Value = nil
	case "ostracon.abci.Request.deliver_tx":
		x.Value = nil
	case "ostracon.abci.Request.end_block":
		x.Value = nil
	case "ostracon.abci.Request.commit":
		x.Value = nil
	case "ostracon.abci.Request.list_snapshots":
		x.Value = nil
	case "ostracon.abci.Request.offer_snapshot":
		x.Value = nil
	case "ostracon.abci.Request.load_snapshot_chunk":
		x.Value = nil
	case "ostracon.abci.Request.apply_snapshot_chunk":
		x.Value = nil
	case "ostracon.abci.Request.begin_recheck_tx":
		x.Value = nil
	case "ostracon.abci.Request.end_recheck_tx":
		x.Value = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Request"))
		}
		panic(fmt.Errorf("message ostracon.abci.Request does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Request) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ostracon.abci.Request.echo":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestEcho)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_Echo); ok {
			return protoreflect.ValueOfMessage(v.Echo.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestEcho)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.flush":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestFlush)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_Flush); ok {
			return protoreflect.ValueOfMessage(v.Flush.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestFlush)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.info":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestInfo)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_Info); ok {
			return protoreflect.ValueOfMessage(v.Info.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestInfo)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.set_option":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestSetOption)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_SetOption); ok {
			return protoreflect.ValueOfMessage(v.SetOption.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestSetOption)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.init_chain":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestInitChain)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_InitChain); ok {
			return protoreflect.ValueOfMessage(v.InitChain.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestInitChain)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.query":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestQuery)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_Query); ok {
			return protoreflect.ValueOfMessage(v.Query.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestQuery)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.begin_block":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*RequestBeginBlock)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_BeginBlock); ok {
			return protoreflect.ValueOfMessage(v.BeginBlock.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*RequestBeginBlock)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.check_tx":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestCheckTx)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_CheckTx); ok {
			return protoreflect.ValueOfMessage(v.CheckTx.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestCheckTx)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.deliver_tx":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestDeliverTx)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_DeliverTx); ok {
			return protoreflect.ValueOfMessage(v.DeliverTx.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestDeliverTx)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.end_block":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestEndBlock)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_EndBlock); ok {
			return protoreflect.ValueOfMessage(v.EndBlock.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestEndBlock)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.commit":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestCommit)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_Commit); ok {
			return protoreflect.ValueOfMessage(v.Commit.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestCommit)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.list_snapshots":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestListSnapshots)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_ListSnapshots); ok {
			return protoreflect.ValueOfMessage(v.ListSnapshots.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestListSnapshots)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.offer_snapshot":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestOfferSnapshot)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_OfferSnapshot); ok {
			return protoreflect.ValueOfMessage(v.OfferSnapshot.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestOfferSnapshot)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.load_snapshot_chunk":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestLoadSnapshotChunk)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_LoadSnapshotChunk); ok {
			return protoreflect.ValueOfMessage(v.LoadSnapshotChunk.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestLoadSnapshotChunk)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.apply_snapshot_chunk":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.RequestApplySnapshotChunk)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_ApplySnapshotChunk); ok {
			return protoreflect.ValueOfMessage(v.ApplySnapshotChunk.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.RequestApplySnapshotChunk)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.begin_recheck_tx":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*RequestBeginRecheckTx)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_BeginRecheckTx); ok {
			return protoreflect.ValueOfMessage(v.BeginRecheckTx.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*RequestBeginRecheckTx)(nil).ProtoReflect())
		}
	case "ostracon.abci.Request.end_recheck_tx":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*RequestEndRecheckTx)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Request_EndRecheckTx); ok {
			return protoreflect.ValueOfMessage(v.EndRecheckTx.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*RequestEndRecheckTx)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Request"))
		}
		panic(fmt.Errorf("message ostracon.abci.Request does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Request) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ostracon.abci.Request.echo":
		cv := value.Message().Interface().(*abci.RequestEcho)
		x.Value = &Request_Echo{Echo: cv}
	case "ostracon.abci.Request.flush":
		cv := value.Message().Interface().(*abci.RequestFlush)
		x.Value = &Request_Flush{Flush: cv}
	case "ostracon.abci.Request.info":
		cv := value.Message().Interface().(*abci.RequestInfo)
		x.Value = &Request_Info{Info: cv}
	case "ostracon.abci.Request.set_option":
		cv := value.Message().Interface().(*abci.RequestSetOption)
		x.Value = &Request_SetOption{SetOption: cv}
	case "ostracon.abci.Request.init_chain":
		cv := value.Message().Interface().(*abci.RequestInitChain)
		x.Value = &Request_InitChain{InitChain: cv}
	case "ostracon.abci.Request.query":
		cv := value.Message().Interface().(*abci.RequestQuery)
		x.Value = &Request_Query{Query: cv}
	case "ostracon.abci.Request.begin_block":
		cv := value.Message().Interface().(*RequestBeginBlock)
		x.Value = &Request_BeginBlock{BeginBlock: cv}
	case "ostracon.abci.Request.check_tx":
		cv := value.Message().Interface().(*abci.RequestCheckTx)
		x.Value = &Request_CheckTx{CheckTx: cv}
	case "ostracon.abci.Request.deliver_tx":
		cv := value.Message().Interface().(*abci.RequestDeliverTx)
		x.Value = &Request_DeliverTx{DeliverTx: cv}
	case "ostracon.abci.Request.end_block":
		cv := value.Message().Interface().(*abci.RequestEndBlock)
		x.Value = &Request_EndBlock{EndBlock: cv}
	case "ostracon.abci.Request.commit":
		cv := value.Message().Interface().(*abci.RequestCommit)
		x.Value = &Request_Commit{Commit: cv}
	case "ostracon.abci.Request.list_snapshots":
		cv := value.Message().Interface().(*abci.RequestListSnapshots)
		x.Value = &Request_ListSnapshots{ListSnapshots: cv}
	case "ostracon.abci.Request.offer_snapshot":
		cv := value.Message().Interface().(*abci.RequestOfferSnapshot)
		x.Value = &Request_OfferSnapshot{OfferSnapshot: cv}
	case "ostracon.abci.Request.load_snapshot_chunk":
		cv := value.Message().Interface().(*abci.RequestLoadSnapshotChunk)
		x.Value = &Request_LoadSnapshotChunk{LoadSnapshotChunk: cv}
	case "ostracon.abci.Request.apply_snapshot_chunk":
		cv := value.Message().Interface().(*abci.RequestApplySnapshotChunk)
		x.Value = &Request_ApplySnapshotChunk{ApplySnapshotChunk: cv}
	case "ostracon.abci.Request.begin_recheck_tx":
		cv := value.Message().Interface().(*RequestBeginRecheckTx)
		x.Value = &Request_BeginRecheckTx{BeginRecheckTx: cv}
	case "ostracon.abci.Request.end_recheck_tx":
		cv := value.Message().Interface().(*RequestEndRecheckTx)
		x.Value = &Request_EndRecheckTx{EndRecheckTx: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Request"))
		}
		panic(fmt.Errorf("message ostracon.abci.Request does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Request) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.Request.echo":
		if x.Value == nil {
			value := &abci.RequestEcho{}
			oneofValue := &Request_Echo{Echo: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_Echo:
			return protoreflect.ValueOfMessage(m.Echo.ProtoReflect())
		default:
			value := &abci.RequestEcho{}
			oneofValue := &Request_Echo{Echo: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.flush":
		if x.Value == nil {
			value := &abci.RequestFlush{}
			oneofValue := &Request_Flush{Flush: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_Flush:
			return protoreflect.ValueOfMessage(m.Flush.ProtoReflect())
		default:
			value := &abci.RequestFlush{}
			oneofValue := &Request_Flush{Flush: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.info":
		if x.Value == nil {
			value := &abci.RequestInfo{}
			oneofValue := &Request_Info{Info: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_Info:
			return protoreflect.ValueOfMessage(m.Info.ProtoReflect())
		default:
			value := &abci.RequestInfo{}
			oneofValue := &Request_Info{Info: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.set_option":
		if x.Value == nil {
			value := &abci.RequestSetOption{}
			oneofValue := &Request_SetOption{SetOption: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_SetOption:
			return protoreflect.ValueOfMessage(m.SetOption.ProtoReflect())
		default:
			value := &abci.RequestSetOption{}
			oneofValue := &Request_SetOption{SetOption: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.init_chain":
		if x.Value == nil {
			value := &abci.RequestInitChain{}
			oneofValue := &Request_InitChain{InitChain: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_InitChain:
			return protoreflect.ValueOfMessage(m.InitChain.ProtoReflect())
		default:
			value := &abci.RequestInitChain{}
			oneofValue := &Request_InitChain{InitChain: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.query":
		if x.Value == nil {
			value := &abci.RequestQuery{}
			oneofValue := &Request_Query{Query: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_Query:
			return protoreflect.ValueOfMessage(m.Query.ProtoReflect())
		default:
			value := &abci.RequestQuery{}
			oneofValue := &Request_Query{Query: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.begin_block":
		if x.Value == nil {
			value := &RequestBeginBlock{}
			oneofValue := &Request_BeginBlock{BeginBlock: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_BeginBlock:
			return protoreflect.ValueOfMessage(m.BeginBlock.ProtoReflect())
		default:
			value := &RequestBeginBlock{}
			oneofValue := &Request_BeginBlock{BeginBlock: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.check_tx":
		if x.Value == nil {
			value := &abci.RequestCheckTx{}
			oneofValue := &Request_CheckTx{CheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_CheckTx:
			return protoreflect.ValueOfMessage(m.CheckTx.ProtoReflect())
		default:
			value := &abci.RequestCheckTx{}
			oneofValue := &Request_CheckTx{CheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.deliver_tx":
		if x.Value == nil {
			value := &abci.RequestDeliverTx{}
			oneofValue := &Request_DeliverTx{DeliverTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_DeliverTx:
			return protoreflect.ValueOfMessage(m.DeliverTx.ProtoReflect())
		default:
			value := &abci.RequestDeliverTx{}
			oneofValue := &Request_DeliverTx{DeliverTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.end_block":
		if x.Value == nil {
			value := &abci.RequestEndBlock{}
			oneofValue := &Request_EndBlock{EndBlock: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_EndBlock:
			return protoreflect.ValueOfMessage(m.EndBlock.ProtoReflect())
		default:
			value := &abci.RequestEndBlock{}
			oneofValue := &Request_EndBlock{EndBlock: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.commit":
		if x.Value == nil {
			value := &abci.RequestCommit{}
			oneofValue := &Request_Commit{Commit: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_Commit:
			return protoreflect.ValueOfMessage(m.Commit.ProtoReflect())
		default:
			value := &abci.RequestCommit{}
			oneofValue := &Request_Commit{Commit: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.list_snapshots":
		if x.Value == nil {
			value := &abci.RequestListSnapshots{}
			oneofValue := &Request_ListSnapshots{ListSnapshots: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_ListSnapshots:
			return protoreflect.ValueOfMessage(m.ListSnapshots.ProtoReflect())
		default:
			value := &abci.RequestListSnapshots{}
			oneofValue := &Request_ListSnapshots{ListSnapshots: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.offer_snapshot":
		if x.Value == nil {
			value := &abci.RequestOfferSnapshot{}
			oneofValue := &Request_OfferSnapshot{OfferSnapshot: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_OfferSnapshot:
			return protoreflect.ValueOfMessage(m.OfferSnapshot.ProtoReflect())
		default:
			value := &abci.RequestOfferSnapshot{}
			oneofValue := &Request_OfferSnapshot{OfferSnapshot: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.load_snapshot_chunk":
		if x.Value == nil {
			value := &abci.RequestLoadSnapshotChunk{}
			oneofValue := &Request_LoadSnapshotChunk{LoadSnapshotChunk: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_LoadSnapshotChunk:
			return protoreflect.ValueOfMessage(m.LoadSnapshotChunk.ProtoReflect())
		default:
			value := &abci.RequestLoadSnapshotChunk{}
			oneofValue := &Request_LoadSnapshotChunk{LoadSnapshotChunk: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.apply_snapshot_chunk":
		if x.Value == nil {
			value := &abci.RequestApplySnapshotChunk{}
			oneofValue := &Request_ApplySnapshotChunk{ApplySnapshotChunk: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_ApplySnapshotChunk:
			return protoreflect.ValueOfMessage(m.ApplySnapshotChunk.ProtoReflect())
		default:
			value := &abci.RequestApplySnapshotChunk{}
			oneofValue := &Request_ApplySnapshotChunk{ApplySnapshotChunk: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.begin_recheck_tx":
		if x.Value == nil {
			value := &RequestBeginRecheckTx{}
			oneofValue := &Request_BeginRecheckTx{BeginRecheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_BeginRecheckTx:
			return protoreflect.ValueOfMessage(m.BeginRecheckTx.ProtoReflect())
		default:
			value := &RequestBeginRecheckTx{}
			oneofValue := &Request_BeginRecheckTx{BeginRecheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Request.end_recheck_tx":
		if x.Value == nil {
			value := &RequestEndRecheckTx{}
			oneofValue := &Request_EndRecheckTx{EndRecheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Request_EndRecheckTx:
			return protoreflect.ValueOfMessage(m.EndRecheckTx.ProtoReflect())
		default:
			value := &RequestEndRecheckTx{}
			oneofValue := &Request_EndRecheckTx{EndRecheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Request"))
		}
		panic(fmt.Errorf("message ostracon.abci.Request does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Request) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.Request.echo":
		value := &abci.RequestEcho{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.flush":
		value := &abci.RequestFlush{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.info":
		value := &abci.RequestInfo{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.set_option":
		value := &abci.RequestSetOption{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.init_chain":
		value := &abci.RequestInitChain{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.query":
		value := &abci.RequestQuery{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.begin_block":
		value := &RequestBeginBlock{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.check_tx":
		value := &abci.RequestCheckTx{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.deliver_tx":
		value := &abci.RequestDeliverTx{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.end_block":
		value := &abci.RequestEndBlock{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.commit":
		value := &abci.RequestCommit{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.list_snapshots":
		value := &abci.RequestListSnapshots{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.offer_snapshot":
		value := &abci.RequestOfferSnapshot{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.load_snapshot_chunk":
		value := &abci.RequestLoadSnapshotChunk{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.apply_snapshot_chunk":
		value := &abci.RequestApplySnapshotChunk{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.begin_recheck_tx":
		value := &RequestBeginRecheckTx{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Request.end_recheck_tx":
		value := &RequestEndRecheckTx{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Request"))
		}
		panic(fmt.Errorf("message ostracon.abci.Request does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Request) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "ostracon.abci.Request.value":
		if x.Value == nil {
			return nil
		}
		switch x.Value.(type) {
		case *Request_Echo:
			return x.Descriptor().Fields().ByName("echo")
		case *Request_Flush:
			return x.Descriptor().Fields().ByName("flush")
		case *Request_Info:
			return x.Descriptor().Fields().ByName("info")
		case *Request_SetOption:
			return x.Descriptor().Fields().ByName("set_option")
		case *Request_InitChain:
			return x.Descriptor().Fields().ByName("init_chain")
		case *Request_Query:
			return x.Descriptor().Fields().ByName("query")
		case *Request_BeginBlock:
			return x.Descriptor().Fields().ByName("begin_block")
		case *Request_CheckTx:
			return x.Descriptor().Fields().ByName("check_tx")
		case *Request_DeliverTx:
			return x.Descriptor().Fields().ByName("deliver_tx")
		case *Request_EndBlock:
			return x.Descriptor().Fields().ByName("end_block")
		case *Request_Commit:
			return x.Descriptor().Fields().ByName("commit")
		case *Request_ListSnapshots:
			return x.Descriptor().Fields().ByName("list_snapshots")
		case *Request_OfferSnapshot:
			return x.Descriptor().Fields().ByName("offer_snapshot")
		case *Request_LoadSnapshotChunk:
			return x.Descriptor().Fields().ByName("load_snapshot_chunk")
		case *Request_ApplySnapshotChunk:
			return x.Descriptor().Fields().ByName("apply_snapshot_chunk")
		case *Request_BeginRecheckTx:
			return x.Descriptor().Fields().ByName("begin_recheck_tx")
		case *Request_EndRecheckTx:
			return x.Descriptor().Fields().ByName("end_recheck_tx")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in ostracon.abci.Request", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Request) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Request) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Request) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Request) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Request)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Value.(type) {
		case *Request_Echo:
			if x == nil {
				break
			}
			l = options.Size(x.Echo)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_Flush:
			if x == nil {
				break
			}
			l = options.Size(x.Flush)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_Info:
			if x == nil {
				break
			}
			l = options.Size(x.Info)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_SetOption:
			if x == nil {
				break
			}
			l = options.Size(x.SetOption)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_InitChain:
			if x == nil {
				break
			}
			l = options.Size(x.InitChain)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_Query:
			if x == nil {
				break
			}
			l = options.Size(x.Query)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_BeginBlock:
			if x == nil {
				break
			}
			l = options.Size(x.BeginBlock)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_CheckTx:
			if x == nil {
				break
			}
			l = options.Size(x.CheckTx)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_DeliverTx:
			if x == nil {
				break
			}
			l = options.Size(x.DeliverTx)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_EndBlock:
			if x == nil {
				break
			}
			l = options.Size(x.EndBlock)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_Commit:
			if x == nil {
				break
			}
			l = options.Size(x.Commit)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_ListSnapshots:
			if x == nil {
				break
			}
			l = options.Size(x.ListSnapshots)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_OfferSnapshot:
			if x == nil {
				break
			}
			l = options.Size(x.OfferSnapshot)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_LoadSnapshotChunk:
			if x == nil {
				break
			}
			l = options.Size(x.LoadSnapshotChunk)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_ApplySnapshotChunk:
			if x == nil {
				break
			}
			l = options.Size(x.ApplySnapshotChunk)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Request_BeginRecheckTx:
			if x == nil {
				break
			}
			l = options.Size(x.BeginRecheckTx)
			n += 2 + l + runtime.Sov(uint64(l))
		case *Request_EndRecheckTx:
			if x == nil {
				break
			}
			l = options.Size(x.EndRecheckTx)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Request)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Value.(type) {
		case *Request_Echo:
			encoded, err := options.Marshal(x.Echo)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		case *Request_Flush:
			encoded, err := options.Marshal(x.Flush)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		case *Request_Info:
			encoded, err := options.Marshal(x.Info)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		case *Request_SetOption:
			encoded, err := options.Marshal(x.SetOption)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		case *Request_InitChain:
			encoded, err := options.Marshal(x.InitChain)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		case *Request_Query:
			encoded, err := options.Marshal(x.Query)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		case *Request_BeginBlock:
			encoded, err := options.Marshal(x.BeginBlock)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		case *Request_CheckTx:
			encoded, err := options.Marshal(x.CheckTx)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		case *Request_DeliverTx:
			encoded, err := options.Marshal(x.DeliverTx)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		case *Request_EndBlock:
			encoded, err := options.Marshal(x.EndBlock)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		case *Request_Commit:
			encoded, err := options.Marshal(x.Commit)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		case *Request_ListSnapshots:
			encoded, err := options.Marshal(x.ListSnapshots)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		case *Request_OfferSnapshot:
			encoded, err := options.Marshal(x.OfferSnapshot)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x6a
		case *Request_LoadSnapshotChunk:
			encoded, err := options.Marshal(x.LoadSnapshotChunk)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x72
		case *Request_ApplySnapshotChunk:
			encoded, err := options.Marshal(x.ApplySnapshotChunk)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x7a
		case *Request_BeginRecheckTx:
			encoded, err := options.Marshal(x.BeginRecheckTx)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xc2
		case *Request_EndRecheckTx:
			encoded, err := options.Marshal(x.EndRecheckTx)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xca
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Request)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Request: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Echo", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestEcho{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_Echo{v}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Flush", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestFlush{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_Flush{v}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestInfo{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_Info{v}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SetOption", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestSetOption{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_SetOption{v}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitChain", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestInitChain{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_InitChain{v}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestQuery{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_Query{v}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BeginBlock", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &RequestBeginBlock{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_BeginBlock{v}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CheckTx", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestCheckTx{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_CheckTx{v}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DeliverTx", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestDeliverTx{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_DeliverTx{v}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestEndBlock{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_EndBlock{v}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestCommit{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_Commit{v}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ListSnapshots", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestListSnapshots{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_ListSnapshots{v}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OfferSnapshot", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestOfferSnapshot{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_OfferSnapshot{v}
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LoadSnapshotChunk", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestLoadSnapshotChunk{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_LoadSnapshotChunk{v}
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ApplySnapshotChunk", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.RequestApplySnapshotChunk{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_ApplySnapshotChunk{v}
				iNdEx = postIndex
			case 1000:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BeginRecheckTx", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &RequestBeginRecheckTx{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_BeginRecheckTx{v}
				iNdEx = postIndex
			case 1001:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndRecheckTx", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &RequestEndRecheckTx{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Request_EndRecheckTx{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_RequestBeginBlock_4_list)(nil)

type _RequestBeginBlock_4_list struct {
	list *[]*abci.Evidence
}

func (x *_RequestBeginBlock_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_RequestBeginBlock_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_RequestBeginBlock_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*abci.Evidence)
	(*x.list)[i] = concreteValue
}

func (x *_RequestBeginBlock_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*abci.Evidence)
	*x.list = append(*x.list, concreteValue)
}

func (x *_RequestBeginBlock_4_list) AppendMutable() protoreflect.Value {
	v := new(abci.Evidence)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_RequestBeginBlock_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_RequestBeginBlock_4_list) NewElement() protoreflect.Value {
	v := new(abci.Evidence)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_RequestBeginBlock_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_RequestBeginBlock                      protoreflect.MessageDescriptor
	fd_RequestBeginBlock_hash                 protoreflect.FieldDescriptor
	fd_RequestBeginBlock_header               protoreflect.FieldDescriptor
	fd_RequestBeginBlock_last_commit_info     protoreflect.FieldDescriptor
	fd_RequestBeginBlock_byzantine_validators protoreflect.FieldDescriptor
	fd_RequestBeginBlock_entropy              protoreflect.FieldDescriptor
)

func init() {
	file_ostracon_abci_types_proto_init()
	md_RequestBeginBlock = File_ostracon_abci_types_proto.Messages().ByName("RequestBeginBlock")
	fd_RequestBeginBlock_hash = md_RequestBeginBlock.Fields().ByName("hash")
	fd_RequestBeginBlock_header = md_RequestBeginBlock.Fields().ByName("header")
	fd_RequestBeginBlock_last_commit_info = md_RequestBeginBlock.Fields().ByName("last_commit_info")
	fd_RequestBeginBlock_byzantine_validators = md_RequestBeginBlock.Fields().ByName("byzantine_validators")
	fd_RequestBeginBlock_entropy = md_RequestBeginBlock.Fields().ByName("entropy")
}

var _ protoreflect.Message = (*fastReflection_RequestBeginBlock)(nil)

type fastReflection_RequestBeginBlock RequestBeginBlock

func (x *RequestBeginBlock) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RequestBeginBlock)(x)
}

func (x *RequestBeginBlock) slowProtoReflect() protoreflect.Message {
	mi := &file_ostracon_abci_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RequestBeginBlock_messageType fastReflection_RequestBeginBlock_messageType
var _ protoreflect.MessageType = fastReflection_RequestBeginBlock_messageType{}

type fastReflection_RequestBeginBlock_messageType struct{}

func (x fastReflection_RequestBeginBlock_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RequestBeginBlock)(nil)
}
func (x fastReflection_RequestBeginBlock_messageType) New() protoreflect.Message {
	return new(fastReflection_RequestBeginBlock)
}
func (x fastReflection_RequestBeginBlock_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestBeginBlock
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RequestBeginBlock) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestBeginBlock
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RequestBeginBlock) Type() protoreflect.MessageType {
	return _fastReflection_RequestBeginBlock_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RequestBeginBlock) New() protoreflect.Message {
	return new(fastReflection_RequestBeginBlock)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RequestBeginBlock) Interface() protoreflect.ProtoMessage {
	return (*RequestBeginBlock)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RequestBeginBlock) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Hash) != 0 {
		value := protoreflect.ValueOfBytes(x.Hash)
		if !f(fd_RequestBeginBlock_hash, value) {
			return
		}
	}
	if x.Header != nil {
		value := protoreflect.ValueOfMessage(x.Header.ProtoReflect())
		if !f(fd_RequestBeginBlock_header, value) {
			return
		}
	}
	if x.LastCommitInfo != nil {
		value := protoreflect.ValueOfMessage(x.LastCommitInfo.ProtoReflect())
		if !f(fd_RequestBeginBlock_last_commit_info, value) {
			return
		}
	}
	if len(x.ByzantineValidators) != 0 {
		value := protoreflect.ValueOfList(&_RequestBeginBlock_4_list{list: &x.ByzantineValidators})
		if !f(fd_RequestBeginBlock_byzantine_validators, value) {
			return
		}
	}
	if x.Entropy != nil {
		value := protoreflect.ValueOfMessage(x.Entropy.ProtoReflect())
		if !f(fd_RequestBeginBlock_entropy, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RequestBeginBlock) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ostracon.abci.RequestBeginBlock.hash":
		return len(x.Hash) != 0
	case "ostracon.abci.RequestBeginBlock.header":
		return x.Header != nil
	case "ostracon.abci.RequestBeginBlock.last_commit_info":
		return x.LastCommitInfo != nil
	case "ostracon.abci.RequestBeginBlock.byzantine_validators":
		return len(x.ByzantineValidators) != 0
	case "ostracon.abci.RequestBeginBlock.entropy":
		return x.Entropy != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginBlock"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginBlock does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestBeginBlock) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ostracon.abci.RequestBeginBlock.hash":
		x.Hash = nil
	case "ostracon.abci.RequestBeginBlock.header":
		x.Header = nil
	case "ostracon.abci.RequestBeginBlock.last_commit_info":
		x.LastCommitInfo = nil
	case "ostracon.abci.RequestBeginBlock.byzantine_validators":
		x.ByzantineValidators = nil
	case "ostracon.abci.RequestBeginBlock.entropy":
		x.Entropy = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginBlock"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginBlock does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RequestBeginBlock) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ostracon.abci.RequestBeginBlock.hash":
		value := x.Hash
		return protoreflect.ValueOfBytes(value)
	case "ostracon.abci.RequestBeginBlock.header":
		value := x.Header
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.RequestBeginBlock.last_commit_info":
		value := x.LastCommitInfo
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.RequestBeginBlock.byzantine_validators":
		if len(x.ByzantineValidators) == 0 {
			return protoreflect.ValueOfList(&_RequestBeginBlock_4_list{})
		}
		listValue := &_RequestBeginBlock_4_list{list: &x.ByzantineValidators}
		return protoreflect.ValueOfList(listValue)
	case "ostracon.abci.RequestBeginBlock.entropy":
		value := x.Entropy
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginBlock"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginBlock does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestBeginBlock) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ostracon.abci.RequestBeginBlock.hash":
		x.Hash = value.Bytes()
	case "ostracon.abci.RequestBeginBlock.header":
		x.Header = value.Message().Interface().(*types.Header)
	case "ostracon.abci.RequestBeginBlock.last_commit_info":
		x.LastCommitInfo = value.Message().Interface().(*abci.LastCommitInfo)
	case "ostracon.abci.RequestBeginBlock.byzantine_validators":
		lv := value.List()
		clv := lv.(*_RequestBeginBlock_4_list)
		x.ByzantineValidators = *clv.list
	case "ostracon.abci.RequestBeginBlock.entropy":
		x.Entropy = value.Message().Interface().(*types1.Entropy)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginBlock"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginBlock does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestBeginBlock) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.RequestBeginBlock.header":
		if x.Header == nil {
			x.Header = new(types.Header)
		}
		return protoreflect.ValueOfMessage(x.Header.ProtoReflect())
	case "ostracon.abci.RequestBeginBlock.last_commit_info":
		if x.LastCommitInfo == nil {
			x.LastCommitInfo = new(abci.LastCommitInfo)
		}
		return protoreflect.ValueOfMessage(x.LastCommitInfo.ProtoReflect())
	case "ostracon.abci.RequestBeginBlock.byzantine_validators":
		if x.ByzantineValidators == nil {
			x.ByzantineValidators = []*abci.Evidence{}
		}
		value := &_RequestBeginBlock_4_list{list: &x.ByzantineValidators}
		return protoreflect.ValueOfList(value)
	case "ostracon.abci.RequestBeginBlock.entropy":
		if x.Entropy == nil {
			x.Entropy = new(types1.Entropy)
		}
		return protoreflect.ValueOfMessage(x.Entropy.ProtoReflect())
	case "ostracon.abci.RequestBeginBlock.hash":
		panic(fmt.Errorf("field hash of message ostracon.abci.RequestBeginBlock is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginBlock"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginBlock does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RequestBeginBlock) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.RequestBeginBlock.hash":
		return protoreflect.ValueOfBytes(nil)
	case "ostracon.abci.RequestBeginBlock.header":
		m := new(types.Header)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "ostracon.abci.RequestBeginBlock.last_commit_info":
		m := new(abci.LastCommitInfo)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "ostracon.abci.RequestBeginBlock.byzantine_validators":
		list := []*abci.Evidence{}
		return protoreflect.ValueOfList(&_RequestBeginBlock_4_list{list: &list})
	case "ostracon.abci.RequestBeginBlock.entropy":
		m := new(types1.Entropy)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginBlock"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginBlock does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RequestBeginBlock) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ostracon.abci.RequestBeginBlock", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RequestBeginBlock) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestBeginBlock) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RequestBeginBlock) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RequestBeginBlock) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RequestBeginBlock)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Hash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Header != nil {
			l = options.Size(x.Header)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastCommitInfo != nil {
			l = options.Size(x.LastCommitInfo)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.ByzantineValidators) > 0 {
			for _, e := range x.ByzantineValidators {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Entropy != nil {
			l = options.Size(x.Entropy)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RequestBeginBlock)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Entropy != nil {
			encoded, err := options.Marshal(x.Entropy)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xc2
		}
		if len(x.ByzantineValidators) > 0 {
			for iNdEx := len(x.ByzantineValidators) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ByzantineValidators[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if x.LastCommitInfo != nil {
			encoded, err := options.Marshal(x.LastCommitInfo)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Header != nil {
			encoded, err := options.Marshal(x.Header)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Hash) > 0 {
			i -= len(x.Hash)
			copy(dAtA[i:], x.Hash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Hash)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RequestBeginBlock)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestBeginBlock: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestBeginBlock: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Hash = append(x.Hash[:0], dAtA[iNdEx:postIndex]...)
				if x.Hash == nil {
					x.Hash = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Header == nil {
					x.Header = &types.Header{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Header); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastCommitInfo", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastCommitInfo == nil {
					x.LastCommitInfo = &abci.LastCommitInfo{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastCommitInfo); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ByzantineValidators", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ByzantineValidators = append(x.ByzantineValidators, &abci.Evidence{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ByzantineValidators[len(x.ByzantineValidators)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 1000:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Entropy", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Entropy == nil {
					x.Entropy = &types1.Entropy{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Entropy); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RequestBeginRecheckTx        protoreflect.MessageDescriptor
	fd_RequestBeginRecheckTx_header protoreflect.FieldDescriptor
)

func init() {
	file_ostracon_abci_types_proto_init()
	md_RequestBeginRecheckTx = File_ostracon_abci_types_proto.Messages().ByName("RequestBeginRecheckTx")
	fd_RequestBeginRecheckTx_header = md_RequestBeginRecheckTx.Fields().ByName("header")
}

var _ protoreflect.Message = (*fastReflection_RequestBeginRecheckTx)(nil)

type fastReflection_RequestBeginRecheckTx RequestBeginRecheckTx

func (x *RequestBeginRecheckTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RequestBeginRecheckTx)(x)
}

func (x *RequestBeginRecheckTx) slowProtoReflect() protoreflect.Message {
	mi := &file_ostracon_abci_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RequestBeginRecheckTx_messageType fastReflection_RequestBeginRecheckTx_messageType
var _ protoreflect.MessageType = fastReflection_RequestBeginRecheckTx_messageType{}

type fastReflection_RequestBeginRecheckTx_messageType struct{}

func (x fastReflection_RequestBeginRecheckTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RequestBeginRecheckTx)(nil)
}
func (x fastReflection_RequestBeginRecheckTx_messageType) New() protoreflect.Message {
	return new(fastReflection_RequestBeginRecheckTx)
}
func (x fastReflection_RequestBeginRecheckTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestBeginRecheckTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RequestBeginRecheckTx) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestBeginRecheckTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RequestBeginRecheckTx) Type() protoreflect.MessageType {
	return _fastReflection_RequestBeginRecheckTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RequestBeginRecheckTx) New() protoreflect.Message {
	return new(fastReflection_RequestBeginRecheckTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RequestBeginRecheckTx) Interface() protoreflect.ProtoMessage {
	return (*RequestBeginRecheckTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RequestBeginRecheckTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Header != nil {
		value := protoreflect.ValueOfMessage(x.Header.ProtoReflect())
		if !f(fd_RequestBeginRecheckTx_header, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RequestBeginRecheckTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ostracon.abci.RequestBeginRecheckTx.header":
		return x.Header != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestBeginRecheckTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ostracon.abci.RequestBeginRecheckTx.header":
		x.Header = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RequestBeginRecheckTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ostracon.abci.RequestBeginRecheckTx.header":
		value := x.Header
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginRecheckTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestBeginRecheckTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ostracon.abci.RequestBeginRecheckTx.header":
		x.Header = value.Message().Interface().(*types.Header)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestBeginRecheckTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.RequestBeginRecheckTx.header":
		if x.Header == nil {
			x.Header = new(types.Header)
		}
		return protoreflect.ValueOfMessage(x.Header.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginRecheckTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RequestBeginRecheckTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.RequestBeginRecheckTx.header":
		m := new(types.Header)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestBeginRecheckTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RequestBeginRecheckTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ostracon.abci.RequestBeginRecheckTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RequestBeginRecheckTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestBeginRecheckTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RequestBeginRecheckTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RequestBeginRecheckTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RequestBeginRecheckTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Header != nil {
			l = options.Size(x.Header)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RequestBeginRecheckTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Header != nil {
			encoded, err := options.Marshal(x.Header)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RequestBeginRecheckTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestBeginRecheckTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestBeginRecheckTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Header == nil {
					x.Header = &types.Header{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Header); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RequestEndRecheckTx        protoreflect.MessageDescriptor
	fd_RequestEndRecheckTx_height protoreflect.FieldDescriptor
)

func init() {
	file_ostracon_abci_types_proto_init()
	md_RequestEndRecheckTx = File_ostracon_abci_types_proto.Messages().ByName("RequestEndRecheckTx")
	fd_RequestEndRecheckTx_height = md_RequestEndRecheckTx.Fields().ByName("height")
}

var _ protoreflect.Message = (*fastReflection_RequestEndRecheckTx)(nil)

type fastReflection_RequestEndRecheckTx RequestEndRecheckTx

func (x *RequestEndRecheckTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RequestEndRecheckTx)(x)
}

func (x *RequestEndRecheckTx) slowProtoReflect() protoreflect.Message {
	mi := &file_ostracon_abci_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RequestEndRecheckTx_messageType fastReflection_RequestEndRecheckTx_messageType
var _ protoreflect.MessageType = fastReflection_RequestEndRecheckTx_messageType{}

type fastReflection_RequestEndRecheckTx_messageType struct{}

func (x fastReflection_RequestEndRecheckTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RequestEndRecheckTx)(nil)
}
func (x fastReflection_RequestEndRecheckTx_messageType) New() protoreflect.Message {
	return new(fastReflection_RequestEndRecheckTx)
}
func (x fastReflection_RequestEndRecheckTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestEndRecheckTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RequestEndRecheckTx) Descriptor() protoreflect.MessageDescriptor {
	return md_RequestEndRecheckTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RequestEndRecheckTx) Type() protoreflect.MessageType {
	return _fastReflection_RequestEndRecheckTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RequestEndRecheckTx) New() protoreflect.Message {
	return new(fastReflection_RequestEndRecheckTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RequestEndRecheckTx) Interface() protoreflect.ProtoMessage {
	return (*RequestEndRecheckTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RequestEndRecheckTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Height != int64(0) {
		value := protoreflect.ValueOfInt64(x.Height)
		if !f(fd_RequestEndRecheckTx_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RequestEndRecheckTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ostracon.abci.RequestEndRecheckTx.height":
		return x.Height != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestEndRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestEndRecheckTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ostracon.abci.RequestEndRecheckTx.height":
		x.Height = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestEndRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RequestEndRecheckTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ostracon.abci.RequestEndRecheckTx.height":
		value := x.Height
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestEndRecheckTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestEndRecheckTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ostracon.abci.RequestEndRecheckTx.height":
		x.Height = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestEndRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestEndRecheckTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.RequestEndRecheckTx.height":
		panic(fmt.Errorf("field height of message ostracon.abci.RequestEndRecheckTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestEndRecheckTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RequestEndRecheckTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.RequestEndRecheckTx.height":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.RequestEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.RequestEndRecheckTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RequestEndRecheckTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ostracon.abci.RequestEndRecheckTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RequestEndRecheckTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RequestEndRecheckTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RequestEndRecheckTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RequestEndRecheckTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RequestEndRecheckTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RequestEndRecheckTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RequestEndRecheckTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestEndRecheckTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RequestEndRecheckTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Response                      protoreflect.MessageDescriptor
	fd_Response_exception            protoreflect.FieldDescriptor
	fd_Response_echo                 protoreflect.FieldDescriptor
	fd_Response_flush                protoreflect.FieldDescriptor
	fd_Response_info                 protoreflect.FieldDescriptor
	fd_Response_set_option           protoreflect.FieldDescriptor
	fd_Response_init_chain           protoreflect.FieldDescriptor
	fd_Response_query                protoreflect.FieldDescriptor
	fd_Response_begin_block          protoreflect.FieldDescriptor
	fd_Response_check_tx             protoreflect.FieldDescriptor
	fd_Response_deliver_tx           protoreflect.FieldDescriptor
	fd_Response_end_block            protoreflect.FieldDescriptor
	fd_Response_commit               protoreflect.FieldDescriptor
	fd_Response_list_snapshots       protoreflect.FieldDescriptor
	fd_Response_offer_snapshot       protoreflect.FieldDescriptor
	fd_Response_load_snapshot_chunk  protoreflect.FieldDescriptor
	fd_Response_apply_snapshot_chunk protoreflect.FieldDescriptor
	fd_Response_begin_recheck_tx     protoreflect.FieldDescriptor
	fd_Response_end_recheck_tx       protoreflect.FieldDescriptor
)

func init() {
	file_ostracon_abci_types_proto_init()
	md_Response = File_ostracon_abci_types_proto.Messages().ByName("Response")
	fd_Response_exception = md_Response.Fields().ByName("exception")
	fd_Response_echo = md_Response.Fields().ByName("echo")
	fd_Response_flush = md_Response.Fields().ByName("flush")
	fd_Response_info = md_Response.Fields().ByName("info")
	fd_Response_set_option = md_Response.Fields().ByName("set_option")
	fd_Response_init_chain = md_Response.Fields().ByName("init_chain")
	fd_Response_query = md_Response.Fields().ByName("query")
	fd_Response_begin_block = md_Response.Fields().ByName("begin_block")
	fd_Response_check_tx = md_Response.Fields().ByName("check_tx")
	fd_Response_deliver_tx = md_Response.Fields().ByName("deliver_tx")
	fd_Response_end_block = md_Response.Fields().ByName("end_block")
	fd_Response_commit = md_Response.Fields().ByName("commit")
	fd_Response_list_snapshots = md_Response.Fields().ByName("list_snapshots")
	fd_Response_offer_snapshot = md_Response.Fields().ByName("offer_snapshot")
	fd_Response_load_snapshot_chunk = md_Response.Fields().ByName("load_snapshot_chunk")
	fd_Response_apply_snapshot_chunk = md_Response.Fields().ByName("apply_snapshot_chunk")
	fd_Response_begin_recheck_tx = md_Response.Fields().ByName("begin_recheck_tx")
	fd_Response_end_recheck_tx = md_Response.Fields().ByName("end_recheck_tx")
}

var _ protoreflect.Message = (*fastReflection_Response)(nil)

type fastReflection_Response Response

func (x *Response) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Response)(x)
}

func (x *Response) slowProtoReflect() protoreflect.Message {
	mi := &file_ostracon_abci_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Response_messageType fastReflection_Response_messageType
var _ protoreflect.MessageType = fastReflection_Response_messageType{}

type fastReflection_Response_messageType struct{}

func (x fastReflection_Response_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Response)(nil)
}
func (x fastReflection_Response_messageType) New() protoreflect.Message {
	return new(fastReflection_Response)
}
func (x fastReflection_Response_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Response
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Response) Descriptor() protoreflect.MessageDescriptor {
	return md_Response
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Response) Type() protoreflect.MessageType {
	return _fastReflection_Response_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Response) New() protoreflect.Message {
	return new(fastReflection_Response)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Response) Interface() protoreflect.ProtoMessage {
	return (*Response)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Response) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Value != nil {
		switch o := x.Value.(type) {
		case *Response_Exception:
			v := o.Exception
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_exception, value) {
				return
			}
		case *Response_Echo:
			v := o.Echo
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_echo, value) {
				return
			}
		case *Response_Flush:
			v := o.Flush
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_flush, value) {
				return
			}
		case *Response_Info:
			v := o.Info
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_info, value) {
				return
			}
		case *Response_SetOption:
			v := o.SetOption
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_set_option, value) {
				return
			}
		case *Response_InitChain:
			v := o.InitChain
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_init_chain, value) {
				return
			}
		case *Response_Query:
			v := o.Query
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_query, value) {
				return
			}
		case *Response_BeginBlock:
			v := o.BeginBlock
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_begin_block, value) {
				return
			}
		case *Response_CheckTx:
			v := o.CheckTx
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_check_tx, value) {
				return
			}
		case *Response_DeliverTx:
			v := o.DeliverTx
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_deliver_tx, value) {
				return
			}
		case *Response_EndBlock:
			v := o.EndBlock
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_end_block, value) {
				return
			}
		case *Response_Commit:
			v := o.Commit
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_commit, value) {
				return
			}
		case *Response_ListSnapshots:
			v := o.ListSnapshots
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_list_snapshots, value) {
				return
			}
		case *Response_OfferSnapshot:
			v := o.OfferSnapshot
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_offer_snapshot, value) {
				return
			}
		case *Response_LoadSnapshotChunk:
			v := o.LoadSnapshotChunk
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_load_snapshot_chunk, value) {
				return
			}
		case *Response_ApplySnapshotChunk:
			v := o.ApplySnapshotChunk
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_apply_snapshot_chunk, value) {
				return
			}
		case *Response_BeginRecheckTx:
			v := o.BeginRecheckTx
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_begin_recheck_tx, value) {
				return
			}
		case *Response_EndRecheckTx:
			v := o.EndRecheckTx
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Response_end_recheck_tx, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Response) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ostracon.abci.Response.exception":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_Exception); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.echo":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_Echo); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.flush":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_Flush); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.info":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_Info); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.set_option":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_SetOption); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.init_chain":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_InitChain); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.query":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_Query); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.begin_block":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_BeginBlock); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.check_tx":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_CheckTx); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.deliver_tx":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_DeliverTx); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.end_block":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_EndBlock); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.commit":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_Commit); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.list_snapshots":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_ListSnapshots); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.offer_snapshot":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_OfferSnapshot); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.load_snapshot_chunk":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_LoadSnapshotChunk); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.apply_snapshot_chunk":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_ApplySnapshotChunk); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.begin_recheck_tx":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_BeginRecheckTx); ok {
			return true
		} else {
			return false
		}
	case "ostracon.abci.Response.end_recheck_tx":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Response_EndRecheckTx); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Response"))
		}
		panic(fmt.Errorf("message ostracon.abci.Response does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Response) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ostracon.abci.Response.exception":
		x.Value = nil
	case "ostracon.abci.Response.echo":
		x.Value = nil
	case "ostracon.abci.Response.flush":
		x.Value = nil
	case "ostracon.abci.Response.info":
		x.Value = nil
	case "ostracon.abci.Response.set_option":
		x.Value = nil
	case "ostracon.abci.Response.init_chain":
		x.Value = nil
	case "ostracon.abci.Response.query":
		x.Value = nil
	case "ostracon.abci.Response.begin_block":
		x.Value = nil
	case "ostracon.abci.Response.check_tx":
		x.Value = nil
	case "ostracon.abci.Response.deliver_tx":
		x.Value = nil
	case "ostracon.abci.Response.end_block":
		x.Value = nil
	case "ostracon.abci.Response.commit":
		x.Value = nil
	case "ostracon.abci.Response.list_snapshots":
		x.Value = nil
	case "ostracon.abci.Response.offer_snapshot":
		x.Value = nil
	case "ostracon.abci.Response.load_snapshot_chunk":
		x.Value = nil
	case "ostracon.abci.Response.apply_snapshot_chunk":
		x.Value = nil
	case "ostracon.abci.Response.begin_recheck_tx":
		x.Value = nil
	case "ostracon.abci.Response.end_recheck_tx":
		x.Value = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Response"))
		}
		panic(fmt.Errorf("message ostracon.abci.Response does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Response) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ostracon.abci.Response.exception":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseException)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_Exception); ok {
			return protoreflect.ValueOfMessage(v.Exception.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseException)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.echo":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseEcho)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_Echo); ok {
			return protoreflect.ValueOfMessage(v.Echo.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseEcho)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.flush":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseFlush)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_Flush); ok {
			return protoreflect.ValueOfMessage(v.Flush.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseFlush)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.info":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseInfo)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_Info); ok {
			return protoreflect.ValueOfMessage(v.Info.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseInfo)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.set_option":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseSetOption)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_SetOption); ok {
			return protoreflect.ValueOfMessage(v.SetOption.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseSetOption)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.init_chain":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseInitChain)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_InitChain); ok {
			return protoreflect.ValueOfMessage(v.InitChain.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseInitChain)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.query":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseQuery)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_Query); ok {
			return protoreflect.ValueOfMessage(v.Query.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseQuery)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.begin_block":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseBeginBlock)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_BeginBlock); ok {
			return protoreflect.ValueOfMessage(v.BeginBlock.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseBeginBlock)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.check_tx":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*ResponseCheckTx)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_CheckTx); ok {
			return protoreflect.ValueOfMessage(v.CheckTx.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*ResponseCheckTx)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.deliver_tx":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseDeliverTx)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_DeliverTx); ok {
			return protoreflect.ValueOfMessage(v.DeliverTx.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseDeliverTx)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.end_block":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseEndBlock)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_EndBlock); ok {
			return protoreflect.ValueOfMessage(v.EndBlock.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseEndBlock)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.commit":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseCommit)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_Commit); ok {
			return protoreflect.ValueOfMessage(v.Commit.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseCommit)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.list_snapshots":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseListSnapshots)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_ListSnapshots); ok {
			return protoreflect.ValueOfMessage(v.ListSnapshots.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseListSnapshots)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.offer_snapshot":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseOfferSnapshot)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_OfferSnapshot); ok {
			return protoreflect.ValueOfMessage(v.OfferSnapshot.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseOfferSnapshot)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.load_snapshot_chunk":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseLoadSnapshotChunk)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_LoadSnapshotChunk); ok {
			return protoreflect.ValueOfMessage(v.LoadSnapshotChunk.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseLoadSnapshotChunk)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.apply_snapshot_chunk":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*abci.ResponseApplySnapshotChunk)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_ApplySnapshotChunk); ok {
			return protoreflect.ValueOfMessage(v.ApplySnapshotChunk.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*abci.ResponseApplySnapshotChunk)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.begin_recheck_tx":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*ResponseBeginRecheckTx)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_BeginRecheckTx); ok {
			return protoreflect.ValueOfMessage(v.BeginRecheckTx.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*ResponseBeginRecheckTx)(nil).ProtoReflect())
		}
	case "ostracon.abci.Response.end_recheck_tx":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*ResponseEndRecheckTx)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Response_EndRecheckTx); ok {
			return protoreflect.ValueOfMessage(v.EndRecheckTx.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*ResponseEndRecheckTx)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Response"))
		}
		panic(fmt.Errorf("message ostracon.abci.Response does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Response) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ostracon.abci.Response.exception":
		cv := value.Message().Interface().(*abci.ResponseException)
		x.Value = &Response_Exception{Exception: cv}
	case "ostracon.abci.Response.echo":
		cv := value.Message().Interface().(*abci.ResponseEcho)
		x.Value = &Response_Echo{Echo: cv}
	case "ostracon.abci.Response.flush":
		cv := value.Message().Interface().(*abci.ResponseFlush)
		x.Value = &Response_Flush{Flush: cv}
	case "ostracon.abci.Response.info":
		cv := value.Message().Interface().(*abci.ResponseInfo)
		x.Value = &Response_Info{Info: cv}
	case "ostracon.abci.Response.set_option":
		cv := value.Message().Interface().(*abci.ResponseSetOption)
		x.Value = &Response_SetOption{SetOption: cv}
	case "ostracon.abci.Response.init_chain":
		cv := value.Message().Interface().(*abci.ResponseInitChain)
		x.Value = &Response_InitChain{InitChain: cv}
	case "ostracon.abci.Response.query":
		cv := value.Message().Interface().(*abci.ResponseQuery)
		x.Value = &Response_Query{Query: cv}
	case "ostracon.abci.Response.begin_block":
		cv := value.Message().Interface().(*abci.ResponseBeginBlock)
		x.Value = &Response_BeginBlock{BeginBlock: cv}
	case "ostracon.abci.Response.check_tx":
		cv := value.Message().Interface().(*ResponseCheckTx)
		x.Value = &Response_CheckTx{CheckTx: cv}
	case "ostracon.abci.Response.deliver_tx":
		cv := value.Message().Interface().(*abci.ResponseDeliverTx)
		x.Value = &Response_DeliverTx{DeliverTx: cv}
	case "ostracon.abci.Response.end_block":
		cv := value.Message().Interface().(*abci.ResponseEndBlock)
		x.Value = &Response_EndBlock{EndBlock: cv}
	case "ostracon.abci.Response.commit":
		cv := value.Message().Interface().(*abci.ResponseCommit)
		x.Value = &Response_Commit{Commit: cv}
	case "ostracon.abci.Response.list_snapshots":
		cv := value.Message().Interface().(*abci.ResponseListSnapshots)
		x.Value = &Response_ListSnapshots{ListSnapshots: cv}
	case "ostracon.abci.Response.offer_snapshot":
		cv := value.Message().Interface().(*abci.ResponseOfferSnapshot)
		x.Value = &Response_OfferSnapshot{OfferSnapshot: cv}
	case "ostracon.abci.Response.load_snapshot_chunk":
		cv := value.Message().Interface().(*abci.ResponseLoadSnapshotChunk)
		x.Value = &Response_LoadSnapshotChunk{LoadSnapshotChunk: cv}
	case "ostracon.abci.Response.apply_snapshot_chunk":
		cv := value.Message().Interface().(*abci.ResponseApplySnapshotChunk)
		x.Value = &Response_ApplySnapshotChunk{ApplySnapshotChunk: cv}
	case "ostracon.abci.Response.begin_recheck_tx":
		cv := value.Message().Interface().(*ResponseBeginRecheckTx)
		x.Value = &Response_BeginRecheckTx{BeginRecheckTx: cv}
	case "ostracon.abci.Response.end_recheck_tx":
		cv := value.Message().Interface().(*ResponseEndRecheckTx)
		x.Value = &Response_EndRecheckTx{EndRecheckTx: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Response"))
		}
		panic(fmt.Errorf("message ostracon.abci.Response does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Response) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.Response.exception":
		if x.Value == nil {
			value := &abci.ResponseException{}
			oneofValue := &Response_Exception{Exception: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_Exception:
			return protoreflect.ValueOfMessage(m.Exception.ProtoReflect())
		default:
			value := &abci.ResponseException{}
			oneofValue := &Response_Exception{Exception: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.echo":
		if x.Value == nil {
			value := &abci.ResponseEcho{}
			oneofValue := &Response_Echo{Echo: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_Echo:
			return protoreflect.ValueOfMessage(m.Echo.ProtoReflect())
		default:
			value := &abci.ResponseEcho{}
			oneofValue := &Response_Echo{Echo: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.flush":
		if x.Value == nil {
			value := &abci.ResponseFlush{}
			oneofValue := &Response_Flush{Flush: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_Flush:
			return protoreflect.ValueOfMessage(m.Flush.ProtoReflect())
		default:
			value := &abci.ResponseFlush{}
			oneofValue := &Response_Flush{Flush: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.info":
		if x.Value == nil {
			value := &abci.ResponseInfo{}
			oneofValue := &Response_Info{Info: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_Info:
			return protoreflect.ValueOfMessage(m.Info.ProtoReflect())
		default:
			value := &abci.ResponseInfo{}
			oneofValue := &Response_Info{Info: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.set_option":
		if x.Value == nil {
			value := &abci.ResponseSetOption{}
			oneofValue := &Response_SetOption{SetOption: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_SetOption:
			return protoreflect.ValueOfMessage(m.SetOption.ProtoReflect())
		default:
			value := &abci.ResponseSetOption{}
			oneofValue := &Response_SetOption{SetOption: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.init_chain":
		if x.Value == nil {
			value := &abci.ResponseInitChain{}
			oneofValue := &Response_InitChain{InitChain: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_InitChain:
			return protoreflect.ValueOfMessage(m.InitChain.ProtoReflect())
		default:
			value := &abci.ResponseInitChain{}
			oneofValue := &Response_InitChain{InitChain: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.query":
		if x.Value == nil {
			value := &abci.ResponseQuery{}
			oneofValue := &Response_Query{Query: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_Query:
			return protoreflect.ValueOfMessage(m.Query.ProtoReflect())
		default:
			value := &abci.ResponseQuery{}
			oneofValue := &Response_Query{Query: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.begin_block":
		if x.Value == nil {
			value := &abci.ResponseBeginBlock{}
			oneofValue := &Response_BeginBlock{BeginBlock: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_BeginBlock:
			return protoreflect.ValueOfMessage(m.BeginBlock.ProtoReflect())
		default:
			value := &abci.ResponseBeginBlock{}
			oneofValue := &Response_BeginBlock{BeginBlock: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.check_tx":
		if x.Value == nil {
			value := &ResponseCheckTx{}
			oneofValue := &Response_CheckTx{CheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_CheckTx:
			return protoreflect.ValueOfMessage(m.CheckTx.ProtoReflect())
		default:
			value := &ResponseCheckTx{}
			oneofValue := &Response_CheckTx{CheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.deliver_tx":
		if x.Value == nil {
			value := &abci.ResponseDeliverTx{}
			oneofValue := &Response_DeliverTx{DeliverTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_DeliverTx:
			return protoreflect.ValueOfMessage(m.DeliverTx.ProtoReflect())
		default:
			value := &abci.ResponseDeliverTx{}
			oneofValue := &Response_DeliverTx{DeliverTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.end_block":
		if x.Value == nil {
			value := &abci.ResponseEndBlock{}
			oneofValue := &Response_EndBlock{EndBlock: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_EndBlock:
			return protoreflect.ValueOfMessage(m.EndBlock.ProtoReflect())
		default:
			value := &abci.ResponseEndBlock{}
			oneofValue := &Response_EndBlock{EndBlock: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.commit":
		if x.Value == nil {
			value := &abci.ResponseCommit{}
			oneofValue := &Response_Commit{Commit: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_Commit:
			return protoreflect.ValueOfMessage(m.Commit.ProtoReflect())
		default:
			value := &abci.ResponseCommit{}
			oneofValue := &Response_Commit{Commit: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.list_snapshots":
		if x.Value == nil {
			value := &abci.ResponseListSnapshots{}
			oneofValue := &Response_ListSnapshots{ListSnapshots: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_ListSnapshots:
			return protoreflect.ValueOfMessage(m.ListSnapshots.ProtoReflect())
		default:
			value := &abci.ResponseListSnapshots{}
			oneofValue := &Response_ListSnapshots{ListSnapshots: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.offer_snapshot":
		if x.Value == nil {
			value := &abci.ResponseOfferSnapshot{}
			oneofValue := &Response_OfferSnapshot{OfferSnapshot: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_OfferSnapshot:
			return protoreflect.ValueOfMessage(m.OfferSnapshot.ProtoReflect())
		default:
			value := &abci.ResponseOfferSnapshot{}
			oneofValue := &Response_OfferSnapshot{OfferSnapshot: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.load_snapshot_chunk":
		if x.Value == nil {
			value := &abci.ResponseLoadSnapshotChunk{}
			oneofValue := &Response_LoadSnapshotChunk{LoadSnapshotChunk: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_LoadSnapshotChunk:
			return protoreflect.ValueOfMessage(m.LoadSnapshotChunk.ProtoReflect())
		default:
			value := &abci.ResponseLoadSnapshotChunk{}
			oneofValue := &Response_LoadSnapshotChunk{LoadSnapshotChunk: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.apply_snapshot_chunk":
		if x.Value == nil {
			value := &abci.ResponseApplySnapshotChunk{}
			oneofValue := &Response_ApplySnapshotChunk{ApplySnapshotChunk: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_ApplySnapshotChunk:
			return protoreflect.ValueOfMessage(m.ApplySnapshotChunk.ProtoReflect())
		default:
			value := &abci.ResponseApplySnapshotChunk{}
			oneofValue := &Response_ApplySnapshotChunk{ApplySnapshotChunk: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.begin_recheck_tx":
		if x.Value == nil {
			value := &ResponseBeginRecheckTx{}
			oneofValue := &Response_BeginRecheckTx{BeginRecheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_BeginRecheckTx:
			return protoreflect.ValueOfMessage(m.BeginRecheckTx.ProtoReflect())
		default:
			value := &ResponseBeginRecheckTx{}
			oneofValue := &Response_BeginRecheckTx{BeginRecheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "ostracon.abci.Response.end_recheck_tx":
		if x.Value == nil {
			value := &ResponseEndRecheckTx{}
			oneofValue := &Response_EndRecheckTx{EndRecheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Response_EndRecheckTx:
			return protoreflect.ValueOfMessage(m.EndRecheckTx.ProtoReflect())
		default:
			value := &ResponseEndRecheckTx{}
			oneofValue := &Response_EndRecheckTx{EndRecheckTx: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Response"))
		}
		panic(fmt.Errorf("message ostracon.abci.Response does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Response) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.Response.exception":
		value := &abci.ResponseException{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.echo":
		value := &abci.ResponseEcho{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.flush":
		value := &abci.ResponseFlush{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.info":
		value := &abci.ResponseInfo{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.set_option":
		value := &abci.ResponseSetOption{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.init_chain":
		value := &abci.ResponseInitChain{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.query":
		value := &abci.ResponseQuery{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.begin_block":
		value := &abci.ResponseBeginBlock{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.check_tx":
		value := &ResponseCheckTx{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.deliver_tx":
		value := &abci.ResponseDeliverTx{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.end_block":
		value := &abci.ResponseEndBlock{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.commit":
		value := &abci.ResponseCommit{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.list_snapshots":
		value := &abci.ResponseListSnapshots{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.offer_snapshot":
		value := &abci.ResponseOfferSnapshot{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.load_snapshot_chunk":
		value := &abci.ResponseLoadSnapshotChunk{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.apply_snapshot_chunk":
		value := &abci.ResponseApplySnapshotChunk{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.begin_recheck_tx":
		value := &ResponseBeginRecheckTx{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ostracon.abci.Response.end_recheck_tx":
		value := &ResponseEndRecheckTx{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.Response"))
		}
		panic(fmt.Errorf("message ostracon.abci.Response does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Response) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "ostracon.abci.Response.value":
		if x.Value == nil {
			return nil
		}
		switch x.Value.(type) {
		case *Response_Exception:
			return x.Descriptor().Fields().ByName("exception")
		case *Response_Echo:
			return x.Descriptor().Fields().ByName("echo")
		case *Response_Flush:
			return x.Descriptor().Fields().ByName("flush")
		case *Response_Info:
			return x.Descriptor().Fields().ByName("info")
		case *Response_SetOption:
			return x.Descriptor().Fields().ByName("set_option")
		case *Response_InitChain:
			return x.Descriptor().Fields().ByName("init_chain")
		case *Response_Query:
			return x.Descriptor().Fields().ByName("query")
		case *Response_BeginBlock:
			return x.Descriptor().Fields().ByName("begin_block")
		case *Response_CheckTx:
			return x.Descriptor().Fields().ByName("check_tx")
		case *Response_DeliverTx:
			return x.Descriptor().Fields().ByName("deliver_tx")
		case *Response_EndBlock:
			return x.Descriptor().Fields().ByName("end_block")
		case *Response_Commit:
			return x.Descriptor().Fields().ByName("commit")
		case *Response_ListSnapshots:
			return x.Descriptor().Fields().ByName("list_snapshots")
		case *Response_OfferSnapshot:
			return x.Descriptor().Fields().ByName("offer_snapshot")
		case *Response_LoadSnapshotChunk:
			return x.Descriptor().Fields().ByName("load_snapshot_chunk")
		case *Response_ApplySnapshotChunk:
			return x.Descriptor().Fields().ByName("apply_snapshot_chunk")
		case *Response_BeginRecheckTx:
			return x.Descriptor().Fields().ByName("begin_recheck_tx")
		case *Response_EndRecheckTx:
			return x.Descriptor().Fields().ByName("end_recheck_tx")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in ostracon.abci.Response", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Response) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Response) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Response) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Response) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Response)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Value.(type) {
		case *Response_Exception:
			if x == nil {
				break
			}
			l = options.Size(x.Exception)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_Echo:
			if x == nil {
				break
			}
			l = options.Size(x.Echo)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_Flush:
			if x == nil {
				break
			}
			l = options.Size(x.Flush)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_Info:
			if x == nil {
				break
			}
			l = options.Size(x.Info)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_SetOption:
			if x == nil {
				break
			}
			l = options.Size(x.SetOption)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_InitChain:
			if x == nil {
				break
			}
			l = options.Size(x.InitChain)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_Query:
			if x == nil {
				break
			}
			l = options.Size(x.Query)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_BeginBlock:
			if x == nil {
				break
			}
			l = options.Size(x.BeginBlock)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_CheckTx:
			if x == nil {
				break
			}
			l = options.Size(x.CheckTx)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_DeliverTx:
			if x == nil {
				break
			}
			l = options.Size(x.DeliverTx)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_EndBlock:
			if x == nil {
				break
			}
			l = options.Size(x.EndBlock)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_Commit:
			if x == nil {
				break
			}
			l = options.Size(x.Commit)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_ListSnapshots:
			if x == nil {
				break
			}
			l = options.Size(x.ListSnapshots)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_OfferSnapshot:
			if x == nil {
				break
			}
			l = options.Size(x.OfferSnapshot)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_LoadSnapshotChunk:
			if x == nil {
				break
			}
			l = options.Size(x.LoadSnapshotChunk)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Response_ApplySnapshotChunk:
			if x == nil {
				break
			}
			l = options.Size(x.ApplySnapshotChunk)
			n += 2 + l + runtime.Sov(uint64(l))
		case *Response_BeginRecheckTx:
			if x == nil {
				break
			}
			l = options.Size(x.BeginRecheckTx)
			n += 2 + l + runtime.Sov(uint64(l))
		case *Response_EndRecheckTx:
			if x == nil {
				break
			}
			l = options.Size(x.EndRecheckTx)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Response)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Value.(type) {
		case *Response_Exception:
			encoded, err := options.Marshal(x.Exception)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		case *Response_Echo:
			encoded, err := options.Marshal(x.Echo)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		case *Response_Flush:
			encoded, err := options.Marshal(x.Flush)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		case *Response_Info:
			encoded, err := options.Marshal(x.Info)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		case *Response_SetOption:
			encoded, err := options.Marshal(x.SetOption)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		case *Response_InitChain:
			encoded, err := options.Marshal(x.InitChain)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		case *Response_Query:
			encoded, err := options.Marshal(x.Query)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		case *Response_BeginBlock:
			encoded, err := options.Marshal(x.BeginBlock)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		case *Response_CheckTx:
			encoded, err := options.Marshal(x.CheckTx)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		case *Response_DeliverTx:
			encoded, err := options.Marshal(x.DeliverTx)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		case *Response_EndBlock:
			encoded, err := options.Marshal(x.EndBlock)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		case *Response_Commit:
			encoded, err := options.Marshal(x.Commit)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		case *Response_ListSnapshots:
			encoded, err := options.Marshal(x.ListSnapshots)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x6a
		case *Response_OfferSnapshot:
			encoded, err := options.Marshal(x.OfferSnapshot)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x72
		case *Response_LoadSnapshotChunk:
			encoded, err := options.Marshal(x.LoadSnapshotChunk)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x7a
		case *Response_ApplySnapshotChunk:
			encoded, err := options.Marshal(x.ApplySnapshotChunk)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		case *Response_BeginRecheckTx:
			encoded, err := options.Marshal(x.BeginRecheckTx)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xc2
		case *Response_EndRecheckTx:
			encoded, err := options.Marshal(x.EndRecheckTx)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3e
			i--
			dAtA[i] = 0xca
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Response)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Response: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Exception", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseException{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_Exception{v}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Echo", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseEcho{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_Echo{v}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Flush", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseFlush{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_Flush{v}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseInfo{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_Info{v}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SetOption", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseSetOption{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_SetOption{v}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitChain", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseInitChain{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_InitChain{v}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseQuery{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_Query{v}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BeginBlock", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseBeginBlock{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_BeginBlock{v}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CheckTx", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &ResponseCheckTx{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_CheckTx{v}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DeliverTx", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseDeliverTx{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_DeliverTx{v}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseEndBlock{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_EndBlock{v}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseCommit{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_Commit{v}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ListSnapshots", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseListSnapshots{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_ListSnapshots{v}
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OfferSnapshot", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseOfferSnapshot{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_OfferSnapshot{v}
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LoadSnapshotChunk", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseLoadSnapshotChunk{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_LoadSnapshotChunk{v}
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ApplySnapshotChunk", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &abci.ResponseApplySnapshotChunk{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_ApplySnapshotChunk{v}
				iNdEx = postIndex
			case 1000:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BeginRecheckTx", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &ResponseBeginRecheckTx{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_BeginRecheckTx{v}
				iNdEx = postIndex
			case 1001:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndRecheckTx", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &ResponseEndRecheckTx{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Response_EndRecheckTx{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ResponseCheckTx_7_list)(nil)

type _ResponseCheckTx_7_list struct {
	list *[]*abci.Event
}

func (x *_ResponseCheckTx_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ResponseCheckTx_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ResponseCheckTx_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*abci.Event)
	(*x.list)[i] = concreteValue
}

func (x *_ResponseCheckTx_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*abci.Event)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ResponseCheckTx_7_list) AppendMutable() protoreflect.Value {
	v := new(abci.Event)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ResponseCheckTx_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ResponseCheckTx_7_list) NewElement() protoreflect.Value {
	v := new(abci.Event)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ResponseCheckTx_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ResponseCheckTx               protoreflect.MessageDescriptor
	fd_ResponseCheckTx_code          protoreflect.FieldDescriptor
	fd_ResponseCheckTx_data          protoreflect.FieldDescriptor
	fd_ResponseCheckTx_log           protoreflect.FieldDescriptor
	fd_ResponseCheckTx_info          protoreflect.FieldDescriptor
	fd_ResponseCheckTx_gas_wanted    protoreflect.FieldDescriptor
	fd_ResponseCheckTx_gas_used      protoreflect.FieldDescriptor
	fd_ResponseCheckTx_events        protoreflect.FieldDescriptor
	fd_ResponseCheckTx_codespace     protoreflect.FieldDescriptor
	fd_ResponseCheckTx_sender        protoreflect.FieldDescriptor
	fd_ResponseCheckTx_priority      protoreflect.FieldDescriptor
	fd_ResponseCheckTx_mempool_error protoreflect.FieldDescriptor
)

func init() {
	file_ostracon_abci_types_proto_init()
	md_ResponseCheckTx = File_ostracon_abci_types_proto.Messages().ByName("ResponseCheckTx")
	fd_ResponseCheckTx_code = md_ResponseCheckTx.Fields().ByName("code")
	fd_ResponseCheckTx_data = md_ResponseCheckTx.Fields().ByName("data")
	fd_ResponseCheckTx_log = md_ResponseCheckTx.Fields().ByName("log")
	fd_ResponseCheckTx_info = md_ResponseCheckTx.Fields().ByName("info")
	fd_ResponseCheckTx_gas_wanted = md_ResponseCheckTx.Fields().ByName("gas_wanted")
	fd_ResponseCheckTx_gas_used = md_ResponseCheckTx.Fields().ByName("gas_used")
	fd_ResponseCheckTx_events = md_ResponseCheckTx.Fields().ByName("events")
	fd_ResponseCheckTx_codespace = md_ResponseCheckTx.Fields().ByName("codespace")
	fd_ResponseCheckTx_sender = md_ResponseCheckTx.Fields().ByName("sender")
	fd_ResponseCheckTx_priority = md_ResponseCheckTx.Fields().ByName("priority")
	fd_ResponseCheckTx_mempool_error = md_ResponseCheckTx.Fields().ByName("mempool_error")
}

var _ protoreflect.Message = (*fastReflection_ResponseCheckTx)(nil)

type fastReflection_ResponseCheckTx ResponseCheckTx

func (x *ResponseCheckTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ResponseCheckTx)(x)
}

func (x *ResponseCheckTx) slowProtoReflect() protoreflect.Message {
	mi := &file_ostracon_abci_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ResponseCheckTx_messageType fastReflection_ResponseCheckTx_messageType
var _ protoreflect.MessageType = fastReflection_ResponseCheckTx_messageType{}

type fastReflection_ResponseCheckTx_messageType struct{}

func (x fastReflection_ResponseCheckTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ResponseCheckTx)(nil)
}
func (x fastReflection_ResponseCheckTx_messageType) New() protoreflect.Message {
	return new(fastReflection_ResponseCheckTx)
}
func (x fastReflection_ResponseCheckTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ResponseCheckTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ResponseCheckTx) Descriptor() protoreflect.MessageDescriptor {
	return md_ResponseCheckTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ResponseCheckTx) Type() protoreflect.MessageType {
	return _fastReflection_ResponseCheckTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ResponseCheckTx) New() protoreflect.Message {
	return new(fastReflection_ResponseCheckTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ResponseCheckTx) Interface() protoreflect.ProtoMessage {
	return (*ResponseCheckTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ResponseCheckTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Code != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Code)
		if !f(fd_ResponseCheckTx_code, value) {
			return
		}
	}
	if len(x.Data) != 0 {
		value := protoreflect.ValueOfBytes(x.Data)
		if !f(fd_ResponseCheckTx_data, value) {
			return
		}
	}
	if x.Log != "" {
		value := protoreflect.ValueOfString(x.Log)
		if !f(fd_ResponseCheckTx_log, value) {
			return
		}
	}
	if x.Info != "" {
		value := protoreflect.ValueOfString(x.Info)
		if !f(fd_ResponseCheckTx_info, value) {
			return
		}
	}
	if x.GasWanted != int64(0) {
		value := protoreflect.ValueOfInt64(x.GasWanted)
		if !f(fd_ResponseCheckTx_gas_wanted, value) {
			return
		}
	}
	if x.GasUsed != int64(0) {
		value := protoreflect.ValueOfInt64(x.GasUsed)
		if !f(fd_ResponseCheckTx_gas_used, value) {
			return
		}
	}
	if len(x.Events) != 0 {
		value := protoreflect.ValueOfList(&_ResponseCheckTx_7_list{list: &x.Events})
		if !f(fd_ResponseCheckTx_events, value) {
			return
		}
	}
	if x.Codespace != "" {
		value := protoreflect.ValueOfString(x.Codespace)
		if !f(fd_ResponseCheckTx_codespace, value) {
			return
		}
	}
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_ResponseCheckTx_sender, value) {
			return
		}
	}
	if x.Priority != int64(0) {
		value := protoreflect.ValueOfInt64(x.Priority)
		if !f(fd_ResponseCheckTx_priority, value) {
			return
		}
	}
	if x.MempoolError != "" {
		value := protoreflect.ValueOfString(x.MempoolError)
		if !f(fd_ResponseCheckTx_mempool_error, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ResponseCheckTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ostracon.abci.ResponseCheckTx.code":
		return x.Code != uint32(0)
	case "ostracon.abci.ResponseCheckTx.data":
		return len(x.Data) != 0
	case "ostracon.abci.ResponseCheckTx.log":
		return x.Log != ""
	case "ostracon.abci.ResponseCheckTx.info":
		return x.Info != ""
	case "ostracon.abci.ResponseCheckTx.gas_wanted":
		return x.GasWanted != int64(0)
	case "ostracon.abci.ResponseCheckTx.gas_used":
		return x.GasUsed != int64(0)
	case "ostracon.abci.ResponseCheckTx.events":
		return len(x.Events) != 0
	case "ostracon.abci.ResponseCheckTx.codespace":
		return x.Codespace != ""
	case "ostracon.abci.ResponseCheckTx.sender":
		return x.Sender != ""
	case "ostracon.abci.ResponseCheckTx.priority":
		return x.Priority != int64(0)
	case "ostracon.abci.ResponseCheckTx.mempool_error":
		return x.MempoolError != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseCheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseCheckTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseCheckTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ostracon.abci.ResponseCheckTx.code":
		x.Code = uint32(0)
	case "ostracon.abci.ResponseCheckTx.data":
		x.Data = nil
	case "ostracon.abci.ResponseCheckTx.log":
		x.Log = ""
	case "ostracon.abci.ResponseCheckTx.info":
		x.Info = ""
	case "ostracon.abci.ResponseCheckTx.gas_wanted":
		x.GasWanted = int64(0)
	case "ostracon.abci.ResponseCheckTx.gas_used":
		x.GasUsed = int64(0)
	case "ostracon.abci.ResponseCheckTx.events":
		x.Events = nil
	case "ostracon.abci.ResponseCheckTx.codespace":
		x.Codespace = ""
	case "ostracon.abci.ResponseCheckTx.sender":
		x.Sender = ""
	case "ostracon.abci.ResponseCheckTx.priority":
		x.Priority = int64(0)
	case "ostracon.abci.ResponseCheckTx.mempool_error":
		x.MempoolError = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseCheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseCheckTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ResponseCheckTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ostracon.abci.ResponseCheckTx.code":
		value := x.Code
		return protoreflect.ValueOfUint32(value)
	case "ostracon.abci.ResponseCheckTx.data":
		value := x.Data
		return protoreflect.ValueOfBytes(value)
	case "ostracon.abci.ResponseCheckTx.log":
		value := x.Log
		return protoreflect.ValueOfString(value)
	case "ostracon.abci.ResponseCheckTx.info":
		value := x.Info
		return protoreflect.ValueOfString(value)
	case "ostracon.abci.ResponseCheckTx.gas_wanted":
		value := x.GasWanted
		return protoreflect.ValueOfInt64(value)
	case "ostracon.abci.ResponseCheckTx.gas_used":
		value := x.GasUsed
		return protoreflect.ValueOfInt64(value)
	case "ostracon.abci.ResponseCheckTx.events":
		if len(x.Events) == 0 {
			return protoreflect.ValueOfList(&_ResponseCheckTx_7_list{})
		}
		listValue := &_ResponseCheckTx_7_list{list: &x.Events}
		return protoreflect.ValueOfList(listValue)
	case "ostracon.abci.ResponseCheckTx.codespace":
		value := x.Codespace
		return protoreflect.ValueOfString(value)
	case "ostracon.abci.ResponseCheckTx.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "ostracon.abci.ResponseCheckTx.priority":
		value := x.Priority
		return protoreflect.ValueOfInt64(value)
	case "ostracon.abci.ResponseCheckTx.mempool_error":
		value := x.MempoolError
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseCheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseCheckTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseCheckTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ostracon.abci.ResponseCheckTx.code":
		x.Code = uint32(value.Uint())
	case "ostracon.abci.ResponseCheckTx.data":
		x.Data = value.Bytes()
	case "ostracon.abci.ResponseCheckTx.log":
		x.Log = value.Interface().(string)
	case "ostracon.abci.ResponseCheckTx.info":
		x.Info = value.Interface().(string)
	case "ostracon.abci.ResponseCheckTx.gas_wanted":
		x.GasWanted = value.Int()
	case "ostracon.abci.ResponseCheckTx.gas_used":
		x.GasUsed = value.Int()
	case "ostracon.abci.ResponseCheckTx.events":
		lv := value.List()
		clv := lv.(*_ResponseCheckTx_7_list)
		x.Events = *clv.list
	case "ostracon.abci.ResponseCheckTx.codespace":
		x.Codespace = value.Interface().(string)
	case "ostracon.abci.ResponseCheckTx.sender":
		x.Sender = value.Interface().(string)
	case "ostracon.abci.ResponseCheckTx.priority":
		x.Priority = value.Int()
	case "ostracon.abci.ResponseCheckTx.mempool_error":
		x.MempoolError = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseCheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseCheckTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseCheckTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.ResponseCheckTx.events":
		if x.Events == nil {
			x.Events = []*abci.Event{}
		}
		value := &_ResponseCheckTx_7_list{list: &x.Events}
		return protoreflect.ValueOfList(value)
	case "ostracon.abci.ResponseCheckTx.code":
		panic(fmt.Errorf("field code of message ostracon.abci.ResponseCheckTx is not mutable"))
	case "ostracon.abci.ResponseCheckTx.data":
		panic(fmt.Errorf("field data of message ostracon.abci.ResponseCheckTx is not mutable"))
	case "ostracon.abci.ResponseCheckTx.log":
		panic(fmt.Errorf("field log of message ostracon.abci.ResponseCheckTx is not mutable"))
	case "ostracon.abci.ResponseCheckTx.info":
		panic(fmt.Errorf("field info of message ostracon.abci.ResponseCheckTx is not mutable"))
	case "ostracon.abci.ResponseCheckTx.gas_wanted":
		panic(fmt.Errorf("field gas_wanted of message ostracon.abci.ResponseCheckTx is not mutable"))
	case "ostracon.abci.ResponseCheckTx.gas_used":
		panic(fmt.Errorf("field gas_used of message ostracon.abci.ResponseCheckTx is not mutable"))
	case "ostracon.abci.ResponseCheckTx.codespace":
		panic(fmt.Errorf("field codespace of message ostracon.abci.ResponseCheckTx is not mutable"))
	case "ostracon.abci.ResponseCheckTx.sender":
		panic(fmt.Errorf("field sender of message ostracon.abci.ResponseCheckTx is not mutable"))
	case "ostracon.abci.ResponseCheckTx.priority":
		panic(fmt.Errorf("field priority of message ostracon.abci.ResponseCheckTx is not mutable"))
	case "ostracon.abci.ResponseCheckTx.mempool_error":
		panic(fmt.Errorf("field mempool_error of message ostracon.abci.ResponseCheckTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseCheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseCheckTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ResponseCheckTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.ResponseCheckTx.code":
		return protoreflect.ValueOfUint32(uint32(0))
	case "ostracon.abci.ResponseCheckTx.data":
		return protoreflect.ValueOfBytes(nil)
	case "ostracon.abci.ResponseCheckTx.log":
		return protoreflect.ValueOfString("")
	case "ostracon.abci.ResponseCheckTx.info":
		return protoreflect.ValueOfString("")
	case "ostracon.abci.ResponseCheckTx.gas_wanted":
		return protoreflect.ValueOfInt64(int64(0))
	case "ostracon.abci.ResponseCheckTx.gas_used":
		return protoreflect.ValueOfInt64(int64(0))
	case "ostracon.abci.ResponseCheckTx.events":
		list := []*abci.Event{}
		return protoreflect.ValueOfList(&_ResponseCheckTx_7_list{list: &list})
	case "ostracon.abci.ResponseCheckTx.codespace":
		return protoreflect.ValueOfString("")
	case "ostracon.abci.ResponseCheckTx.sender":
		return protoreflect.ValueOfString("")
	case "ostracon.abci.ResponseCheckTx.priority":
		return protoreflect.ValueOfInt64(int64(0))
	case "ostracon.abci.ResponseCheckTx.mempool_error":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseCheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseCheckTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ResponseCheckTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ostracon.abci.ResponseCheckTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ResponseCheckTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseCheckTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ResponseCheckTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ResponseCheckTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ResponseCheckTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Code != 0 {
			n += 1 + runtime.Sov(uint64(x.Code))
		}
		l = len(x.Data)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Log)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Info)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.GasWanted != 0 {
			n += 1 + runtime.Sov(uint64(x.GasWanted))
		}
		if x.GasUsed != 0 {
			n += 1 + runtime.Sov(uint64(x.GasUsed))
		}
		if len(x.Events) > 0 {
			for _, e := range x.Events {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.Codespace)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Priority != 0 {
			n += 1 + runtime.Sov(uint64(x.Priority))
		}
		l = len(x.MempoolError)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ResponseCheckTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MempoolError) > 0 {
			i -= len(x.MempoolError)
			copy(dAtA[i:], x.MempoolError)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MempoolError)))
			i--
			dAtA[i] = 0x5a
		}
		if x.Priority != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Priority))
			i--
			dAtA[i] = 0x50
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.Codespace) > 0 {
			i -= len(x.Codespace)
			copy(dAtA[i:], x.Codespace)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Codespace)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Events) > 0 {
			for iNdEx := len(x.Events) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Events[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.GasUsed != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GasUsed))
			i--
			dAtA[i] = 0x30
		}
		if x.GasWanted != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GasWanted))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Info) > 0 {
			i -= len(x.Info)
			copy(dAtA[i:], x.Info)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Info)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Log) > 0 {
			i -= len(x.Log)
			copy(dAtA[i:], x.Log)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Log)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Data) > 0 {
			i -= len(x.Data)
			copy(dAtA[i:], x.Data)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Data)))
			i--
			dAtA[i] = 0x12
		}
		if x.Code != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Code))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ResponseCheckTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ResponseCheckTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ResponseCheckTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
				}
				x.Code = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Code |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Data = append(x.Data[:0], dAtA[iNdEx:postIndex]...)
				if x.Data == nil {
					x.Data = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Log = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Info = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasWanted", wireType)
				}
				x.GasWanted = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GasWanted |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
				}
				x.GasUsed = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GasUsed |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Events = append(x.Events, &abci.Event{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Events[len(x.Events)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Codespace", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Codespace = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
				}
				x.Priority = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Priority |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MempoolError", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MempoolError = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ResponseBeginRecheckTx      protoreflect.MessageDescriptor
	fd_ResponseBeginRecheckTx_code protoreflect.FieldDescriptor
)

func init() {
	file_ostracon_abci_types_proto_init()
	md_ResponseBeginRecheckTx = File_ostracon_abci_types_proto.Messages().ByName("ResponseBeginRecheckTx")
	fd_ResponseBeginRecheckTx_code = md_ResponseBeginRecheckTx.Fields().ByName("code")
}

var _ protoreflect.Message = (*fastReflection_ResponseBeginRecheckTx)(nil)

type fastReflection_ResponseBeginRecheckTx ResponseBeginRecheckTx

func (x *ResponseBeginRecheckTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ResponseBeginRecheckTx)(x)
}

func (x *ResponseBeginRecheckTx) slowProtoReflect() protoreflect.Message {
	mi := &file_ostracon_abci_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ResponseBeginRecheckTx_messageType fastReflection_ResponseBeginRecheckTx_messageType
var _ protoreflect.MessageType = fastReflection_ResponseBeginRecheckTx_messageType{}

type fastReflection_ResponseBeginRecheckTx_messageType struct{}

func (x fastReflection_ResponseBeginRecheckTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ResponseBeginRecheckTx)(nil)
}
func (x fastReflection_ResponseBeginRecheckTx_messageType) New() protoreflect.Message {
	return new(fastReflection_ResponseBeginRecheckTx)
}
func (x fastReflection_ResponseBeginRecheckTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ResponseBeginRecheckTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ResponseBeginRecheckTx) Descriptor() protoreflect.MessageDescriptor {
	return md_ResponseBeginRecheckTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ResponseBeginRecheckTx) Type() protoreflect.MessageType {
	return _fastReflection_ResponseBeginRecheckTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ResponseBeginRecheckTx) New() protoreflect.Message {
	return new(fastReflection_ResponseBeginRecheckTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ResponseBeginRecheckTx) Interface() protoreflect.ProtoMessage {
	return (*ResponseBeginRecheckTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ResponseBeginRecheckTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Code != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Code)
		if !f(fd_ResponseBeginRecheckTx_code, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ResponseBeginRecheckTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ostracon.abci.ResponseBeginRecheckTx.code":
		return x.Code != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseBeginRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseBeginRecheckTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ostracon.abci.ResponseBeginRecheckTx.code":
		x.Code = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseBeginRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ResponseBeginRecheckTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ostracon.abci.ResponseBeginRecheckTx.code":
		value := x.Code
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseBeginRecheckTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseBeginRecheckTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ostracon.abci.ResponseBeginRecheckTx.code":
		x.Code = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseBeginRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseBeginRecheckTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.ResponseBeginRecheckTx.code":
		panic(fmt.Errorf("field code of message ostracon.abci.ResponseBeginRecheckTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseBeginRecheckTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ResponseBeginRecheckTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.ResponseBeginRecheckTx.code":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseBeginRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseBeginRecheckTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ResponseBeginRecheckTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ostracon.abci.ResponseBeginRecheckTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ResponseBeginRecheckTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseBeginRecheckTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ResponseBeginRecheckTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ResponseBeginRecheckTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ResponseBeginRecheckTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Code != 0 {
			n += 1 + runtime.Sov(uint64(x.Code))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ResponseBeginRecheckTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Code != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Code))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ResponseBeginRecheckTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ResponseBeginRecheckTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ResponseBeginRecheckTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
				}
				x.Code = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Code |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ResponseEndRecheckTx      protoreflect.MessageDescriptor
	fd_ResponseEndRecheckTx_code protoreflect.FieldDescriptor
)

func init() {
	file_ostracon_abci_types_proto_init()
	md_ResponseEndRecheckTx = File_ostracon_abci_types_proto.Messages().ByName("ResponseEndRecheckTx")
	fd_ResponseEndRecheckTx_code = md_ResponseEndRecheckTx.Fields().ByName("code")
}

var _ protoreflect.Message = (*fastReflection_ResponseEndRecheckTx)(nil)

type fastReflection_ResponseEndRecheckTx ResponseEndRecheckTx

func (x *ResponseEndRecheckTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ResponseEndRecheckTx)(x)
}

func (x *ResponseEndRecheckTx) slowProtoReflect() protoreflect.Message {
	mi := &file_ostracon_abci_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ResponseEndRecheckTx_messageType fastReflection_ResponseEndRecheckTx_messageType
var _ protoreflect.MessageType = fastReflection_ResponseEndRecheckTx_messageType{}

type fastReflection_ResponseEndRecheckTx_messageType struct{}

func (x fastReflection_ResponseEndRecheckTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ResponseEndRecheckTx)(nil)
}
func (x fastReflection_ResponseEndRecheckTx_messageType) New() protoreflect.Message {
	return new(fastReflection_ResponseEndRecheckTx)
}
func (x fastReflection_ResponseEndRecheckTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ResponseEndRecheckTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ResponseEndRecheckTx) Descriptor() protoreflect.MessageDescriptor {
	return md_ResponseEndRecheckTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ResponseEndRecheckTx) Type() protoreflect.MessageType {
	return _fastReflection_ResponseEndRecheckTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ResponseEndRecheckTx) New() protoreflect.Message {
	return new(fastReflection_ResponseEndRecheckTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ResponseEndRecheckTx) Interface() protoreflect.ProtoMessage {
	return (*ResponseEndRecheckTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ResponseEndRecheckTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Code != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Code)
		if !f(fd_ResponseEndRecheckTx_code, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ResponseEndRecheckTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ostracon.abci.ResponseEndRecheckTx.code":
		return x.Code != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseEndRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseEndRecheckTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ostracon.abci.ResponseEndRecheckTx.code":
		x.Code = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseEndRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ResponseEndRecheckTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ostracon.abci.ResponseEndRecheckTx.code":
		value := x.Code
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseEndRecheckTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseEndRecheckTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ostracon.abci.ResponseEndRecheckTx.code":
		x.Code = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseEndRecheckTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseEndRecheckTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.ResponseEndRecheckTx.code":
		panic(fmt.Errorf("field code of message ostracon.abci.ResponseEndRecheckTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseEndRecheckTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ResponseEndRecheckTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ostracon.abci.ResponseEndRecheckTx.code":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ostracon.abci.ResponseEndRecheckTx"))
		}
		panic(fmt.Errorf("message ostracon.abci.ResponseEndRecheckTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ResponseEndRecheckTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ostracon.abci.ResponseEndRecheckTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ResponseEndRecheckTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ResponseEndRecheckTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ResponseEndRecheckTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ResponseEndRecheckTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ResponseEndRecheckTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Code != 0 {
			n += 1 + runtime.Sov(uint64(x.Code))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ResponseEndRecheckTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Code != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Code))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ResponseEndRecheckTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ResponseEndRecheckTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ResponseEndRecheckTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
				}
				x.Code = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Code |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: ostracon/abci/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Request_Echo
	//	*Request_Flush
	//	*Request_Info
	//	*Request_SetOption
	//	*Request_InitChain
	//	*Request_Query
	//	*Request_BeginBlock
	//	*Request_CheckTx
	//	*Request_DeliverTx
	//	*Request_EndBlock
	//	*Request_Commit
	//	*Request_ListSnapshots
	//	*Request_OfferSnapshot
	//	*Request_LoadSnapshotChunk
	//	*Request_ApplySnapshotChunk
	//	*Request_BeginRecheckTx
	//	*Request_EndRecheckTx
	Value isRequest_Value `protobuf_oneof:"value"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ostracon_abci_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_ostracon_abci_types_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetValue() isRequest_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Request) GetEcho() *abci.RequestEcho {
	if x, ok := x.GetValue().(*Request_Echo); ok {
		return x.Echo
	}
	return nil
}

func (x *Request) GetFlush() *abci.RequestFlush {
	if x, ok := x.GetValue().(*Request_Flush); ok {
		return x.Flush
	}
	return nil
}

func (x *Request) GetInfo() *abci.RequestInfo {
	if x, ok := x.GetValue().(*Request_Info); ok {
		return x.Info
	}
	return nil
}

func (x *Request) GetSetOption() *abci.RequestSetOption {
	if x, ok := x.GetValue().(*Request_SetOption); ok {
		return x.SetOption
	}
	return nil
}

func (x *Request) GetInitChain() *abci.RequestInitChain {
	if x, ok := x.GetValue().(*Request_InitChain); ok {
		return x.InitChain
	}
	return nil
}

func (x *Request) GetQuery() *abci.RequestQuery {
	if x, ok := x.GetValue().(*Request_Query); ok {
		return x.Query
	}
	return nil
}

func (x *Request) GetBeginBlock() *RequestBeginBlock {
	if x, ok := x.GetValue().(*Request_BeginBlock); ok {
		return x.BeginBlock
	}
	return nil
}

func (x *Request) GetCheckTx() *abci.RequestCheckTx {
	if x, ok := x.GetValue().(*Request_CheckTx); ok {
		return x.CheckTx
	}
	return nil
}

func (x *Request) GetDeliverTx() *abci.RequestDeliverTx {
	if x, ok := x.GetValue().(*Request_DeliverTx); ok {
		return x.DeliverTx
	}
	return nil
}

func (x *Request) GetEndBlock() *abci.RequestEndBlock {
	if x, ok := x.GetValue().(*Request_EndBlock); ok {
		return x.EndBlock
	}
	return nil
}

func (x *Request) GetCommit() *abci.RequestCommit {
	if x, ok := x.GetValue().(*Request_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *Request) GetListSnapshots() *abci.RequestListSnapshots {
	if x, ok := x.GetValue().(*Request_ListSnapshots); ok {
		return x.ListSnapshots
	}
	return nil
}

func (x *Request) GetOfferSnapshot() *abci.RequestOfferSnapshot {
	if x, ok := x.GetValue().(*Request_OfferSnapshot); ok {
		return x.OfferSnapshot
	}
	return nil
}

func (x *Request) GetLoadSnapshotChunk() *abci.RequestLoadSnapshotChunk {
	if x, ok := x.GetValue().(*Request_LoadSnapshotChunk); ok {
		return x.LoadSnapshotChunk
	}
	return nil
}

func (x *Request) GetApplySnapshotChunk() *abci.RequestApplySnapshotChunk {
	if x, ok := x.GetValue().(*Request_ApplySnapshotChunk); ok {
		return x.ApplySnapshotChunk
	}
	return nil
}

func (x *Request) GetBeginRecheckTx() *RequestBeginRecheckTx {
	if x, ok := x.GetValue().(*Request_BeginRecheckTx); ok {
		return x.BeginRecheckTx
	}
	return nil
}

func (x *Request) GetEndRecheckTx() *RequestEndRecheckTx {
	if x, ok := x.GetValue().(*Request_EndRecheckTx); ok {
		return x.EndRecheckTx
	}
	return nil
}

type isRequest_Value interface {
	isRequest_Value()
}

type Request_Echo struct {
	Echo *abci.RequestEcho `protobuf:"bytes,1,opt,name=echo,proto3,oneof"`
}

type Request_Flush struct {
	Flush *abci.RequestFlush `protobuf:"bytes,2,opt,name=flush,proto3,oneof"`
}

type Request_Info struct {
	Info *abci.RequestInfo `protobuf:"bytes,3,opt,name=info,proto3,oneof"`
}

type Request_SetOption struct {
	SetOption *abci.RequestSetOption `protobuf:"bytes,4,opt,name=set_option,json=setOption,proto3,oneof"`
}

type Request_InitChain struct {
	InitChain *abci.RequestInitChain `protobuf:"bytes,5,opt,name=init_chain,json=initChain,proto3,oneof"`
}

type Request_Query struct {
	Query *abci.RequestQuery `protobuf:"bytes,6,opt,name=query,proto3,oneof"`
}

type Request_BeginBlock struct {
	BeginBlock *RequestBeginBlock `protobuf:"bytes,7,opt,name=begin_block,json=beginBlock,proto3,oneof"`
}

type Request_CheckTx struct {
	CheckTx *abci.RequestCheckTx `protobuf:"bytes,8,opt,name=check_tx,json=checkTx,proto3,oneof"`
}

type Request_DeliverTx struct {
	DeliverTx *abci.RequestDeliverTx `protobuf:"bytes,9,opt,name=deliver_tx,json=deliverTx,proto3,oneof"`
}

type Request_EndBlock struct {
	EndBlock *abci.RequestEndBlock `protobuf:"bytes,10,opt,name=end_block,json=endBlock,proto3,oneof"`
}

type Request_Commit struct {
	Commit *abci.RequestCommit `protobuf:"bytes,11,opt,name=commit,proto3,oneof"`
}

type Request_ListSnapshots struct {
	ListSnapshots *abci.RequestListSnapshots `protobuf:"bytes,12,opt,name=list_snapshots,json=listSnapshots,proto3,oneof"`
}

type Request_OfferSnapshot struct {
	OfferSnapshot *abci.RequestOfferSnapshot `protobuf:"bytes,13,opt,name=offer_snapshot,json=offerSnapshot,proto3,oneof"`
}

type Request_LoadSnapshotChunk struct {
	LoadSnapshotChunk *abci.RequestLoadSnapshotChunk `protobuf:"bytes,14,opt,name=load_snapshot_chunk,json=loadSnapshotChunk,proto3,oneof"`
}

type Request_ApplySnapshotChunk struct {
	ApplySnapshotChunk *abci.RequestApplySnapshotChunk `protobuf:"bytes,15,opt,name=apply_snapshot_chunk,json=applySnapshotChunk,proto3,oneof"`
}

type Request_BeginRecheckTx struct {
	BeginRecheckTx *RequestBeginRecheckTx `protobuf:"bytes,1000,opt,name=begin_recheck_tx,json=beginRecheckTx,proto3,oneof"` // 16~99 are reserved for merging original tendermint
}

type Request_EndRecheckTx struct {
	EndRecheckTx *RequestEndRecheckTx `protobuf:"bytes,1001,opt,name=end_recheck_tx,json=endRecheckTx,proto3,oneof"`
}

func (*Request_Echo) isRequest_Value() {}

func (*Request_Flush) isRequest_Value() {}

func (*Request_Info) isRequest_Value() {}

func (*Request_SetOption) isRequest_Value() {}

func (*Request_InitChain) isRequest_Value() {}

func (*Request_Query) isRequest_Value() {}

func (*Request_BeginBlock) isRequest_Value() {}

func (*Request_CheckTx) isRequest_Value() {}

func (*Request_DeliverTx) isRequest_Value() {}

func (*Request_EndBlock) isRequest_Value() {}

func (*Request_Commit) isRequest_Value() {}

func (*Request_ListSnapshots) isRequest_Value() {}

func (*Request_OfferSnapshot) isRequest_Value() {}

func (*Request_LoadSnapshotChunk) isRequest_Value() {}

func (*Request_ApplySnapshotChunk) isRequest_Value() {}

func (*Request_BeginRecheckTx) isRequest_Value() {}

func (*Request_EndRecheckTx) isRequest_Value() {}

type RequestBeginBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash                []byte               `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Header              *types.Header        `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	LastCommitInfo      *abci.LastCommitInfo `protobuf:"bytes,3,opt,name=last_commit_info,json=lastCommitInfo,proto3" json:"last_commit_info,omitempty"`
	ByzantineValidators []*abci.Evidence     `protobuf:"bytes,4,rep,name=byzantine_validators,json=byzantineValidators,proto3" json:"byzantine_validators,omitempty"`
	// *** Ostracon Extended Fields ***
	Entropy *types1.Entropy `protobuf:"bytes,1000,opt,name=entropy,proto3" json:"entropy,omitempty"`
}

func (x *RequestBeginBlock) Reset() {
	*x = RequestBeginBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ostracon_abci_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBeginBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBeginBlock) ProtoMessage() {}

// Deprecated: Use RequestBeginBlock.ProtoReflect.Descriptor instead.
func (*RequestBeginBlock) Descriptor() ([]byte, []int) {
	return file_ostracon_abci_types_proto_rawDescGZIP(), []int{1}
}

func (x *RequestBeginBlock) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *RequestBeginBlock) GetHeader() *types.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RequestBeginBlock) GetLastCommitInfo() *abci.LastCommitInfo {
	if x != nil {
		return x.LastCommitInfo
	}
	return nil
}

func (x *RequestBeginBlock) GetByzantineValidators() []*abci.Evidence {
	if x != nil {
		return x.ByzantineValidators
	}
	return nil
}

func (x *RequestBeginBlock) GetEntropy() *types1.Entropy {
	if x != nil {
		return x.Entropy
	}
	return nil
}

type RequestBeginRecheckTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *types.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *RequestBeginRecheckTx) Reset() {
	*x = RequestBeginRecheckTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ostracon_abci_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestBeginRecheckTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBeginRecheckTx) ProtoMessage() {}

// Deprecated: Use RequestBeginRecheckTx.ProtoReflect.Descriptor instead.
func (*RequestBeginRecheckTx) Descriptor() ([]byte, []int) {
	return file_ostracon_abci_types_proto_rawDescGZIP(), []int{2}
}

func (x *RequestBeginRecheckTx) GetHeader() *types.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type RequestEndRecheckTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *RequestEndRecheckTx) Reset() {
	*x = RequestEndRecheckTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ostracon_abci_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestEndRecheckTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestEndRecheckTx) ProtoMessage() {}

// Deprecated: Use RequestEndRecheckTx.ProtoReflect.Descriptor instead.
func (*RequestEndRecheckTx) Descriptor() ([]byte, []int) {
	return file_ostracon_abci_types_proto_rawDescGZIP(), []int{3}
}

func (x *RequestEndRecheckTx) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Response_Exception
	//	*Response_Echo
	//	*Response_Flush
	//	*Response_Info
	//	*Response_SetOption
	//	*Response_InitChain
	//	*Response_Query
	//	*Response_BeginBlock
	//	*Response_CheckTx
	//	*Response_DeliverTx
	//	*Response_EndBlock
	//	*Response_Commit
	//	*Response_ListSnapshots
	//	*Response_OfferSnapshot
	//	*Response_LoadSnapshotChunk
	//	*Response_ApplySnapshotChunk
	//	*Response_BeginRecheckTx
	//	*Response_EndRecheckTx
	Value isResponse_Value `protobuf_oneof:"value"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ostracon_abci_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_ostracon_abci_types_proto_rawDescGZIP(), []int{4}
}

func (x *Response) GetValue() isResponse_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Response) GetException() *abci.ResponseException {
	if x, ok := x.GetValue().(*Response_Exception); ok {
		return x.Exception
	}
	return nil
}

func (x *Response) GetEcho() *abci.ResponseEcho {
	if x, ok := x.GetValue().(*Response_Echo); ok {
		return x.Echo
	}
	return nil
}

func (x *Response) GetFlush() *abci.ResponseFlush {
	if x, ok := x.GetValue().(*Response_Flush); ok {
		return x.Flush
	}
	return nil
}

func (x *Response) GetInfo() *abci.ResponseInfo {
	if x, ok := x.GetValue().(*Response_Info); ok {
		return x.Info
	}
	return nil
}

func (x *Response) GetSetOption() *abci.ResponseSetOption {
	if x, ok := x.GetValue().(*Response_SetOption); ok {
		return x.SetOption
	}
	return nil
}

func (x *Response) GetInitChain() *abci.ResponseInitChain {
	if x, ok := x.GetValue().(*Response_InitChain); ok {
		return x.InitChain
	}
	return nil
}

func (x *Response) GetQuery() *abci.ResponseQuery {
	if x, ok := x.GetValue().(*Response_Query); ok {
		return x.Query
	}
	return nil
}

func (x *Response) GetBeginBlock() *abci.ResponseBeginBlock {
	if x, ok := x.GetValue().(*Response_BeginBlock); ok {
		return x.BeginBlock
	}
	return nil
}

func (x *Response) GetCheckTx() *ResponseCheckTx {
	if x, ok := x.GetValue().(*Response_CheckTx); ok {
		return x.CheckTx
	}
	return nil
}

func (x *Response) GetDeliverTx() *abci.ResponseDeliverTx {
	if x, ok := x.GetValue().(*Response_DeliverTx); ok {
		return x.DeliverTx
	}
	return nil
}

func (x *Response) GetEndBlock() *abci.ResponseEndBlock {
	if x, ok := x.GetValue().(*Response_EndBlock); ok {
		return x.EndBlock
	}
	return nil
}

func (x *Response) GetCommit() *abci.ResponseCommit {
	if x, ok := x.GetValue().(*Response_Commit); ok {
		return x.Commit
	}
	return nil
}

func (x *Response) GetListSnapshots() *abci.ResponseListSnapshots {
	if x, ok := x.GetValue().(*Response_ListSnapshots); ok {
		return x.ListSnapshots
	}
	return nil
}

func (x *Response) GetOfferSnapshot() *abci.ResponseOfferSnapshot {
	if x, ok := x.GetValue().(*Response_OfferSnapshot); ok {
		return x.OfferSnapshot
	}
	return nil
}

func (x *Response) GetLoadSnapshotChunk() *abci.ResponseLoadSnapshotChunk {
	if x, ok := x.GetValue().(*Response_LoadSnapshotChunk); ok {
		return x.LoadSnapshotChunk
	}
	return nil
}

func (x *Response) GetApplySnapshotChunk() *abci.ResponseApplySnapshotChunk {
	if x, ok := x.GetValue().(*Response_ApplySnapshotChunk); ok {
		return x.ApplySnapshotChunk
	}
	return nil
}

func (x *Response) GetBeginRecheckTx() *ResponseBeginRecheckTx {
	if x, ok := x.GetValue().(*Response_BeginRecheckTx); ok {
		return x.BeginRecheckTx
	}
	return nil
}

func (x *Response) GetEndRecheckTx() *ResponseEndRecheckTx {
	if x, ok := x.GetValue().(*Response_EndRecheckTx); ok {
		return x.EndRecheckTx
	}
	return nil
}

type isResponse_Value interface {
	isResponse_Value()
}

type Response_Exception struct {
	Exception *abci.ResponseException `protobuf:"bytes,1,opt,name=exception,proto3,oneof"`
}

type Response_Echo struct {
	Echo *abci.ResponseEcho `protobuf:"bytes,2,opt,name=echo,proto3,oneof"`
}

type Response_Flush struct {
	Flush *abci.ResponseFlush `protobuf:"bytes,3,opt,name=flush,proto3,oneof"`
}

type Response_Info struct {
	Info *abci.ResponseInfo `protobuf:"bytes,4,opt,name=info,proto3,oneof"`
}

type Response_SetOption struct {
	SetOption *abci.ResponseSetOption `protobuf:"bytes,5,opt,name=set_option,json=setOption,proto3,oneof"`
}

type Response_InitChain struct {
	InitChain *abci.ResponseInitChain `protobuf:"bytes,6,opt,name=init_chain,json=initChain,proto3,oneof"`
}

type Response_Query struct {
	Query *abci.ResponseQuery `protobuf:"bytes,7,opt,name=query,proto3,oneof"`
}

type Response_BeginBlock struct {
	BeginBlock *abci.ResponseBeginBlock `protobuf:"bytes,8,opt,name=begin_block,json=beginBlock,proto3,oneof"`
}

type Response_CheckTx struct {
	CheckTx *ResponseCheckTx `protobuf:"bytes,9,opt,name=check_tx,json=checkTx,proto3,oneof"`
}

type Response_DeliverTx struct {
	DeliverTx *abci.ResponseDeliverTx `protobuf:"bytes,10,opt,name=deliver_tx,json=deliverTx,proto3,oneof"`
}

type Response_EndBlock struct {
	EndBlock *abci.ResponseEndBlock `protobuf:"bytes,11,opt,name=end_block,json=endBlock,proto3,oneof"`
}

type Response_Commit struct {
	Commit *abci.ResponseCommit `protobuf:"bytes,12,opt,name=commit,proto3,oneof"`
}

type Response_ListSnapshots struct {
	ListSnapshots *abci.ResponseListSnapshots `protobuf:"bytes,13,opt,name=list_snapshots,json=listSnapshots,proto3,oneof"`
}

type Response_OfferSnapshot struct {
	OfferSnapshot *abci.ResponseOfferSnapshot `protobuf:"bytes,14,opt,name=offer_snapshot,json=offerSnapshot,proto3,oneof"`
}

type Response_LoadSnapshotChunk struct {
	LoadSnapshotChunk *abci.ResponseLoadSnapshotChunk `protobuf:"bytes,15,opt,name=load_snapshot_chunk,json=loadSnapshotChunk,proto3,oneof"`
}

type Response_ApplySnapshotChunk struct {
	ApplySnapshotChunk *abci.ResponseApplySnapshotChunk `protobuf:"bytes,16,opt,name=apply_snapshot_chunk,json=applySnapshotChunk,proto3,oneof"`
}

type Response_BeginRecheckTx struct {
	BeginRecheckTx *ResponseBeginRecheckTx `protobuf:"bytes,1000,opt,name=begin_recheck_tx,json=beginRecheckTx,proto3,oneof"` // 17~99 are reserved for merging original tendermint
}

type Response_EndRecheckTx struct {
	EndRecheckTx *ResponseEndRecheckTx `protobuf:"bytes,1001,opt,name=end_recheck_tx,json=endRecheckTx,proto3,oneof"`
}

func (*Response_Exception) isResponse_Value() {}

func (*Response_Echo) isResponse_Value() {}

func (*Response_Flush) isResponse_Value() {}

func (*Response_Info) isResponse_Value() {}

func (*Response_SetOption) isResponse_Value() {}

func (*Response_InitChain) isResponse_Value() {}

func (*Response_Query) isResponse_Value() {}

func (*Response_BeginBlock) isResponse_Value() {}

func (*Response_CheckTx) isResponse_Value() {}

func (*Response_DeliverTx) isResponse_Value() {}

func (*Response_EndBlock) isResponse_Value() {}

func (*Response_Commit) isResponse_Value() {}

func (*Response_ListSnapshots) isResponse_Value() {}

func (*Response_OfferSnapshot) isResponse_Value() {}

func (*Response_LoadSnapshotChunk) isResponse_Value() {}

func (*Response_ApplySnapshotChunk) isResponse_Value() {}

func (*Response_BeginRecheckTx) isResponse_Value() {}

func (*Response_EndRecheckTx) isResponse_Value() {}

type ResponseCheckTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data      []byte        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Log       string        `protobuf:"bytes,3,opt,name=log,proto3" json:"log,omitempty"`   // nondeterministic
	Info      string        `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"` // nondeterministic
	GasWanted int64         `protobuf:"varint,5,opt,name=gas_wanted,proto3" json:"gas_wanted,omitempty"`
	GasUsed   int64         `protobuf:"varint,6,opt,name=gas_used,proto3" json:"gas_used,omitempty"`
	Events    []*abci.Event `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	Codespace string        `protobuf:"bytes,8,opt,name=codespace,proto3" json:"codespace,omitempty"`
	Sender    string        `protobuf:"bytes,9,opt,name=sender,proto3" json:"sender,omitempty"`       // MEMO: not used, just reservation to implement https://github.com/tendermint/tendermint/pull/6740 first
	Priority  int64         `protobuf:"varint,10,opt,name=priority,proto3" json:"priority,omitempty"` // MEMO: not used, just reservation to implement https://github.com/tendermint/tendermint/pull/6740 first
	// mempool_error is set by Ostracon.
	// ABCI applictions creating a ResponseCheckTX should not set mempool_error.
	MempoolError string `protobuf:"bytes,11,opt,name=mempool_error,json=mempoolError,proto3" json:"mempool_error,omitempty"`
}

func (x *ResponseCheckTx) Reset() {
	*x = ResponseCheckTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ostracon_abci_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseCheckTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCheckTx) ProtoMessage() {}

// Deprecated: Use ResponseCheckTx.ProtoReflect.Descriptor instead.
func (*ResponseCheckTx) Descriptor() ([]byte, []int) {
	return file_ostracon_abci_types_proto_rawDescGZIP(), []int{5}
}

func (x *ResponseCheckTx) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ResponseCheckTx) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ResponseCheckTx) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *ResponseCheckTx) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *ResponseCheckTx) GetGasWanted() int64 {
	if x != nil {
		return x.GasWanted
	}
	return 0
}

func (x *ResponseCheckTx) GetGasUsed() int64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ResponseCheckTx) GetEvents() []*abci.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ResponseCheckTx) GetCodespace() string {
	if x != nil {
		return x.Codespace
	}
	return ""
}

func (x *ResponseCheckTx) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *ResponseCheckTx) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ResponseCheckTx) GetMempoolError() string {
	if x != nil {
		return x.MempoolError
	}
	return ""
}

type ResponseBeginRecheckTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ResponseBeginRecheckTx) Reset() {
	*x = ResponseBeginRecheckTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ostracon_abci_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseBeginRecheckTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBeginRecheckTx) ProtoMessage() {}

// Deprecated: Use ResponseBeginRecheckTx.ProtoReflect.Descriptor instead.
func (*ResponseBeginRecheckTx) Descriptor() ([]byte, []int) {
	return file_ostracon_abci_types_proto_rawDescGZIP(), []int{6}
}

func (x *ResponseBeginRecheckTx) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type ResponseEndRecheckTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ResponseEndRecheckTx) Reset() {
	*x = ResponseEndRecheckTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ostracon_abci_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseEndRecheckTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseEndRecheckTx) ProtoMessage() {}

// Deprecated: Use ResponseEndRecheckTx.ProtoReflect.Descriptor instead.
func (*ResponseEndRecheckTx) Descriptor() ([]byte, []int) {
	return file_ostracon_abci_types_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseEndRecheckTx) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_ostracon_abci_types_proto protoreflect.FileDescriptor

var file_ostracon_abci_types_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2f, 0x61, 0x62, 0x63, 0x69, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6f, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x1a, 0x1b, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x61, 0x62, 0x63, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61,
	0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x63, 0x68, 0x6f, 0x48,
	0x00, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x35, 0x0a, 0x05, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x32,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x43, 0x0a, 0x0b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f,
	0x6e, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x74, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x78, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x78, 0x48, 0x00, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x78, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x4e, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x5b, 0x0a, 0x13, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62,
	0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x11, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x5e, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x51, 0x0a, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x5f, 0x74, 0x78, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x78, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x78, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x74, 0x78, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78,
	0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x11, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x14,
	0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x13, 0x62, 0x79, 0x7a,
	0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x38, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0xe8, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x22, 0x4f, 0x0a, 0x15, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x78, 0x12, 0x36, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x13, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x85, 0x0a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x65,
	0x63, 0x68, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x63, 0x68, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f,
	0x12, 0x36, 0x0a, 0x05, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a,
	0x0a, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61,
	0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x46, 0x0a, 0x0b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x74, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x78, 0x12, 0x43, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x78, 0x48, 0x00, 0x52, 0x09,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x78, 0x12, 0x40, 0x0a, 0x09, 0x65, 0x6e, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x5c, 0x0a, 0x13, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x5f, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x48, 0x00, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x52, 0x0a, 0x10, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x78, 0x18, 0xe8, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x61, 0x62,
	0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x12, 0x4c, 0x0a, 0x0e, 0x65,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x78, 0x18, 0xe9, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e,
	0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xdc, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x77, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x77, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x12, 0x48, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62,
	0x63, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x18, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde,
	0x1f, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x2c, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x2a, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0xb7, 0x0b, 0x0a, 0x0f,
	0x41, 0x42, 0x43, 0x49, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x63, 0x68, 0x6f, 0x1a, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x45, 0x63, 0x68, 0x6f, 0x12, 0x46, 0x0a, 0x05, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x1d, 0x2e,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x1a, 0x1e, 0x2e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x43, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e,
	0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x52, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61,
	0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x54, 0x78, 0x12, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e,
	0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x54, 0x78, 0x1a, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x54, 0x78, 0x12, 0x4a, 0x0a, 0x07, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x78, 0x12, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x78, 0x1a, 0x1e, 0x2e, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e,
	0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x78, 0x12, 0x46, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d,
	0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x49, 0x0a,
	0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x1a, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x0a,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x6f, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x23, 0x2e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x4f, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x2e,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a,
	0x21, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x5e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74,
	0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x1a, 0x26, 0x2e, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x12, 0x5e, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74,
	0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x6a, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x1a, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e,
	0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x61,
	0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x6d,
	0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x74, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x1a, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x61, 0x62,
	0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x5d, 0x0a,
	0x0e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x12,
	0x24, 0x2e, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x78, 0x1a, 0x25, 0x2e, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e,
	0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x12, 0x57, 0x0a, 0x0c,
	0x45, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78, 0x12, 0x22, 0x2e, 0x6f,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x78,
	0x1a, 0x23, 0x2e, 0x6f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x61, 0x62, 0x63, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x78, 0x42, 0xa8, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x61, 0x62, 0x63, 0x69, 0x42, 0x0a, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x46, 0x69, 0x6e, 0x73, 0x63, 0x68, 0x69, 0x61, 0x2f, 0x66,
	0x69, 0x6e, 0x73, 0x63, 0x68, 0x69, 0x61, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2f, 0x61, 0x62, 0x63, 0x69, 0xa2, 0x02, 0x03,
	0x4f, 0x41, 0x58, 0xaa, 0x02, 0x0d, 0x4f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x2e, 0x41,
	0x62, 0x63, 0x69, 0xca, 0x02, 0x0d, 0x4f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x5c, 0x41,
	0x62, 0x63, 0x69, 0xe2, 0x02, 0x19, 0x4f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x5c, 0x41,
	0x62, 0x63, 0x69, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0e, 0x4f, 0x73, 0x74, 0x72, 0x61, 0x63, 0x6f, 0x6e, 0x3a, 0x3a, 0x41, 0x62, 0x63, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ostracon_abci_types_proto_rawDescOnce sync.Once
	file_ostracon_abci_types_proto_rawDescData = file_ostracon_abci_types_proto_rawDesc
)

func file_ostracon_abci_types_proto_rawDescGZIP() []byte {
	file_ostracon_abci_types_proto_rawDescOnce.Do(func() {
		file_ostracon_abci_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_ostracon_abci_types_proto_rawDescData)
	})
	return file_ostracon_abci_types_proto_rawDescData
}

var file_ostracon_abci_types_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_ostracon_abci_types_proto_goTypes = []interface{}{
	(*Request)(nil),                         // 0: ostracon.abci.Request
	(*RequestBeginBlock)(nil),               // 1: ostracon.abci.RequestBeginBlock
	(*RequestBeginRecheckTx)(nil),           // 2: ostracon.abci.RequestBeginRecheckTx
	(*RequestEndRecheckTx)(nil),             // 3: ostracon.abci.RequestEndRecheckTx
	(*Response)(nil),                        // 4: ostracon.abci.Response
	(*ResponseCheckTx)(nil),                 // 5: ostracon.abci.ResponseCheckTx
	(*ResponseBeginRecheckTx)(nil),          // 6: ostracon.abci.ResponseBeginRecheckTx
	(*ResponseEndRecheckTx)(nil),            // 7: ostracon.abci.ResponseEndRecheckTx
	(*abci.RequestEcho)(nil),                // 8: tendermint.abci.RequestEcho
	(*abci.RequestFlush)(nil),               // 9: tendermint.abci.RequestFlush
	(*abci.RequestInfo)(nil),                // 10: tendermint.abci.RequestInfo
	(*abci.RequestSetOption)(nil),           // 11: tendermint.abci.RequestSetOption
	(*abci.RequestInitChain)(nil),           // 12: tendermint.abci.RequestInitChain
	(*abci.RequestQuery)(nil),               // 13: tendermint.abci.RequestQuery
	(*abci.RequestCheckTx)(nil),             // 14: tendermint.abci.RequestCheckTx
	(*abci.RequestDeliverTx)(nil),           // 15: tendermint.abci.RequestDeliverTx
	(*abci.RequestEndBlock)(nil),            // 16: tendermint.abci.RequestEndBlock
	(*abci.RequestCommit)(nil),              // 17: tendermint.abci.RequestCommit
	(*abci.RequestListSnapshots)(nil),       // 18: tendermint.abci.RequestListSnapshots
	(*abci.RequestOfferSnapshot)(nil),       // 19: tendermint.abci.RequestOfferSnapshot
	(*abci.RequestLoadSnapshotChunk)(nil),   // 20: tendermint.abci.RequestLoadSnapshotChunk
	(*abci.RequestApplySnapshotChunk)(nil),  // 21: tendermint.abci.RequestApplySnapshotChunk
	(*types.Header)(nil),                    // 22: tendermint.types.Header
	(*abci.LastCommitInfo)(nil),             // 23: tendermint.abci.LastCommitInfo
	(*abci.Evidence)(nil),                   // 24: tendermint.abci.Evidence
	(*types1.Entropy)(nil),                  // 25: ostracon.types.Entropy
	(*abci.ResponseException)(nil),          // 26: tendermint.abci.ResponseException
	(*abci.ResponseEcho)(nil),               // 27: tendermint.abci.ResponseEcho
	(*abci.ResponseFlush)(nil),              // 28: tendermint.abci.ResponseFlush
	(*abci.ResponseInfo)(nil),               // 29: tendermint.abci.ResponseInfo
	(*abci.ResponseSetOption)(nil),          // 30: tendermint.abci.ResponseSetOption
	(*abci.ResponseInitChain)(nil),          // 31: tendermint.abci.ResponseInitChain
	(*abci.ResponseQuery)(nil),              // 32: tendermint.abci.ResponseQuery
	(*abci.ResponseBeginBlock)(nil),         // 33: tendermint.abci.ResponseBeginBlock
	(*abci.ResponseDeliverTx)(nil),          // 34: tendermint.abci.ResponseDeliverTx
	(*abci.ResponseEndBlock)(nil),           // 35: tendermint.abci.ResponseEndBlock
	(*abci.ResponseCommit)(nil),             // 36: tendermint.abci.ResponseCommit
	(*abci.ResponseListSnapshots)(nil),      // 37: tendermint.abci.ResponseListSnapshots
	(*abci.ResponseOfferSnapshot)(nil),      // 38: tendermint.abci.ResponseOfferSnapshot
	(*abci.ResponseLoadSnapshotChunk)(nil),  // 39: tendermint.abci.ResponseLoadSnapshotChunk
	(*abci.ResponseApplySnapshotChunk)(nil), // 40: tendermint.abci.ResponseApplySnapshotChunk
	(*abci.Event)(nil),                      // 41: tendermint.abci.Event
}
var file_ostracon_abci_types_proto_depIdxs = []int32{
	8,  // 0: ostracon.abci.Request.echo:type_name -> tendermint.abci.RequestEcho
	9,  // 1: ostracon.abci.Request.flush:type_name -> tendermint.abci.RequestFlush
	10, // 2: ostracon.abci.Request.info:type_name -> tendermint.abci.RequestInfo
	11, // 3: ostracon.abci.Request.set_option:type_name -> tendermint.abci.RequestSetOption
	12, // 4: ostracon.abci.Request.init_chain:type_name -> tendermint.abci.RequestInitChain
	13, // 5: ostracon.abci.Request.query:type_name -> tendermint.abci.RequestQuery
	1,  // 6: ostracon.abci.Request.begin_block:type_name -> ostracon.abci.RequestBeginBlock
	14, // 7: ostracon.abci.Request.check_tx:type_name -> tendermint.abci.RequestCheckTx
	15, // 8: ostracon.abci.Request.deliver_tx:type_name -> tendermint.abci.RequestDeliverTx
	16, // 9: ostracon.abci.Request.end_block:type_name -> tendermint.abci.RequestEndBlock
	17, // 10: ostracon.abci.Request.commit:type_name -> tendermint.abci.RequestCommit
	18, // 11: ostracon.abci.Request.list_snapshots:type_name -> tendermint.abci.RequestListSnapshots
	19, // 12: ostracon.abci.Request.offer_snapshot:type_name -> tendermint.abci.RequestOfferSnapshot
	20, // 13: ostracon.abci.Request.load_snapshot_chunk:type_name -> tendermint.abci.RequestLoadSnapshotChunk
	21, // 14: ostracon.abci.Request.apply_snapshot_chunk:type_name -> tendermint.abci.RequestApplySnapshotChunk
	2,  // 15: ostracon.abci.Request.begin_recheck_tx:type_name -> ostracon.abci.RequestBeginRecheckTx
	3,  // 16: ostracon.abci.Request.end_recheck_tx:type_name -> ostracon.abci.RequestEndRecheckTx
	22, // 17: ostracon.abci.RequestBeginBlock.header:type_name -> tendermint.types.Header
	23, // 18: ostracon.abci.RequestBeginBlock.last_commit_info:type_name -> tendermint.abci.LastCommitInfo
	24, // 19: ostracon.abci.RequestBeginBlock.byzantine_validators:type_name -> tendermint.abci.Evidence
	25, // 20: ostracon.abci.RequestBeginBlock.entropy:type_name -> ostracon.types.Entropy
	22, // 21: ostracon.abci.RequestBeginRecheckTx.header:type_name -> tendermint.types.Header
	26, // 22: ostracon.abci.Response.exception:type_name -> tendermint.abci.ResponseException
	27, // 23: ostracon.abci.Response.echo:type_name -> tendermint.abci.ResponseEcho
	28, // 24: ostracon.abci.Response.flush:type_name -> tendermint.abci.ResponseFlush
	29, // 25: ostracon.abci.Response.info:type_name -> tendermint.abci.ResponseInfo
	30, // 26: ostracon.abci.Response.set_option:type_name -> tendermint.abci.ResponseSetOption
	31, // 27: ostracon.abci.Response.init_chain:type_name -> tendermint.abci.ResponseInitChain
	32, // 28: ostracon.abci.Response.query:type_name -> tendermint.abci.ResponseQuery
	33, // 29: ostracon.abci.Response.begin_block:type_name -> tendermint.abci.ResponseBeginBlock
	5,  // 30: ostracon.abci.Response.check_tx:type_name -> ostracon.abci.ResponseCheckTx
	34, // 31: ostracon.abci.Response.deliver_tx:type_name -> tendermint.abci.ResponseDeliverTx
	35, // 32: ostracon.abci.Response.end_block:type_name -> tendermint.abci.ResponseEndBlock
	36, // 33: ostracon.abci.Response.commit:type_name -> tendermint.abci.ResponseCommit
	37, // 34: ostracon.abci.Response.list_snapshots:type_name -> tendermint.abci.ResponseListSnapshots
	38, // 35: ostracon.abci.Response.offer_snapshot:type_name -> tendermint.abci.ResponseOfferSnapshot
	39, // 36: ostracon.abci.Response.load_snapshot_chunk:type_name -> tendermint.abci.ResponseLoadSnapshotChunk
	40, // 37: ostracon.abci.Response.apply_snapshot_chunk:type_name -> tendermint.abci.ResponseApplySnapshotChunk
	6,  // 38: ostracon.abci.Response.begin_recheck_tx:type_name -> ostracon.abci.ResponseBeginRecheckTx
	7,  // 39: ostracon.abci.Response.end_recheck_tx:type_name -> ostracon.abci.ResponseEndRecheckTx
	41, // 40: ostracon.abci.ResponseCheckTx.events:type_name -> tendermint.abci.Event
	8,  // 41: ostracon.abci.ABCIApplication.Echo:input_type -> tendermint.abci.RequestEcho
	9,  // 42: ostracon.abci.ABCIApplication.Flush:input_type -> tendermint.abci.RequestFlush
	10, // 43: ostracon.abci.ABCIApplication.Info:input_type -> tendermint.abci.RequestInfo
	11, // 44: ostracon.abci.ABCIApplication.SetOption:input_type -> tendermint.abci.RequestSetOption
	15, // 45: ostracon.abci.ABCIApplication.DeliverTx:input_type -> tendermint.abci.RequestDeliverTx
	14, // 46: ostracon.abci.ABCIApplication.CheckTx:input_type -> tendermint.abci.RequestCheckTx
	13, // 47: ostracon.abci.ABCIApplication.Query:input_type -> tendermint.abci.RequestQuery
	17, // 48: ostracon.abci.ABCIApplication.Commit:input_type -> tendermint.abci.RequestCommit
	12, // 49: ostracon.abci.ABCIApplication.InitChain:input_type -> tendermint.abci.RequestInitChain
	1,  // 50: ostracon.abci.ABCIApplication.BeginBlock:input_type -> ostracon.abci.RequestBeginBlock
	16, // 51: ostracon.abci.ABCIApplication.EndBlock:input_type -> tendermint.abci.RequestEndBlock
	18, // 52: ostracon.abci.ABCIApplication.ListSnapshots:input_type -> tendermint.abci.RequestListSnapshots
	19, // 53: ostracon.abci.ABCIApplication.OfferSnapshot:input_type -> tendermint.abci.RequestOfferSnapshot
	20, // 54: ostracon.abci.ABCIApplication.LoadSnapshotChunk:input_type -> tendermint.abci.RequestLoadSnapshotChunk
	21, // 55: ostracon.abci.ABCIApplication.ApplySnapshotChunk:input_type -> tendermint.abci.RequestApplySnapshotChunk
	2,  // 56: ostracon.abci.ABCIApplication.BeginRecheckTx:input_type -> ostracon.abci.RequestBeginRecheckTx
	3,  // 57: ostracon.abci.ABCIApplication.EndRecheckTx:input_type -> ostracon.abci.RequestEndRecheckTx
	27, // 58: ostracon.abci.ABCIApplication.Echo:output_type -> tendermint.abci.ResponseEcho
	28, // 59: ostracon.abci.ABCIApplication.Flush:output_type -> tendermint.abci.ResponseFlush
	29, // 60: ostracon.abci.ABCIApplication.Info:output_type -> tendermint.abci.ResponseInfo
	30, // 61: ostracon.abci.ABCIApplication.SetOption:output_type -> tendermint.abci.ResponseSetOption
	34, // 62: ostracon.abci.ABCIApplication.DeliverTx:output_type -> tendermint.abci.ResponseDeliverTx
	5,  // 63: ostracon.abci.ABCIApplication.CheckTx:output_type -> ostracon.abci.ResponseCheckTx
	32, // 64: ostracon.abci.ABCIApplication.Query:output_type -> tendermint.abci.ResponseQuery
	36, // 65: ostracon.abci.ABCIApplication.Commit:output_type -> tendermint.abci.ResponseCommit
	31, // 66: ostracon.abci.ABCIApplication.InitChain:output_type -> tendermint.abci.ResponseInitChain
	33, // 67: ostracon.abci.ABCIApplication.BeginBlock:output_type -> tendermint.abci.ResponseBeginBlock
	35, // 68: ostracon.abci.ABCIApplication.EndBlock:output_type -> tendermint.abci.ResponseEndBlock
	37, // 69: ostracon.abci.ABCIApplication.ListSnapshots:output_type -> tendermint.abci.ResponseListSnapshots
	38, // 70: ostracon.abci.ABCIApplication.OfferSnapshot:output_type -> tendermint.abci.ResponseOfferSnapshot
	39, // 71: ostracon.abci.ABCIApplication.LoadSnapshotChunk:output_type -> tendermint.abci.ResponseLoadSnapshotChunk
	40, // 72: ostracon.abci.ABCIApplication.ApplySnapshotChunk:output_type -> tendermint.abci.ResponseApplySnapshotChunk
	6,  // 73: ostracon.abci.ABCIApplication.BeginRecheckTx:output_type -> ostracon.abci.ResponseBeginRecheckTx
	7,  // 74: ostracon.abci.ABCIApplication.EndRecheckTx:output_type -> ostracon.abci.ResponseEndRecheckTx
	58, // [58:75] is the sub-list for method output_type
	41, // [41:58] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_ostracon_abci_types_proto_init() }
func file_ostracon_abci_types_proto_init() {
	if File_ostracon_abci_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ostracon_abci_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ostracon_abci_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBeginBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ostracon_abci_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestBeginRecheckTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ostracon_abci_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestEndRecheckTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ostracon_abci_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ostracon_abci_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseCheckTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ostracon_abci_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseBeginRecheckTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ostracon_abci_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseEndRecheckTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ostracon_abci_types_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Request_Echo)(nil),
		(*Request_Flush)(nil),
		(*Request_Info)(nil),
		(*Request_SetOption)(nil),
		(*Request_InitChain)(nil),
		(*Request_Query)(nil),
		(*Request_BeginBlock)(nil),
		(*Request_CheckTx)(nil),
		(*Request_DeliverTx)(nil),
		(*Request_EndBlock)(nil),
		(*Request_Commit)(nil),
		(*Request_ListSnapshots)(nil),
		(*Request_OfferSnapshot)(nil),
		(*Request_LoadSnapshotChunk)(nil),
		(*Request_ApplySnapshotChunk)(nil),
		(*Request_BeginRecheckTx)(nil),
		(*Request_EndRecheckTx)(nil),
	}
	file_ostracon_abci_types_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Response_Exception)(nil),
		(*Response_Echo)(nil),
		(*Response_Flush)(nil),
		(*Response_Info)(nil),
		(*Response_SetOption)(nil),
		(*Response_InitChain)(nil),
		(*Response_Query)(nil),
		(*Response_BeginBlock)(nil),
		(*Response_CheckTx)(nil),
		(*Response_DeliverTx)(nil),
		(*Response_EndBlock)(nil),
		(*Response_Commit)(nil),
		(*Response_ListSnapshots)(nil),
		(*Response_OfferSnapshot)(nil),
		(*Response_LoadSnapshotChunk)(nil),
		(*Response_ApplySnapshotChunk)(nil),
		(*Response_BeginRecheckTx)(nil),
		(*Response_EndRecheckTx)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ostracon_abci_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ostracon_abci_types_proto_goTypes,
		DependencyIndexes: file_ostracon_abci_types_proto_depIdxs,
		MessageInfos:      file_ostracon_abci_types_proto_msgTypes,
	}.Build()
	File_ostracon_abci_types_proto = out.File
	file_ostracon_abci_types_proto_rawDesc = nil
	file_ostracon_abci_types_proto_goTypes = nil
	file_ostracon_abci_types_proto_depIdxs = nil
}
